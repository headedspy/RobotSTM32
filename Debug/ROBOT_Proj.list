
ROBOT_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009280  08009280  00019280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f0  080096f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080096f0  080096f0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096f0  080096f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000134  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001202d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002318  00000000  00000000  0003223d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  00035290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ea6  00000000  00000000  00035ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f0f  00000000  00000000  00057d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc1c3  00000000  00000000  00068c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134e60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000491c  00000000  00000000  00134eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009264 	.word	0x08009264

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009264 	.word	0x08009264

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <DWT_Delay_Init>:
}HCSR04_info;

static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};

uint32_t DWT_Delay_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <DWT_Delay_Init+0x58>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <DWT_Delay_Init+0x58>)
 8000ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ca6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <DWT_Delay_Init+0x58>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <DWT_Delay_Init+0x58>)
 8000cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cb2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <DWT_Delay_Init+0x5c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <DWT_Delay_Init+0x5c>)
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <DWT_Delay_Init+0x5c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <DWT_Delay_Init+0x5c>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <DWT_Delay_Init+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000cd2:	bf00      	nop
    __ASM volatile ("NOP");
 8000cd4:	bf00      	nop
    __ASM volatile ("NOP");
 8000cd6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <DWT_Delay_Init+0x5c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e000      	b.n	8000ce6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000ce4:	2301      	movs	r3, #1
    }
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000edf0 	.word	0xe000edf0
 8000cf4:	e0001000 	.word	0xe0001000

08000cf8 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <DWT_Delay_us+0x48>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000d06:	f002 fee9 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <DWT_Delay_us+0x4c>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000d20:	bf00      	nop
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <DWT_Delay_us+0x48>)
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad2      	subs	r2, r2, r3
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1acb      	subs	r3, r1, r3
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3f6      	bcc.n	8000d22 <DWT_Delay_us+0x2a>
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e0001000 	.word	0xe0001000
 8000d44:	431bde83 	.word	0x431bde83

08000d48 <HCSR04_Init>:
  au32_milliseconds *= au32_ticks;
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
}

void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b098      	sub	sp, #96	; 0x60
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8000d54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 8000d8c:	f7ff ff84 	bl	8000c98 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	4993      	ldr	r1, [pc, #588]	; (8000fe0 <HCSR04_Init+0x298>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000da4:	d10c      	bne.n	8000dc0 <HCSR04_Init+0x78>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b8f      	ldr	r3, [pc, #572]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a8e      	ldr	r2, [pc, #568]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b8c      	ldr	r3, [pc, #560]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	e05e      	b.n	8000e7e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	4987      	ldr	r1, [pc, #540]	; (8000fe0 <HCSR04_Init+0x298>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a85      	ldr	r2, [pc, #532]	; (8000fe8 <HCSR04_Init+0x2a0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10c      	bne.n	8000df0 <HCSR04_Init+0xa8>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b83      	ldr	r3, [pc, #524]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a82      	ldr	r2, [pc, #520]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b80      	ldr	r3, [pc, #512]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	e046      	b.n	8000e7e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	497b      	ldr	r1, [pc, #492]	; (8000fe0 <HCSR04_Init+0x298>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a7a      	ldr	r2, [pc, #488]	; (8000fec <HCSR04_Init+0x2a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10c      	bne.n	8000e20 <HCSR04_Init+0xd8>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a76      	ldr	r2, [pc, #472]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	e02e      	b.n	8000e7e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	496f      	ldr	r1, [pc, #444]	; (8000fe0 <HCSR04_Init+0x298>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6f      	ldr	r2, [pc, #444]	; (8000ff0 <HCSR04_Init+0x2a8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10c      	bne.n	8000e50 <HCSR04_Init+0x108>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a6a      	ldr	r2, [pc, #424]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	e016      	b.n	8000e7e <HCSR04_Init+0x136>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	4963      	ldr	r1, [pc, #396]	; (8000fe0 <HCSR04_Init+0x298>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a64      	ldr	r2, [pc, #400]	; (8000ff4 <HCSR04_Init+0x2ac>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10b      	bne.n	8000e7e <HCSR04_Init+0x136>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a5e      	ldr	r2, [pc, #376]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <HCSR04_Init+0x29c>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4957      	ldr	r1, [pc, #348]	; (8000fe0 <HCSR04_Init+0x298>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	653b      	str	r3, [r7, #80]	; 0x50
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	657b      	str	r3, [r7, #84]	; 0x54
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	494f      	ldr	r1, [pc, #316]	; (8000fe0 <HCSR04_Init+0x298>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fb73 	bl	80025a0 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	4948      	ldr	r1, [pc, #288]	; (8000fe0 <HCSR04_Init+0x298>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3308      	adds	r3, #8
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ed0:	4849      	ldr	r0, [pc, #292]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4403      	add	r3, r0
 8000edc:	3304      	adds	r3, #4
 8000ede:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	493f      	ldr	r1, [pc, #252]	; (8000fe0 <HCSR04_Init+0x298>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	3308      	adds	r3, #8
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ef6:	4840      	ldr	r0, [pc, #256]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4403      	add	r3, r0
 8000f02:	3308      	adds	r3, #8
 8000f04:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	493b      	ldr	r1, [pc, #236]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3302      	adds	r3, #2
 8000f16:	2200      	movs	r2, #0
 8000f18:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	4936      	ldr	r1, [pc, #216]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	331c      	adds	r3, #28
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4931      	ldr	r1, [pc, #196]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10a      	bne.n	8000f5a <HCSR04_Init+0x212>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	492c      	ldr	r1, [pc, #176]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	3308      	adds	r3, #8
 8000f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f58:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	4920      	ldr	r1, [pc, #128]	; (8000fe0 <HCSR04_Init+0x298>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	330c      	adds	r3, #12
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10a      	bne.n	8000f86 <HCSR04_Init+0x23e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	4921      	ldr	r1, [pc, #132]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3320      	adds	r3, #32
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	e04f      	b.n	8001026 <HCSR04_Init+0x2de>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	4915      	ldr	r1, [pc, #84]	; (8000fe0 <HCSR04_Init+0x298>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	330c      	adds	r3, #12
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d10a      	bne.n	8000fb2 <HCSR04_Init+0x26a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4916      	ldr	r1, [pc, #88]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3320      	adds	r3, #32
 8000fac:	2202      	movs	r2, #2
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e039      	b.n	8001026 <HCSR04_Init+0x2de>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <HCSR04_Init+0x298>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d119      	bne.n	8000ffc <HCSR04_Init+0x2b4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <HCSR04_Init+0x2b0>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	2204      	movs	r2, #4
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e023      	b.n	8001026 <HCSR04_Init+0x2de>
 8000fde:	bf00      	nop
 8000fe0:	08009280 	.word	0x08009280
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	48000c00 	.word	0x48000c00
 8000ff4:	48001000 	.word	0x48001000
 8000ff8:	200001fc 	.word	0x200001fc
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	4941      	ldr	r1, [pc, #260]	; (8001104 <HCSR04_Init+0x3bc>)
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	330c      	adds	r3, #12
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b0c      	cmp	r3, #12
 8001010:	d109      	bne.n	8001026 <HCSR04_Init+0x2de>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	493c      	ldr	r1, [pc, #240]	; (8001108 <HCSR04_Init+0x3c0>)
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3320      	adds	r3, #32
 8001022:	2208      	movs	r2, #8
 8001024:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	4936      	ldr	r1, [pc, #216]	; (8001104 <HCSR04_Init+0x3bc>)
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	3308      	adds	r3, #8
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	4932      	ldr	r1, [pc, #200]	; (8001108 <HCSR04_Init+0x3c0>)
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3304      	adds	r3, #4
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001058:	79fa      	ldrb	r2, [r7, #7]
 800105a:	492b      	ldr	r1, [pc, #172]	; (8001108 <HCSR04_Init+0x3c0>)
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3308      	adds	r3, #8
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f002 ff9c 	bl	8003fb8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001086:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800108a:	4619      	mov	r1, r3
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f003 fbc2 	bl	8004816 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f003 f862 	bl	800415c <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80010a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a4:	4619      	mov	r1, r3
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f003 ff62 	bl	8004f70 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigIC.ICFilter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4911      	ldr	r1, [pc, #68]	; (8001104 <HCSR04_Init+0x3bc>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	330c      	adds	r3, #12
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4619      	mov	r1, r3
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f003 fb02 	bl	80046de <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f002 ffce 	bl	800407c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <HCSR04_Init+0x3bc>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	330c      	adds	r3, #12
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f003 f889 	bl	800420c <HAL_TIM_IC_Start_IT>
}
 80010fa:	bf00      	nop
 80010fc:	3760      	adds	r7, #96	; 0x60
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08009280 	.word	0x08009280
 8001108:	200001fc 	.word	0x200001fc

0800110c <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e023      	b.n	8001166 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	4815      	ldr	r0, [pc, #84]	; (800117c <HCSR04_TMR_OVF_ISR+0x70>)
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4403      	add	r3, r0
 8001130:	3308      	adds	r3, #8
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4299      	cmp	r1, r3
 8001136:	d113      	bne.n	8001160 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	4911      	ldr	r1, [pc, #68]	; (8001180 <HCSR04_TMR_OVF_ISR+0x74>)
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	3302      	adds	r3, #2
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b298      	uxth	r0, r3
 800114e:	490c      	ldr	r1, [pc, #48]	; (8001180 <HCSR04_TMR_OVF_ISR+0x74>)
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3302      	adds	r3, #2
 800115c:	4602      	mov	r2, r0
 800115e:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0d8      	beq.n	800111e <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	08009280 	.word	0x08009280
 8001180:	200001fc 	.word	0x200001fc
 8001184:	00000000 	.word	0x00000000

08001188 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e22a      	b.n	80015f4 <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6819      	ldr	r1, [r3, #0]
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	486b      	ldr	r0, [pc, #428]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4403      	add	r3, r0
 80011b0:	3308      	adds	r3, #8
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4299      	cmp	r1, r3
 80011b6:	f040 821a 	bne.w	80015ee <HCSR04_TMR_IC_ISR+0x466>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7f19      	ldrb	r1, [r3, #28]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	4865      	ldr	r0, [pc, #404]	; (8001358 <HCSR04_TMR_IC_ISR+0x1d0>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4403      	add	r3, r0
 80011cc:	3320      	adds	r3, #32
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4299      	cmp	r1, r3
 80011d2:	f040 820c 	bne.w	80015ee <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	495f      	ldr	r1, [pc, #380]	; (8001358 <HCSR04_TMR_IC_ISR+0x1d0>)
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 80b8 	bne.w	800135c <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	4959      	ldr	r1, [pc, #356]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	330c      	adds	r3, #12
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	7bfc      	ldrb	r4, [r7, #15]
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f003 fbd0 	bl	80049a8 <HAL_TIM_ReadCapturedValue>
 8001208:	4602      	mov	r2, r0
 800120a:	4953      	ldr	r1, [pc, #332]	; (8001358 <HCSR04_TMR_IC_ISR+0x1d0>)
 800120c:	4623      	mov	r3, r4
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4423      	add	r3, r4
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	330c      	adds	r3, #12
 8001218:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	494e      	ldr	r1, [pc, #312]	; (8001358 <HCSR04_TMR_IC_ISR+0x1d0>)
 800121e:	4613      	mov	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	4949      	ldr	r1, [pc, #292]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	330c      	adds	r3, #12
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d108      	bne.n	8001254 <HCSR04_TMR_IC_ISR+0xcc>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a1a      	ldr	r2, [r3, #32]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 020a 	bic.w	r2, r2, #10
 8001250:	621a      	str	r2, [r3, #32]
 8001252:	e02f      	b.n	80012b4 <HCSR04_TMR_IC_ISR+0x12c>
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	493f      	ldr	r1, [pc, #252]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	330c      	adds	r3, #12
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d108      	bne.n	800127c <HCSR04_TMR_IC_ISR+0xf4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	e01b      	b.n	80012b4 <HCSR04_TMR_IC_ISR+0x12c>
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	4935      	ldr	r1, [pc, #212]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	330c      	adds	r3, #12
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b08      	cmp	r3, #8
 8001290:	d108      	bne.n	80012a4 <HCSR04_TMR_IC_ISR+0x11c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80012a0:	6213      	str	r3, [r2, #32]
 80012a2:	e007      	b.n	80012b4 <HCSR04_TMR_IC_ISR+0x12c>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	4927      	ldr	r1, [pc, #156]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	330c      	adds	r3, #12
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d108      	bne.n	80012dc <HCSR04_TMR_IC_ISR+0x154>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a1a      	ldr	r2, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0202 	orr.w	r2, r2, #2
 80012d8:	621a      	str	r2, [r3, #32]
 80012da:	e02f      	b.n	800133c <HCSR04_TMR_IC_ISR+0x1b4>
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	491d      	ldr	r1, [pc, #116]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	330c      	adds	r3, #12
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d108      	bne.n	8001304 <HCSR04_TMR_IC_ISR+0x17c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6213      	str	r3, [r2, #32]
 8001302:	e01b      	b.n	800133c <HCSR04_TMR_IC_ISR+0x1b4>
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	4913      	ldr	r1, [pc, #76]	; (8001354 <HCSR04_TMR_IC_ISR+0x1cc>)
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	330c      	adds	r3, #12
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b08      	cmp	r3, #8
 8001318:	d108      	bne.n	800132c <HCSR04_TMR_IC_ISR+0x1a4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	e007      	b.n	800133c <HCSR04_TMR_IC_ISR+0x1b4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133a:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	4906      	ldr	r1, [pc, #24]	; (8001358 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	3302      	adds	r3, #2
 800134c:	2200      	movs	r2, #0
 800134e:	801a      	strh	r2, [r3, #0]
 8001350:	e14d      	b.n	80015ee <HCSR04_TMR_IC_ISR+0x466>
 8001352:	bf00      	nop
 8001354:	08009280 	.word	0x08009280
 8001358:	200001fc 	.word	0x200001fc
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	49ac      	ldr	r1, [pc, #688]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	f040 813e 	bne.w	80015ee <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	49a7      	ldr	r1, [pc, #668]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	3308      	adds	r3, #8
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	49a2      	ldr	r1, [pc, #648]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3308      	adds	r3, #8
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800139e:	489c      	ldr	r0, [pc, #624]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4403      	add	r3, r0
 80013aa:	3308      	adds	r3, #8
 80013ac:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	4998      	ldr	r1, [pc, #608]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	330c      	adds	r3, #12
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	7bfc      	ldrb	r4, [r7, #15]
 80013c2:	4619      	mov	r1, r3
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f003 faef 	bl	80049a8 <HAL_TIM_ReadCapturedValue>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4990      	ldr	r1, [pc, #576]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 80013ce:	4623      	mov	r3, r4
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4423      	add	r3, r4
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	3310      	adds	r3, #16
 80013da:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	498c      	ldr	r1, [pc, #560]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3310      	adds	r3, #16
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	4887      	ldr	r0, [pc, #540]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4403      	add	r3, r0
 80013fc:	3302      	adds	r3, #2
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	461c      	mov	r4, r3
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	4882      	ldr	r0, [pc, #520]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4403      	add	r3, r0
 8001410:	3308      	adds	r3, #8
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	fb03 f304 	mul.w	r3, r3, r4
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	4419      	add	r1, r3
 800141e:	487c      	ldr	r0, [pc, #496]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4403      	add	r3, r0
 800142a:	3310      	adds	r3, #16
 800142c:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	4977      	ldr	r1, [pc, #476]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3310      	adds	r3, #16
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	4873      	ldr	r0, [pc, #460]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4403      	add	r3, r0
 800144e:	330c      	adds	r3, #12
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	1ac9      	subs	r1, r1, r3
 8001456:	486e      	ldr	r0, [pc, #440]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4403      	add	r3, r0
 8001462:	3314      	adds	r3, #20
 8001464:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	4969      	ldr	r1, [pc, #420]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3314      	adds	r3, #20
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f84b 	bl	8000514 <__aeabi_ui2d>
 800147e:	a362      	add	r3, pc, #392	; (adr r3, 8001608 <HCSR04_TMR_IC_ISR+0x480>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f8c0 	bl	8000608 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4614      	mov	r4, r2
 800148e:	461d      	mov	r5, r3
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	4960      	ldr	r1, [pc, #384]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3310      	adds	r3, #16
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f832 	bl	8000514 <__aeabi_ui2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7ff f9d0 	bl	800085c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	7bfc      	ldrb	r4, [r7, #15]
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb97 	bl	8000bf8 <__aeabi_d2f>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4950      	ldr	r1, [pc, #320]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 80014ce:	4623      	mov	r3, r4
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4423      	add	r3, r4
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	3318      	adds	r3, #24
 80014da:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	494c      	ldr	r1, [pc, #304]	; (8001610 <HCSR04_TMR_IC_ISR+0x488>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	4948      	ldr	r1, [pc, #288]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	330c      	adds	r3, #12
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <HCSR04_TMR_IC_ISR+0x38e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020a 	bic.w	r2, r2, #10
 8001512:	621a      	str	r2, [r3, #32]
 8001514:	e02f      	b.n	8001576 <HCSR04_TMR_IC_ISR+0x3ee>
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	493e      	ldr	r1, [pc, #248]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	330c      	adds	r3, #12
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d108      	bne.n	800153e <HCSR04_TMR_IC_ISR+0x3b6>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e01b      	b.n	8001576 <HCSR04_TMR_IC_ISR+0x3ee>
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	4934      	ldr	r1, [pc, #208]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	330c      	adds	r3, #12
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d108      	bne.n	8001566 <HCSR04_TMR_IC_ISR+0x3de>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001562:	6213      	str	r3, [r2, #32]
 8001564:	e007      	b.n	8001576 <HCSR04_TMR_IC_ISR+0x3ee>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	4926      	ldr	r1, [pc, #152]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	330c      	adds	r3, #12
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d106      	bne.n	800159a <HCSR04_TMR_IC_ISR+0x412>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a12      	ldr	r2, [r2, #32]
 8001596:	621a      	str	r2, [r3, #32]
 8001598:	e029      	b.n	80015ee <HCSR04_TMR_IC_ISR+0x466>
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	491d      	ldr	r1, [pc, #116]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	330c      	adds	r3, #12
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d106      	bne.n	80015be <HCSR04_TMR_IC_ISR+0x436>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e017      	b.n	80015ee <HCSR04_TMR_IC_ISR+0x466>
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	4914      	ldr	r1, [pc, #80]	; (8001614 <HCSR04_TMR_IC_ISR+0x48c>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	330c      	adds	r3, #12
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d106      	bne.n	80015e2 <HCSR04_TMR_IC_ISR+0x45a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e005      	b.n	80015ee <HCSR04_TMR_IC_ISR+0x466>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f43f add1 	beq.w	800119e <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	bf00      	nop
 8001608:	b020c49c 	.word	0xb020c49c
 800160c:	3f916872 	.word	0x3f916872
 8001610:	200001fc 	.word	0x200001fc
 8001614:	08009280 	.word	0x08009280

08001618 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	HCSR04_Trigger(au8_HCSR04_Instance);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f813 	bl	8001650 <HCSR04_Trigger>
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <HCSR04_Read+0x34>)
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3318      	adds	r3, #24
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	ee07 3a90 	vmov	s15, r3
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001fc 	.word	0x200001fc

08001650 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	4917      	ldr	r1, [pc, #92]	; (80016bc <HCSR04_Trigger+0x6c>)
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	4913      	ldr	r1, [pc, #76]	; (80016bc <HCSR04_Trigger+0x6c>)
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	4619      	mov	r1, r3
 8001680:	f001 f918 	bl	80028b4 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f7ff fb37 	bl	8000cf8 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	490b      	ldr	r1, [pc, #44]	; (80016bc <HCSR04_Trigger+0x6c>)
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <HCSR04_Trigger+0x6c>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	f001 f900 	bl	80028b4 <HAL_GPIO_WritePin>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	08009280 	.word	0x08009280

080016c0 <HAL_TIM_IC_CaptureCallback>:

TIM_HandleTypeDef htim1;
float Distance = 0.0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    HCSR04_TMR_IC_ISR(htim);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fd5d 	bl	8001188 <HCSR04_TMR_IC_ISR>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
    HCSR04_TMR_OVF_ISR(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fd14 	bl	800110c <HCSR04_TMR_OVF_ISR>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <TurnLeft.9957>:
	TIM3->CR1 |= TIM_CR1_CEN;

	float close_sens = 3;
	float far_sens = 30;

	void TurnLeft(int angle){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	f8c7 c000 	str.w	ip, [r7]
		//625 - 90deg
		int delay = angle * 6.94;
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7fe ff19 	bl	8000534 <__aeabi_i2d>
 8001702:	a31d      	add	r3, pc, #116	; (adr r3, 8001778 <TurnLeft.9957+0x88>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff7e 	bl	8000608 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa28 	bl	8000b68 <__aeabi_d2iz>
 8001718:	4603      	mov	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

		TIM3->CCR3 = 0;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <TurnLeft.9957+0x80>)
 800171e:	2200      	movs	r2, #0
 8001720:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR2 = 630;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <TurnLeft.9957+0x80>)
 8001724:	f240 2276 	movw	r2, #630	; 0x276
 8001728:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(delay);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fe01 	bl	8002334 <HAL_Delay>
		TIM3->CCR2 = 870;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <TurnLeft.9957+0x80>)
 8001734:	f240 3266 	movw	r2, #870	; 0x366
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(delay/12.5);
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7fe fefa 	bl	8000534 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <TurnLeft.9957+0x84>)
 8001746:	f7ff f889 	bl	800085c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa31 	bl	8000bb8 <__aeabi_d2uiz>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fdeb 	bl	8002334 <HAL_Delay>
		TIM3->CCR2 = 0;
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <TurnLeft.9957+0x80>)
 8001760:	2200      	movs	r2, #0
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	f3af 8000 	nop.w
 8001770:	40000400 	.word	0x40000400
 8001774:	40290000 	.word	0x40290000
 8001778:	5c28f5c3 	.word	0x5c28f5c3
 800177c:	401bc28f 	.word	0x401bc28f

08001780 <main>:
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
int main(void)
 8001786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800178c:	f000 fd6c 	bl	8002268 <HAL_Init>
  SystemClock_Config();
 8001790:	f000 fa12 	bl	8001bb8 <SystemClock_Config>
  MX_GPIO_Init();
 8001794:	f000 fafc 	bl	8001d90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001798:	f000 faca 	bl	8001d30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800179c:	f000 fa6e 	bl	8001c7c <MX_TIM1_Init>
  HCSR04_Init(0, &htim1);
 80017a0:	49af      	ldr	r1, [pc, #700]	; (8001a60 <main+0x2e0>)
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fad0 	bl	8000d48 <HCSR04_Init>
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80017a8:	4bae      	ldr	r3, [pc, #696]	; (8001a64 <main+0x2e4>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	4aad      	ldr	r2, [pc, #692]	; (8001a64 <main+0x2e4>)
 80017ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b2:	6153      	str	r3, [r2, #20]
	GPIOC->MODER |= GPIO_MODER_MODER8_1;
 80017b4:	4bac      	ldr	r3, [pc, #688]	; (8001a68 <main+0x2e8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4aab      	ldr	r2, [pc, #684]	; (8001a68 <main+0x2e8>)
 80017ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER8_0;
 80017c0:	4ba9      	ldr	r3, [pc, #676]	; (8001a68 <main+0x2e8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4aa8      	ldr	r2, [pc, #672]	; (8001a68 <main+0x2e8>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_1;
 80017cc:	4ba6      	ldr	r3, [pc, #664]	; (8001a68 <main+0x2e8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4aa5      	ldr	r2, [pc, #660]	; (8001a68 <main+0x2e8>)
 80017d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER7_0;
 80017d8:	4ba3      	ldr	r3, [pc, #652]	; (8001a68 <main+0x2e8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4aa2      	ldr	r2, [pc, #648]	; (8001a68 <main+0x2e8>)
 80017de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e2:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_8;
 80017e4:	4ba0      	ldr	r3, [pc, #640]	; (8001a68 <main+0x2e8>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a9f      	ldr	r2, [pc, #636]	; (8001a68 <main+0x2e8>)
 80017ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ee:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_7;
 80017f0:	4b9d      	ldr	r3, [pc, #628]	; (8001a68 <main+0x2e8>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a9c      	ldr	r2, [pc, #624]	; (8001a68 <main+0x2e8>)
 80017f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017fa:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_0 | GPIO_OSPEEDER_OSPEEDR8_1;
 80017fc:	4b9a      	ldr	r3, [pc, #616]	; (8001a68 <main+0x2e8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a99      	ldr	r2, [pc, #612]	; (8001a68 <main+0x2e8>)
 8001802:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001806:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_0 | GPIO_OSPEEDER_OSPEEDR7_1;
 8001808:	4b97      	ldr	r3, [pc, #604]	; (8001a68 <main+0x2e8>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a96      	ldr	r2, [pc, #600]	; (8001a68 <main+0x2e8>)
 800180e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001812:	6093      	str	r3, [r2, #8]
	GPIOC->AFR[1] &= ~(0b1111);
 8001814:	4b94      	ldr	r3, [pc, #592]	; (8001a68 <main+0x2e8>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	4a93      	ldr	r2, [pc, #588]	; (8001a68 <main+0x2e8>)
 800181a:	f023 030f 	bic.w	r3, r3, #15
 800181e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->AFR[1] |= 0b10;
 8001820:	4b91      	ldr	r3, [pc, #580]	; (8001a68 <main+0x2e8>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	4a90      	ldr	r2, [pc, #576]	; (8001a68 <main+0x2e8>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->AFR[0] &= ~(0b1111 << 30);
 800182c:	4b8e      	ldr	r3, [pc, #568]	; (8001a68 <main+0x2e8>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a8d      	ldr	r2, [pc, #564]	; (8001a68 <main+0x2e8>)
 8001832:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001836:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= 0b10 << 28;
 8001838:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <main+0x2e8>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a8a      	ldr	r2, [pc, #552]	; (8001a68 <main+0x2e8>)
 800183e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001842:	6213      	str	r3, [r2, #32]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001844:	4b87      	ldr	r3, [pc, #540]	; (8001a64 <main+0x2e4>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	4a86      	ldr	r2, [pc, #536]	; (8001a64 <main+0x2e4>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	61d3      	str	r3, [r2, #28]
	TIM3->CCER |= TIM_CCER_CC3E;
 8001850:	4b86      	ldr	r3, [pc, #536]	; (8001a6c <main+0x2ec>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a85      	ldr	r2, [pc, #532]	; (8001a6c <main+0x2ec>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E;
 800185c:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <main+0x2ec>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a82      	ldr	r2, [pc, #520]	; (8001a6c <main+0x2ec>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_ARPE;
 8001868:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <main+0x2ec>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <main+0x2ec>)
 800186e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001872:	6013      	str	r3, [r2, #0]
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8001874:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <main+0x2ec>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4a7c      	ldr	r2, [pc, #496]	; (8001a6c <main+0x2ec>)
 800187a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800187e:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE;
 8001880:	4b7a      	ldr	r3, [pc, #488]	; (8001a6c <main+0x2ec>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <main+0x2ec>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800188c:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <main+0x2ec>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a76      	ldr	r2, [pc, #472]	; (8001a6c <main+0x2ec>)
 8001892:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001896:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 8001898:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <main+0x2ec>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <main+0x2ec>)
 800189e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a2:	6193      	str	r3, [r2, #24]
	TIM3->PSC = 144;
 80018a4:	4b71      	ldr	r3, [pc, #452]	; (8001a6c <main+0x2ec>)
 80018a6:	2290      	movs	r2, #144	; 0x90
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 10000;
 80018aa:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <main+0x2ec>)
 80018ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->EGR |= TIM_EGR_UG;
 80018b2:	4b6e      	ldr	r3, [pc, #440]	; (8001a6c <main+0x2ec>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a6d      	ldr	r2, [pc, #436]	; (8001a6c <main+0x2ec>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;
 80018be:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <main+0x2ec>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6a      	ldr	r2, [pc, #424]	; (8001a6c <main+0x2ec>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6013      	str	r3, [r2, #0]
	float close_sens = 3;
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <main+0x2f0>)
 80018cc:	61fb      	str	r3, [r7, #28]
	float far_sens = 30;
 80018ce:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <main+0x2f4>)
 80018d0:	61bb      	str	r3, [r7, #24]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  Distance = GetDistance();
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	469c      	mov	ip, r3
 80018d6:	f000 f949 	bl	8001b6c <GetDistance.9967>
 80018da:	eef0 7a40 	vmov.f32	s15, s0
 80018de:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <main+0x2f8>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]

      //sprintf(MSG, "%f cm\r\n", Distance);
      //HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);

      //DIstance, mapped between the sens values
      float dist_map = ((Distance)+close_sens)/far_sens;
 80018e4:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <main+0x2f8>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ee:	ee77 6a27 	vadd.f32	s13, s14, s15
 80018f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80018f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fa:	edc7 7a05 	vstr	s15, [r7, #20]

      // Sigmoid function for smooth stop
      float a = 1.0/(1.0+(pow(M_E, ((dist_map*-1)))));
 80018fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001902:	eef1 7a67 	vneg.f32	s15, s15
 8001906:	ee17 3a90 	vmov	r3, s15
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe24 	bl	8000558 <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	ec43 2b11 	vmov	d1, r2, r3
 8001918:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8001a50 <main+0x2d0>
 800191c:	f006 fcec 	bl	80082f8 <pow>
 8001920:	ec51 0b10 	vmov	r0, r1, d0
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <main+0x2fc>)
 800192a:	f7fe fcb7 	bl	800029c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	4951      	ldr	r1, [pc, #324]	; (8001a7c <main+0x2fc>)
 8001938:	f7fe ff90 	bl	800085c <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f958 	bl	8000bf8 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

      // We use only half of the sigmoid curve because we don't use negative values
      a -= 0.5;
 800194c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001950:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001958:	edc7 7a04 	vstr	s15, [r7, #16]
      a *= 2.0;
 800195c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001960:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001964:	edc7 7a04 	vstr	s15, [r7, #16]

      // Format for one decimal place
      a = floorf(a * 10) / 10;
 8001968:	edd7 7a04 	vldr	s15, [r7, #16]
 800196c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f006 fc7c 	bl	8008274 <floorf>
 800197c:	eeb0 7a40 	vmov.f32	s14, s0
 8001980:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001984:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001988:	edc7 7a04 	vstr	s15, [r7, #16]

      //770-870 (LEFT)
      TIM3->CCR3 = (a * (870-770)) + 760;
 800198c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001990:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001a80 <main+0x300>
 8001994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001998:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001a84 <main+0x304>
 800199c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <main+0x2ec>)
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 2a90 	vmov	r2, s15
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c

      //730-630 (RIGHT)
      TIM3->CCR2 = 737 - (a * (737-637));
 80019ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a80 <main+0x300>
 80019b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a88 <main+0x308>
 80019bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <main+0x2ec>)
 80019c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c6:	ee17 2a90 	vmov	r2, s15
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38

      //sprintf(MSG, "A: %f\r\n", a);
      //HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);

      // if we stopped in front of a wall
      if(a < 0.3){
 80019cc:	6938      	ldr	r0, [r7, #16]
 80019ce:	f7fe fdc3 	bl	8000558 <__aeabi_f2d>
 80019d2:	a321      	add	r3, pc, #132	; (adr r3, 8001a58 <main+0x2d8>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7ff f888 	bl	8000aec <__aeabi_dcmplt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d02f      	beq.n	8001a42 <main+0x2c2>
    	  uint32_t seed = HAL_GetTick();
 80019e2:	f000 fc9b 	bl	800231c <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]
    	  int amount = seed % 100;
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <main+0x30c>)
 80019ec:	fba3 1302 	umull	r1, r3, r3, r2
 80019f0:	095b      	lsrs	r3, r3, #5
 80019f2:	2164      	movs	r1, #100	; 0x64
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	60bb      	str	r3, [r7, #8]
    	  if(seed > 90) seed -= 90;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b5a      	cmp	r3, #90	; 0x5a
 8001a00:	d902      	bls.n	8001a08 <main+0x288>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b5a      	subs	r3, #90	; 0x5a
 8001a06:	60fb      	str	r3, [r7, #12]


    	  MoveBack(200);
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	20c8      	movs	r0, #200	; 0xc8
 8001a0e:	f000 f889 	bl	8001b24 <MoveBack.9965>

    	  seed = HAL_GetTick();
 8001a12:	f000 fc83 	bl	800231c <HAL_GetTick>
 8001a16:	60f8      	str	r0, [r7, #12]
    	  if(seed % 2 == 0) TurnRight(amount);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <main+0x2ae>
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	469c      	mov	ip, r3
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f000 f832 	bl	8001a90 <TurnRight.9961>
 8001a2c:	e004      	b.n	8001a38 <main+0x2b8>
    	  else TurnLeft(amount);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	469c      	mov	ip, r3
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f7ff fe5c 	bl	80016f0 <TurnLeft.9957>

    	  TurnRight(20);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	469c      	mov	ip, r3
 8001a3c:	2014      	movs	r0, #20
 8001a3e:	f000 f827 	bl	8001a90 <TurnRight.9961>
      }

	  HAL_Delay(100);
 8001a42:	2064      	movs	r0, #100	; 0x64
 8001a44:	f000 fc76 	bl	8002334 <HAL_Delay>
  {
 8001a48:	e743      	b.n	80018d2 <main+0x152>
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	8b145769 	.word	0x8b145769
 8001a54:	4005bf0a 	.word	0x4005bf0a
 8001a58:	33333333 	.word	0x33333333
 8001a5c:	3fd33333 	.word	0x3fd33333
 8001a60:	20000230 	.word	0x20000230
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40400000 	.word	0x40400000
 8001a74:	41f00000 	.word	0x41f00000
 8001a78:	20000220 	.word	0x20000220
 8001a7c:	3ff00000 	.word	0x3ff00000
 8001a80:	42c80000 	.word	0x42c80000
 8001a84:	443e0000 	.word	0x443e0000
 8001a88:	44384000 	.word	0x44384000
 8001a8c:	51eb851f 	.word	0x51eb851f

08001a90 <TurnRight.9961>:
	void TurnRight(int angle){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	f8c7 c000 	str.w	ip, [r7]
		int delay = angle * 7.85;
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7fe fd49 	bl	8000534 <__aeabi_i2d>
 8001aa2:	a31e      	add	r3, pc, #120	; (adr r3, 8001b1c <TurnRight.9961+0x8c>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fdae 	bl	8000608 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f858 	bl	8000b68 <__aeabi_d2iz>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60fb      	str	r3, [r7, #12]
		TIM3->CCR2 = 0;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <TurnRight.9961+0x88>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 870;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <TurnRight.9961+0x88>)
 8001ac4:	f240 3266 	movw	r2, #870	; 0x366
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(delay);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fc31 	bl	8002334 <HAL_Delay>
		TIM3->CCR3 = 630;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <TurnRight.9961+0x88>)
 8001ad4:	f240 2276 	movw	r2, #630	; 0x276
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(delay/11.9);
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7fe fd2a 	bl	8000534 <__aeabi_i2d>
 8001ae0:	a30b      	add	r3, pc, #44	; (adr r3, 8001b10 <TurnRight.9961+0x80>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	f7fe feb9 	bl	800085c <__aeabi_ddiv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f861 	bl	8000bb8 <__aeabi_d2uiz>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fc1b 	bl	8002334 <HAL_Delay>
		TIM3->CCR3 = 0;
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <TurnRight.9961+0x88>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	f3af 8000 	nop.w
 8001b10:	cccccccd 	.word	0xcccccccd
 8001b14:	4027cccc 	.word	0x4027cccc
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	66666666 	.word	0x66666666
 8001b20:	401f6666 	.word	0x401f6666

08001b24 <MoveBack.9965>:
	void MoveBack(int time){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	f8c7 c000 	str.w	ip, [r7]
		TIM3->CCR2 = 0;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MoveBack.9965+0x44>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MoveBack.9965+0x44>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR2 = 820;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MoveBack.9965+0x44>)
 8001b3e:	f44f 724d 	mov.w	r2, #820	; 0x334
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 630;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MoveBack.9965+0x44>)
 8001b46:	f240 2276 	movw	r2, #630	; 0x276
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(time);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fbf0 	bl	8002334 <HAL_Delay>
		TIM3->CCR2 = 0;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <MoveBack.9965+0x44>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <MoveBack.9965+0x44>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40000400 	.word	0x40000400

08001b6c <GetDistance.9967>:
	float GetDistance(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	f8c7 c004 	str.w	ip, [r7, #4]
		float dist = 0.0;
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
			dist = HCSR04_Read(0);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fd4b 	bl	8001618 <HCSR04_Read>
 8001b82:	ed87 0a03 	vstr	s0, [r7, #12]
			dist -= 1113.5f;
 8001b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001bb4 <GetDistance.9967+0x48>
 8001b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b92:	edc7 7a03 	vstr	s15, [r7, #12]
		} while(dist <= 0.0);
 8001b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d9eb      	bls.n	8001b7c <GetDistance.9967+0x10>
		return dist;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ee07 3a90 	vmov	s15, r3
	}
 8001baa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	448b3000 	.word	0x448b3000

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a6      	sub	sp, #152	; 0x98
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc2:	2228      	movs	r2, #40	; 0x28
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fe7a 	bl	80058c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2258      	movs	r2, #88	; 0x58
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fe6c 	bl	80058c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be8:	2302      	movs	r3, #2
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bec:	2301      	movs	r3, #1
 8001bee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fe64 	bl	80028e4 <HAL_RCC_OscConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c22:	f000 f933 	bl	8001e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c36:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c40:	2102      	movs	r1, #2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fd64 	bl	8003710 <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c4e:	f000 f91d 	bl	8001e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8001c52:	f241 0302 	movw	r3, #4098	; 0x1002
 8001c56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 ff8a 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001c6e:	f000 f90d 	bl	8001e8c <Error_Handler>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3798      	adds	r7, #152	; 0x98
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <MX_TIM1_Init+0xb0>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001ca2:	2247      	movs	r2, #71	; 0x47
 8001ca4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001cae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001cc6:	4818      	ldr	r0, [pc, #96]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001cc8:	f002 fa48 	bl	800415c <HAL_TIM_IC_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001cd2:	f000 f8db 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001cea:	f003 f941 	bl	8004f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001cf4:	f000 f8ca 	bl	8001e8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	; (8001d28 <MX_TIM1_Init+0xac>)
 8001d10:	f002 fce5 	bl	80046de <HAL_TIM_IC_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001d1a:	f000 f8b7 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000230 	.word	0x20000230
 8001d2c:	40012c00 	.word	0x40012c00

08001d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d36:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <MX_USART2_UART_Init+0x5c>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_USART2_UART_Init+0x58>)
 8001d74:	f003 f9a6 	bl	80050c4 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d7e:	f000 f885 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000027c 	.word	0x2000027c
 8001d8c:	40004400 	.word	0x40004400

08001d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dbe:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc8:	6153      	str	r3, [r2, #20]
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	6153      	str	r3, [r2, #20]
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6153      	str	r3, [r2, #20]
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <MX_GPIO_Init+0xf0>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2120      	movs	r1, #32
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f000 fd51 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e18:	481a      	ldr	r0, [pc, #104]	; (8001e84 <MX_GPIO_Init+0xf4>)
 8001e1a:	f000 fd4b 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_GPIO_Init+0xf8>)
 8001e36:	f000 fbb3 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f000 fba4 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4804      	ldr	r0, [pc, #16]	; (8001e84 <MX_GPIO_Init+0xf4>)
 8001e72:	f000 fb95 	bl	80025a0 <HAL_GPIO_Init>

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	48000800 	.word	0x48000800

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <Error_Handler+0x8>
	...

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x44>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x44>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6193      	str	r3, [r2, #24]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x44>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_MspInit+0x44>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x44>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x44>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ece:	2007      	movs	r0, #7
 8001ed0:	f000 fb24 	bl	800251c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_TIM_IC_MspInit+0x8c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12f      	bne.n	8001f62 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_TIM_IC_MspInit+0x90>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_TIM_IC_MspInit+0x90>)
 8001f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f0c:	6193      	str	r3, [r2, #24]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_TIM_IC_MspInit+0x90>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_TIM_IC_MspInit+0x90>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <HAL_TIM_IC_MspInit+0x90>)
 8001f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f24:	6153      	str	r3, [r2, #20]
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_TIM_IC_MspInit+0x90>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f32:	2301      	movs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f42:	2302      	movs	r3, #2
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <HAL_TIM_IC_MspInit+0x94>)
 8001f4e:	f000 fb27 	bl	80025a0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	201b      	movs	r0, #27
 8001f58:	f000 faeb 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f5c:	201b      	movs	r0, #27
 8001f5e:	f000 fb04 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48000800 	.word	0x48000800

08001f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_UART_MspInit+0x7c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d128      	bne.n	8001fec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_UART_MspInit+0x80>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_UART_MspInit+0x80>)
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_UART_MspInit+0x80>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_UART_MspInit+0x80>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_UART_MspInit+0x80>)
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	6153      	str	r3, [r2, #20]
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_UART_MspInit+0x80>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f000 fada 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	40021000 	.word	0x40021000

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <NMI_Handler+0x4>

08002002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <MemManage_Handler+0x4>

0800200e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler+0x4>

0800201a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002048:	f000 f954 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM1_CC_IRQHandler+0x10>)
 8002056:	f002 fa23 	bl	80044a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000230 	.word	0x20000230

08002064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_kill>:

int _kill(int pid, int sig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800207e:	f003 fbf5 	bl	800586c <__errno>
 8002082:	4603      	mov	r3, r0
 8002084:	2216      	movs	r2, #22
 8002086:	601a      	str	r2, [r3, #0]
	return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_exit>:

void _exit (int status)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffe7 	bl	8002074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a6:	e7fe      	b.n	80020a6 <_exit+0x12>

080020a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e00a      	b.n	80020d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ba:	f3af 8000 	nop.w
 80020be:	4601      	mov	r1, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf0      	blt.n	80020ba <_read+0x12>
	}

return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e009      	b.n	8002108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	dbf1      	blt.n	80020f4 <_write+0x12>
	}
	return len;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_close>:

int _close(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	return -1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	605a      	str	r2, [r3, #4]
	return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_isatty>:

int _isatty(int file)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	return 1;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <_sbrk+0x5c>)
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <_sbrk+0x60>)
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <_sbrk+0x64>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <_sbrk+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d207      	bcs.n	80021c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b4:	f003 fb5a 	bl	800586c <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20010000 	.word	0x20010000
 80021e4:	00000400 	.word	0x00000400
 80021e8:	20000224 	.word	0x20000224
 80021ec:	20000318 	.word	0x20000318

080021f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <SystemInit+0x20>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <SystemInit+0x20>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <LoopForever+0x6>)
  ldr r1, =_edata
 800221a:	490e      	ldr	r1, [pc, #56]	; (8002254 <LoopForever+0xa>)
  ldr r2, =_sidata
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <LoopForever+0xe>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002230:	4c0b      	ldr	r4, [pc, #44]	; (8002260 <LoopForever+0x16>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223e:	f7ff ffd7 	bl	80021f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f003 fb19 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002246:	f7ff fa9b 	bl	8001780 <main>

0800224a <LoopForever>:

LoopForever:
    b LoopForever
 800224a:	e7fe      	b.n	800224a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800224c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002258:	080096f8 	.word	0x080096f8
  ldr r2, =_sbss
 800225c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002260:	20000314 	.word	0x20000314

08002264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC1_2_IRQHandler>
	...

08002268 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_Init+0x28>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_Init+0x28>)
 8002272:	f043 0310 	orr.w	r3, r3, #16
 8002276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 f94f 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f808 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002284:	f7ff fe08 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_InitTick+0x54>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x58>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f967 	bl	8002586 <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e00e      	b.n	80022e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d80a      	bhi.n	80022de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c8:	2200      	movs	r2, #0
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f000 f92f 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d4:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_InitTick+0x5c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	20000300 	.word	0x20000300

0800231c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000300 	.word	0x20000300

08002334 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff29 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff3e 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff8e 	bl	8002470 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5d 	bl	800241c <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff31 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ae:	e160      	b.n	8002872 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2101      	movs	r1, #1
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8152 	beq.w	800286c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d005      	beq.n	80025e0 <HAL_GPIO_Init+0x40>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d130      	bne.n	8002642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002616:	2201      	movs	r2, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0201 	and.w	r2, r3, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b03      	cmp	r3, #3
 800264c:	d017      	beq.n	800267e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d123      	bne.n	80026d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	6939      	ldr	r1, [r7, #16]
 80026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0203 	and.w	r2, r3, #3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80ac 	beq.w	800286c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002714:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <HAL_GPIO_Init+0x2f0>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a5d      	ldr	r2, [pc, #372]	; (8002890 <HAL_GPIO_Init+0x2f0>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_GPIO_Init+0x2f0>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800272c:	4a59      	ldr	r2, [pc, #356]	; (8002894 <HAL_GPIO_Init+0x2f4>)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002756:	d025      	beq.n	80027a4 <HAL_GPIO_Init+0x204>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <HAL_GPIO_Init+0x2f8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01f      	beq.n	80027a0 <HAL_GPIO_Init+0x200>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a4e      	ldr	r2, [pc, #312]	; (800289c <HAL_GPIO_Init+0x2fc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d019      	beq.n	800279c <HAL_GPIO_Init+0x1fc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a4d      	ldr	r2, [pc, #308]	; (80028a0 <HAL_GPIO_Init+0x300>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_GPIO_Init+0x1f8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_GPIO_Init+0x304>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1f4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <HAL_GPIO_Init+0x308>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1f0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a4a      	ldr	r2, [pc, #296]	; (80028ac <HAL_GPIO_Init+0x30c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1ec>
 8002788:	2306      	movs	r3, #6
 800278a:	e00c      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 800278c:	2307      	movs	r3, #7
 800278e:	e00a      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 8002790:	2305      	movs	r3, #5
 8002792:	e008      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 8002794:	2304      	movs	r3, #4
 8002796:	e006      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 8002798:	2303      	movs	r3, #3
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 800279c:	2302      	movs	r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x206>
 80027a4:	2300      	movs	r3, #0
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b6:	4937      	ldr	r1, [pc, #220]	; (8002894 <HAL_GPIO_Init+0x2f4>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_GPIO_Init+0x310>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027e8:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <HAL_GPIO_Init+0x310>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_GPIO_Init+0x310>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002812:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <HAL_GPIO_Init+0x310>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_GPIO_Init+0x310>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_GPIO_Init+0x310>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_GPIO_Init+0x310>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_GPIO_Init+0x310>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f ae97 	bne.w	80025b0 <HAL_GPIO_Init+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	40010000 	.word	0x40010000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000800 	.word	0x48000800
 80028a0:	48000c00 	.word	0x48000c00
 80028a4:	48001000 	.word	0x48001000
 80028a8:	48001400 	.word	0x48001400
 80028ac:	48001800 	.word	0x48001800
 80028b0:	40010400 	.word	0x40010400

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f000 bf01 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8160 	beq.w	8002bce <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800290e:	4bae      	ldr	r3, [pc, #696]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d00c      	beq.n	8002934 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800291a:	4bab      	ldr	r3, [pc, #684]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d159      	bne.n	80029da <HAL_RCC_OscConfig+0xf6>
 8002926:	4ba8      	ldr	r3, [pc, #672]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	d152      	bne.n	80029da <HAL_RCC_OscConfig+0xf6>
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002948:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_RCC_OscConfig+0x82>
 8002960:	4b99      	ldr	r3, [pc, #612]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0xae>
 8002966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002982:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800298e:	4b8e      	ldr	r3, [pc, #568]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002996:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800299a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800299e:	fa92 f2a2 	rbit	r2, r2
 80029a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80029a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8102 	beq.w	8002bcc <HAL_RCC_OscConfig+0x2e8>
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 80fc 	bne.w	8002bcc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f000 be93 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCC_OscConfig+0x110>
 80029e6:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a77      	ldr	r2, [pc, #476]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e030      	b.n	8002a56 <HAL_RCC_OscConfig+0x172>
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x134>
 80029fe:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a71      	ldr	r2, [pc, #452]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01e      	b.n	8002a56 <HAL_RCC_OscConfig+0x172>
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x15a>
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a64      	ldr	r2, [pc, #400]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCC_OscConfig+0x172>
 8002a3e:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d059      	beq.n	8002b14 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fc5c 	bl	800231c <HAL_GetTick>
 8002a64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6a:	f7ff fc57 	bl	800231c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d902      	bls.n	8002a80 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f000 be40 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x1ce>
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x1fa>
 8002ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ace:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ae2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002ae6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002af2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f002 021f 	and.w	r2, r2, #31
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ab      	beq.n	8002a6a <HAL_RCC_OscConfig+0x186>
 8002b12:	e05c      	b.n	8002bce <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff fc02 	bl	800231c <HAL_GetTick>
 8002b18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7ff fbfd 	bl	800231c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d902      	bls.n	8002b34 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f000 bde6 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>
 8002b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x282>
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x2ae>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCC_OscConfig+0x2e4>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002ba6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ab      	bne.n	8002b1e <HAL_RCC_OscConfig+0x23a>
 8002bc6:	e002      	b.n	8002bce <HAL_RCC_OscConfig+0x2ea>
 8002bc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8170 	beq.w	8002ebe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bde:	4bd0      	ldr	r3, [pc, #832]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bea:	4bcd      	ldr	r3, [pc, #820]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d16d      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3ee>
 8002bf6:	4bca      	ldr	r3, [pc, #808]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c02:	d166      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3ee>
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002c16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0x350>
 8002c2e:	4bbc      	ldr	r3, [pc, #752]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	e013      	b.n	8002c5c <HAL_RCC_OscConfig+0x378>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c46:	2302      	movs	r3, #2
 8002c48:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c58:	4bb1      	ldr	r3, [pc, #708]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c62:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c66:	fa92 f2a2 	rbit	r2, r2
 8002c6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3ba>
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d002      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f000 bd31 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4ba0      	ldr	r3, [pc, #640]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	21f8      	movs	r1, #248	; 0xf8
 8002cae:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002cb6:	fa91 f1a1 	rbit	r1, r1
 8002cba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002cbe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cc2:	fab1 f181 	clz	r1, r1
 8002cc6:	b2c9      	uxtb	r1, r1
 8002cc8:	408b      	lsls	r3, r1
 8002cca:	4995      	ldr	r1, [pc, #596]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd0:	e0f5      	b.n	8002ebe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8085 	beq.w	8002de8 <HAL_RCC_OscConfig+0x504>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002cf0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	461a      	mov	r2, r3
 8002d06:	2301      	movs	r3, #1
 8002d08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7ff fb07 	bl	800231c <HAL_GetTick>
 8002d0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d14:	f7ff fb02 	bl	800231c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d902      	bls.n	8002d2a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	f000 bceb 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002d3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d102      	bne.n	8002d5a <HAL_RCC_OscConfig+0x476>
 8002d54:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	e013      	b.n	8002d82 <HAL_RCC_OscConfig+0x49e>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d72:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2202      	movs	r2, #2
 8002d84:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002d94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d98:	fab2 f282 	clz	r2, r2
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f042 0220 	orr.w	r2, r2, #32
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f002 021f 	and.w	r2, r2, #31
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0af      	beq.n	8002d14 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	21f8      	movs	r1, #248	; 0xf8
 8002dc4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002dcc:	fa91 f1a1 	rbit	r1, r1
 8002dd0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002dd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dd8:	fab1 f181 	clz	r1, r1
 8002ddc:	b2c9      	uxtb	r1, r1
 8002dde:	408b      	lsls	r3, r1
 8002de0:	494f      	ldr	r1, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
 8002de6:	e06a      	b.n	8002ebe <HAL_RCC_OscConfig+0x5da>
 8002de8:	2301      	movs	r3, #1
 8002dea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002dfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7ff fa82 	bl	800231c <HAL_GetTick>
 8002e18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7ff fa7d 	bl	800231c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	f000 bc66 	b.w	8003700 <HAL_RCC_OscConfig+0xe1c>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002e46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_RCC_OscConfig+0x580>
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	e013      	b.n	8002e8c <HAL_RCC_OscConfig+0x5a8>
 8002e64:	2302      	movs	r3, #2
 8002e66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x63c>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e92:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002e96:	fa92 f2a2 	rbit	r2, r2
 8002e9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002e9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ea2:	fab2 f282 	clz	r2, r2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f042 0220 	orr.w	r2, r2, #32
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f002 021f 	and.w	r2, r2, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1af      	bne.n	8002e1e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80da 	beq.w	8003082 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d069      	beq.n	8002fac <HAL_RCC_OscConfig+0x6c8>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x640>)
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	461a      	mov	r2, r3
 8002efe:	2301      	movs	r3, #1
 8002f00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7ff fa0b 	bl	800231c <HAL_GetTick>
 8002f06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	e00d      	b.n	8002f28 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0c:	f7ff fa06 	bl	800231c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d905      	bls.n	8002f28 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e3ef      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	10908120 	.word	0x10908120
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f32:	fa93 f2a3 	rbit	r2, r3
 8002f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002f40:	2202      	movs	r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f58:	2202      	movs	r2, #2
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f6a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6c:	4ba4      	ldr	r3, [pc, #656]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8002f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f70:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f74:	2102      	movs	r1, #2
 8002f76:	6019      	str	r1, [r3, #0]
 8002f78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f1a3 	rbit	r1, r3
 8002f82:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f86:	6019      	str	r1, [r3, #0]
  return result;
 8002f88:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0b0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x628>
 8002faa:	e06a      	b.n	8003082 <HAL_RCC_OscConfig+0x79e>
 8002fac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fc2:	601a      	str	r2, [r3, #0]
  return result;
 8002fc4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fc8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_OscConfig+0x920>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7ff f99d 	bl	800231c <HAL_GetTick>
 8002fe2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe6:	e009      	b.n	8002ffc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7ff f998 	bl	800231c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e381      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 8002ffc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003000:	2202      	movs	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003030:	2202      	movs	r2, #2
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003042:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b6e      	ldr	r3, [pc, #440]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003048:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800304c:	2102      	movs	r1, #2
 800304e:	6019      	str	r1, [r3, #0]
 8003050:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f1a3 	rbit	r1, r3
 800305a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800305e:	6019      	str	r1, [r3, #0]
  return result;
 8003060:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1b2      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8157 	beq.w	8003340 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d112      	bne.n	80030ca <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b56      	ldr	r3, [pc, #344]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4a55      	ldr	r2, [pc, #340]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ae:	61d3      	str	r3, [r2, #28]
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x924>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11a      	bne.n	800310c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_OscConfig+0x924>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <HAL_RCC_OscConfig+0x924>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7ff f91b 	bl	800231c <HAL_GetTick>
 80030e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	e009      	b.n	8003100 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ec:	f7ff f916 	bl	800231c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e2ff      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x924>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x840>
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a39      	ldr	r2, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	e02f      	b.n	8003184 <HAL_RCC_OscConfig+0x8a0>
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x864>
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a33      	ldr	r2, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6213      	str	r3, [r2, #32]
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a30      	ldr	r2, [pc, #192]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	e01d      	b.n	8003184 <HAL_RCC_OscConfig+0x8a0>
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x888>
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6213      	str	r3, [r2, #32]
 800315e:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a27      	ldr	r2, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0x8a0>
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4a23      	ldr	r2, [pc, #140]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d06a      	beq.n	8003264 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7ff f8c5 	bl	800231c <HAL_GetTick>
 8003192:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7ff f8c0 	bl	800231c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e2a7      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 80031b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031b4:	2202      	movs	r2, #2
 80031b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031de:	601a      	str	r2, [r3, #0]
  return result;
 80031e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d108      	bne.n	800320c <HAL_RCC_OscConfig+0x928>
 80031fa:	4b01      	ldr	r3, [pc, #4]	; (8003200 <HAL_RCC_OscConfig+0x91c>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	e013      	b.n	8003228 <HAL_RCC_OscConfig+0x944>
 8003200:	40021000 	.word	0x40021000
 8003204:	10908120 	.word	0x10908120
 8003208:	40007000 	.word	0x40007000
 800320c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003210:	2202      	movs	r2, #2
 8003212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	fa93 f2a3 	rbit	r2, r3
 800321e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4bc0      	ldr	r3, [pc, #768]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800322c:	2102      	movs	r1, #2
 800322e:	6011      	str	r1, [r2, #0]
 8003230:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	fa92 f1a2 	rbit	r1, r2
 800323a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800323e:	6011      	str	r1, [r2, #0]
  return result;
 8003240:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d09a      	beq.n	8003198 <HAL_RCC_OscConfig+0x8b4>
 8003262:	e063      	b.n	800332c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7ff f85a 	bl	800231c <HAL_GetTick>
 8003268:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	e00b      	b.n	8003286 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7ff f855 	bl	800231c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e23c      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 8003286:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800328a:	2202      	movs	r2, #2
 800328c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032a2:	2202      	movs	r2, #2
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032b4:	601a      	str	r2, [r3, #0]
  return result;
 80032b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_OscConfig+0x9f2>
 80032d0:	4b95      	ldr	r3, [pc, #596]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	e00d      	b.n	80032f2 <HAL_RCC_OscConfig+0xa0e>
 80032d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032da:	2202      	movs	r2, #2
 80032dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	4b8e      	ldr	r3, [pc, #568]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80032f6:	2102      	movs	r1, #2
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fa92 f1a2 	rbit	r1, r2
 8003304:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003308:	6011      	str	r1, [r2, #0]
  return result;
 800330a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1a0      	bne.n	800326e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800332c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b7c      	ldr	r3, [pc, #496]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a7b      	ldr	r2, [pc, #492]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 81d9 	beq.w	80036fe <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334c:	4b76      	ldr	r3, [pc, #472]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	f000 81a6 	beq.w	80036a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b02      	cmp	r3, #2
 8003362:	f040 811e 	bne.w	80035a2 <HAL_RCC_OscConfig+0xcbe>
 8003366:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800336a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800337e:	601a      	str	r2, [r3, #0]
  return result;
 8003380:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003384:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003390:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe ffbe 	bl	800231c <HAL_GetTick>
 80033a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	e009      	b.n	80033ba <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe ffb9 	bl	800231c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1a2      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 80033ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	fa93 f2a3 	rbit	r2, r3
 80033ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033d2:	601a      	str	r2, [r3, #0]
  return result;
 80033d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d102      	bne.n	80033f4 <HAL_RCC_OscConfig+0xb10>
 80033ee:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	e01b      	b.n	800342c <HAL_RCC_OscConfig+0xb48>
 80033f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003430:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003434:	6011      	str	r1, [r2, #0]
 8003436:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	fa92 f1a2 	rbit	r1, r2
 8003440:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003444:	6011      	str	r1, [r2, #0]
  return result;
 8003446:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	fab2 f282 	clz	r2, r2
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	f002 021f 	and.w	r2, r2, #31
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f202 	lsl.w	r2, r1, r2
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d19e      	bne.n	80033a6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f023 020f 	bic.w	r2, r3, #15
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	492c      	ldr	r1, [pc, #176]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a19      	ldr	r1, [r3, #32]
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	430b      	orrs	r3, r1
 8003492:	4925      	ldr	r1, [pc, #148]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800349c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	fa93 f2a3 	rbit	r2, r3
 80034ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034b0:	601a      	str	r2, [r3, #0]
  return result;
 80034b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	461a      	mov	r2, r3
 80034ca:	2301      	movs	r3, #1
 80034cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe ff25 	bl	800231c <HAL_GetTick>
 80034d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d6:	e009      	b.n	80034ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe ff20 	bl	800231c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e109      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 80034ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	fa93 f2a3 	rbit	r2, r3
 8003500:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003504:	601a      	str	r2, [r3, #0]
  return result;
 8003506:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800350a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0xc48>
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <HAL_RCC_OscConfig+0xc44>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e01e      	b.n	8003564 <HAL_RCC_OscConfig+0xc80>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	fa93 f2a3 	rbit	r2, r3
 8003540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800354a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	fa93 f2a3 	rbit	r2, r3
 800355a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0xe28>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003568:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	fa92 f1a2 	rbit	r1, r2
 8003578:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800357c:	6011      	str	r1, [r2, #0]
  return result;
 800357e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	fab2 f282 	clz	r2, r2
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	f042 0220 	orr.w	r2, r2, #32
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	f002 021f 	and.w	r2, r2, #31
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f202 	lsl.w	r2, r1, r2
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d09b      	beq.n	80034d8 <HAL_RCC_OscConfig+0xbf4>
 80035a0:	e0ad      	b.n	80036fe <HAL_RCC_OscConfig+0xe1a>
 80035a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	fa93 f2a3 	rbit	r2, r3
 80035b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035ba:	601a      	str	r2, [r3, #0]
  return result;
 80035bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	461a      	mov	r2, r3
 80035d4:	2300      	movs	r3, #0
 80035d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fea0 	bl	800231c <HAL_GetTick>
 80035dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e0:	e009      	b.n	80035f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fe9b 	bl	800231c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e084      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
 80035f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800360e:	601a      	str	r2, [r3, #0]
  return result;
 8003610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003614:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d102      	bne.n	8003630 <HAL_RCC_OscConfig+0xd4c>
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0xe28>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	e01b      	b.n	8003668 <HAL_RCC_OscConfig+0xd84>
 8003630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f107 0320 	add.w	r3, r7, #32
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f107 031c 	add.w	r3, r7, #28
 800364e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f107 031c 	add.w	r3, r7, #28
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f107 0318 	add.w	r3, r7, #24
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCC_OscConfig+0xe28>)
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f107 0214 	add.w	r2, r7, #20
 800366c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	f107 0214 	add.w	r2, r7, #20
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	fa92 f1a2 	rbit	r1, r2
 800367c:	f107 0210 	add.w	r2, r7, #16
 8003680:	6011      	str	r1, [r2, #0]
  return result;
 8003682:	f107 0210 	add.w	r2, r7, #16
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f042 0220 	orr.w	r2, r2, #32
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f002 021f 	and.w	r2, r2, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d19e      	bne.n	80035e2 <HAL_RCC_OscConfig+0xcfe>
 80036a4:	e02b      	b.n	80036fe <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e025      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b4:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_RCC_OscConfig+0xe28>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCC_OscConfig+0xe28>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d111      	bne.n	80036fa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80036d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d108      	bne.n	80036fa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80036e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000

08003710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b09e      	sub	sp, #120	; 0x78
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e162      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b90      	ldr	r3, [pc, #576]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b8d      	ldr	r3, [pc, #564]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	498b      	ldr	r1, [pc, #556]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e14a      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b82      	ldr	r3, [pc, #520]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	497f      	ldr	r1, [pc, #508]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80dc 	beq.w	800393c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d13c      	bne.n	8003806 <HAL_RCC_ClockConfig+0xf6>
 800378c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800379a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xa6>
 80037b0:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e00f      	b.n	80037d6 <HAL_RCC_ClockConfig+0xc6>
 80037b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	667b      	str	r3, [r7, #100]	; 0x64
 80037c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037da:	65ba      	str	r2, [r7, #88]	; 0x58
 80037dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037de:	fa92 f2a2 	rbit	r2, r2
 80037e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037e6:	fab2 f282 	clz	r2, r2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f042 0220 	orr.w	r2, r2, #32
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f002 021f 	and.w	r2, r2, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d17b      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0f3      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d13c      	bne.n	8003888 <HAL_RCC_ClockConfig+0x178>
 800380e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003812:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800381c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_ClockConfig+0x128>
 8003832:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e00f      	b.n	8003858 <HAL_RCC_ClockConfig+0x148>
 8003838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
 8003846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
 800384c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385c:	63ba      	str	r2, [r7, #56]	; 0x38
 800385e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003860:	fa92 f2a2 	rbit	r2, r2
 8003864:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003868:	fab2 f282 	clz	r2, r2
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f042 0220 	orr.w	r2, r2, #32
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f002 021f 	and.w	r2, r2, #31
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d13a      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b2      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
 8003888:	2302      	movs	r3, #2
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x1a0>
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e00d      	b.n	80038cc <HAL_RCC_ClockConfig+0x1bc>
 80038b0:	2302      	movs	r3, #2
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	2302      	movs	r3, #2
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2202      	movs	r2, #2
 80038ce:	61ba      	str	r2, [r7, #24]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	fa92 f2a2 	rbit	r2, r2
 80038d6:	617a      	str	r2, [r7, #20]
  return result;
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	fab2 f282 	clz	r2, r2
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f042 0220 	orr.w	r2, r2, #32
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	f002 021f 	and.w	r2, r2, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e079      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	491a      	ldr	r1, [pc, #104]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fe fd06 	bl	800231c <HAL_GetTick>
 8003910:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe fd02 	bl	800231c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e061      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_ClockConfig+0x260>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d214      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4906      	ldr	r1, [pc, #24]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_RCC_ClockConfig+0x25c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e040      	b.n	80039ee <HAL_RCC_ClockConfig+0x2de>
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	491a      	ldr	r1, [pc, #104]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800399e:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4912      	ldr	r1, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039b2:	f000 f829 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039b6:	4601      	mov	r1, r0
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_ClockConfig+0x2e8>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c0:	22f0      	movs	r2, #240	; 0xf0
 80039c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	fa92 f2a2 	rbit	r2, r2
 80039ca:	60fa      	str	r2, [r7, #12]
  return result;
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	fab2 f282 	clz	r2, r2
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	40d3      	lsrs	r3, r2
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x2ec>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <HAL_RCC_ClockConfig+0x2f0>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_ClockConfig+0x2f4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fc54 	bl	8002294 <HAL_InitTick>
  
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3778      	adds	r7, #120	; 0x78
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08009294 	.word	0x08009294
 8003a00:	20000000 	.word	0x20000000
 8003a04:	20000004 	.word	0x20000004

08003a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b08b      	sub	sp, #44	; 0x2c
 8003a0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a22:	4b2a      	ldr	r3, [pc, #168]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x30>
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x36>
 8003a36:	e03f      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a3a:	623b      	str	r3, [r7, #32]
      break;
 8003a3c:	e03f      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	fa92 f2a2 	rbit	r2, r2
 8003a50:	607a      	str	r2, [r7, #4]
  return result;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	fab2 f282 	clz	r2, r2
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	40d3      	lsrs	r3, r2
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	fa92 f2a2 	rbit	r2, r2
 8003a74:	60fa      	str	r2, [r7, #12]
  return result;
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	fab2 f282 	clz	r2, r2
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	40d3      	lsrs	r3, r2
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa0:	e007      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aba:	623b      	str	r3, [r7, #32]
      break;
 8003abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	372c      	adds	r7, #44	; 0x2c
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	007a1200 	.word	0x007a1200
 8003ad4:	080092ac 	.word	0x080092ac
 8003ad8:	080092bc 	.word	0x080092bc

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000000 	.word	0x20000000

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003afa:	f7ff ffef 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afe:	4601      	mov	r1, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	fa92 f2a2 	rbit	r2, r2
 8003b14:	603a      	str	r2, [r7, #0]
  return result;
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	40d3      	lsrs	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	080092a4 	.word	0x080092a4

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b3e:	f7ff ffcd 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	603a      	str	r2, [r7, #0]
  return result;
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	40d3      	lsrs	r3, r2
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	080092a4 	.word	0x080092a4

08003b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b092      	sub	sp, #72	; 0x48
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80d4 	beq.w	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba0:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10e      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	61d3      	str	r3, [r2, #28]
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d118      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fb9b 	bl	800231c <HAL_GetTick>
 8003be6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	e008      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fe fb97 	bl	800231c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b64      	cmp	r3, #100	; 0x64
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1d6      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8084 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d07c      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	2301      	movs	r3, #1
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	461a      	mov	r2, r3
 8003c76:	2300      	movs	r3, #0
 8003c78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04b      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fb47 	bl	800231c <HAL_GetTick>
 8003c8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe fb43 	bl	800231c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e180      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	61fb      	str	r3, [r7, #28]
  return result;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d108      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cd6:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	e00d      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	10908100 	.word	0x10908100
 8003ce8:	2302      	movs	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	4ba0      	ldr	r3, [pc, #640]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	613a      	str	r2, [r7, #16]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	fa92 f2a2 	rbit	r2, r2
 8003d02:	60fa      	str	r2, [r7, #12]
  return result;
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	fab2 f282 	clz	r2, r2
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f002 021f 	and.w	r2, r2, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0b7      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d22:	4b95      	ldr	r3, [pc, #596]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4992      	ldr	r1, [pc, #584]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b8e      	ldr	r3, [pc, #568]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4a8d      	ldr	r2, [pc, #564]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d54:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f023 0203 	bic.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4985      	ldr	r1, [pc, #532]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d72:	4b81      	ldr	r3, [pc, #516]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	497e      	ldr	r1, [pc, #504]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d90:	4b79      	ldr	r3, [pc, #484]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4976      	ldr	r1, [pc, #472]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dae:	4b72      	ldr	r3, [pc, #456]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	496f      	ldr	r1, [pc, #444]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	4967      	ldr	r1, [pc, #412]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f023 0220 	bic.w	r2, r3, #32
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4960      	ldr	r1, [pc, #384]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e08:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	4958      	ldr	r1, [pc, #352]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e26:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	4951      	ldr	r1, [pc, #324]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e44:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4949      	ldr	r1, [pc, #292]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e62:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4942      	ldr	r1, [pc, #264]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e80:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	493a      	ldr	r1, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e9e:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4933      	ldr	r1, [pc, #204]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	492b      	ldr	r1, [pc, #172]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003eda:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4924      	ldr	r1, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	491c      	ldr	r1, [pc, #112]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	4915      	ldr	r1, [pc, #84]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	490d      	ldr	r1, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	4906      	ldr	r1, [pc, #24]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f70:	4b01      	ldr	r3, [pc, #4]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3748      	adds	r7, #72	; 0x48
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e049      	b.n	800405e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f841 	bl	8004066 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 fd38 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d001      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e04f      	b.n	8004134 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a23      	ldr	r2, [pc, #140]	; (8004140 <HAL_TIM_Base_Start_IT+0xc4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d018      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_TIM_Base_Start_IT+0xc8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_TIM_Base_Start_IT+0xcc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_TIM_Base_Start_IT+0xd0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_TIM_Base_Start_IT+0xd4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x76>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d115      	bne.n	800411e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_TIM_Base_Start_IT+0xdc>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d015      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0xb4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d011      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411c:	e008      	b.n	8004130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e000      	b.n	8004132 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40013400 	.word	0x40013400
 8004150:	40014000 	.word	0x40014000
 8004154:	40015000 	.word	0x40015000
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e049      	b.n	8004202 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd feac 	bl	8001ee0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 fc66 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0x1e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e023      	b.n	8004272 <HAL_TIM_IC_Start_IT+0x66>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0x2e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e01b      	b.n	8004272 <HAL_TIM_IC_Start_IT+0x66>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0x3e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004246:	b2db      	uxtb	r3, r3
 8004248:	e013      	b.n	8004272 <HAL_TIM_IC_Start_IT+0x66>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d104      	bne.n	800425a <HAL_TIM_IC_Start_IT+0x4e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e00b      	b.n	8004272 <HAL_TIM_IC_Start_IT+0x66>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b10      	cmp	r3, #16
 800425e:	d104      	bne.n	800426a <HAL_TIM_IC_Start_IT+0x5e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e003      	b.n	8004272 <HAL_TIM_IC_Start_IT+0x66>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004270:	b2db      	uxtb	r3, r3
 8004272:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_TIM_IC_Start_IT+0x78>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e013      	b.n	80042ac <HAL_TIM_IC_Start_IT+0xa0>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b04      	cmp	r3, #4
 8004288:	d104      	bne.n	8004294 <HAL_TIM_IC_Start_IT+0x88>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e00b      	b.n	80042ac <HAL_TIM_IC_Start_IT+0xa0>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b08      	cmp	r3, #8
 8004298:	d104      	bne.n	80042a4 <HAL_TIM_IC_Start_IT+0x98>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e003      	b.n	80042ac <HAL_TIM_IC_Start_IT+0xa0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ae:	7bbb      	ldrb	r3, [r7, #14]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80042b4:	7b7b      	ldrb	r3, [r7, #13]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0dd      	b.n	800447a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_IC_Start_IT+0xc2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042cc:	e023      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x10a>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d104      	bne.n	80042de <HAL_TIM_IC_Start_IT+0xd2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	e01b      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x10a>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_IC_Start_IT+0xe2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ec:	e013      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x10a>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_IC_Start_IT+0xf2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042fc:	e00b      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x10a>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b10      	cmp	r3, #16
 8004302:	d104      	bne.n	800430e <HAL_TIM_IC_Start_IT+0x102>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800430c:	e003      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x10a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <HAL_TIM_IC_Start_IT+0x11a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004324:	e013      	b.n	800434e <HAL_TIM_IC_Start_IT+0x142>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d104      	bne.n	8004336 <HAL_TIM_IC_Start_IT+0x12a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004334:	e00b      	b.n	800434e <HAL_TIM_IC_Start_IT+0x142>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d104      	bne.n	8004346 <HAL_TIM_IC_Start_IT+0x13a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004344:	e003      	b.n	800434e <HAL_TIM_IC_Start_IT+0x142>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d841      	bhi.n	80043d8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_TIM_IC_Start_IT+0x150>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004391 	.word	0x08004391
 8004360:	080043d9 	.word	0x080043d9
 8004364:	080043d9 	.word	0x080043d9
 8004368:	080043d9 	.word	0x080043d9
 800436c:	080043a3 	.word	0x080043a3
 8004370:	080043d9 	.word	0x080043d9
 8004374:	080043d9 	.word	0x080043d9
 8004378:	080043d9 	.word	0x080043d9
 800437c:	080043b5 	.word	0x080043b5
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043d9 	.word	0x080043d9
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043c7 	.word	0x080043c7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0202 	orr.w	r2, r2, #2
 800439e:	60da      	str	r2, [r3, #12]
      break;
 80043a0:	e01d      	b.n	80043de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0204 	orr.w	r2, r2, #4
 80043b0:	60da      	str	r2, [r3, #12]
      break;
 80043b2:	e014      	b.n	80043de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	60da      	str	r2, [r3, #12]
      break;
 80043c4:	e00b      	b.n	80043de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0210 	orr.w	r2, r2, #16
 80043d4:	60da      	str	r2, [r3, #12]
      break;
 80043d6:	e002      	b.n	80043de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      break;
 80043dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d149      	bne.n	8004478 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	6839      	ldr	r1, [r7, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fd99 	bl	8004f24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a23      	ldr	r2, [pc, #140]	; (8004484 <HAL_TIM_IC_Start_IT+0x278>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d01d      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x22c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004404:	d018      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x22c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_TIM_IC_Start_IT+0x27c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x22c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <HAL_TIM_IC_Start_IT+0x280>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00e      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x22c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_TIM_IC_Start_IT+0x284>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d009      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x22c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_TIM_IC_Start_IT+0x288>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x22c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a19      	ldr	r2, [pc, #100]	; (8004498 <HAL_TIM_IC_Start_IT+0x28c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d115      	bne.n	8004464 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	4b17      	ldr	r3, [pc, #92]	; (800449c <HAL_TIM_IC_Start_IT+0x290>)
 8004440:	4013      	ands	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b06      	cmp	r3, #6
 8004448:	d015      	beq.n	8004476 <HAL_TIM_IC_Start_IT+0x26a>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d011      	beq.n	8004476 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004462:	e008      	b.n	8004476 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e000      	b.n	8004478 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40013400 	.word	0x40013400
 8004494:	40014000 	.word	0x40014000
 8004498:	40015000 	.word	0x40015000
 800449c:	00010007 	.word	0x00010007

080044a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0202 	mvn.w	r2, #2
 80044cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd f8ec 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 faa0 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 faa7 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b04      	cmp	r3, #4
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b04      	cmp	r3, #4
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0204 	mvn.w	r2, #4
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd f8c2 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa76 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fa7d 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b08      	cmp	r3, #8
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0208 	mvn.w	r2, #8
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd f898 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fa4c 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fa53 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d122      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d11b      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0210 	mvn.w	r2, #16
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2208      	movs	r2, #8
 80045ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd f86e 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa22 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa29 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0201 	mvn.w	r2, #1
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd f859 	bl	80016d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fd26 	bl	800509c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465e:	d10e      	bne.n	800467e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d107      	bne.n	800467e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fd19 	bl	80050b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d10e      	bne.n	80046aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d107      	bne.n	80046aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f9d7 	bl	8004a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d10e      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d107      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0220 	mvn.w	r2, #32
 80046ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fcd9 	bl	8005088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e088      	b.n	800480e <HAL_TIM_IC_ConfigChannel+0x130>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11b      	bne.n	8004742 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 fa45 	bl	8004ba8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 020c 	bic.w	r2, r2, #12
 800472c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6999      	ldr	r1, [r3, #24]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	619a      	str	r2, [r3, #24]
 8004740:	e060      	b.n	8004804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d11c      	bne.n	8004782 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f000 fac3 	bl	8004ce2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800476a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	619a      	str	r2, [r3, #24]
 8004780:	e040      	b.n	8004804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d11b      	bne.n	80047c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f000 fb10 	bl	8004dbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 020c 	bic.w	r2, r2, #12
 80047aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69d9      	ldr	r1, [r3, #28]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
 80047be:	e021      	b.n	8004804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d11c      	bne.n	8004800 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f000 fb2d 	bl	8004e34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69d9      	ldr	r1, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	021a      	lsls	r2, r3, #8
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
 80047fe:	e001      	b.n	8004804 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480c:	7dfb      	ldrb	r3, [r7, #23]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_TIM_ConfigClockSource+0x1c>
 800482e:	2302      	movs	r3, #2
 8004830:	e0b6      	b.n	80049a0 <HAL_TIM_ConfigClockSource+0x18a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004854:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486e:	d03e      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0xd8>
 8004870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004874:	f200 8087 	bhi.w	8004986 <HAL_TIM_ConfigClockSource+0x170>
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	f000 8086 	beq.w	800498c <HAL_TIM_ConfigClockSource+0x176>
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d87f      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 8004886:	2b70      	cmp	r3, #112	; 0x70
 8004888:	d01a      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0xaa>
 800488a:	2b70      	cmp	r3, #112	; 0x70
 800488c:	d87b      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 800488e:	2b60      	cmp	r3, #96	; 0x60
 8004890:	d050      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0x11e>
 8004892:	2b60      	cmp	r3, #96	; 0x60
 8004894:	d877      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 8004896:	2b50      	cmp	r3, #80	; 0x50
 8004898:	d03c      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xfe>
 800489a:	2b50      	cmp	r3, #80	; 0x50
 800489c:	d873      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d058      	beq.n	8004954 <HAL_TIM_ConfigClockSource+0x13e>
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d86f      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 80048a6:	2b30      	cmp	r3, #48	; 0x30
 80048a8:	d064      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x15e>
 80048aa:	2b30      	cmp	r3, #48	; 0x30
 80048ac:	d86b      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d060      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x15e>
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d867      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d05c      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x15e>
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d05a      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x15e>
 80048be:	e062      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6899      	ldr	r1, [r3, #8]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f000 fb08 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]
      break;
 80048ec:	e04f      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6899      	ldr	r1, [r3, #8]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f000 faf1 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004910:	609a      	str	r2, [r3, #8]
      break;
 8004912:	e03c      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	461a      	mov	r2, r3
 8004922:	f000 f9af 	bl	8004c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2150      	movs	r1, #80	; 0x50
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fabe 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004932:	e02c      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	461a      	mov	r2, r3
 8004942:	f000 fa0b 	bl	8004d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2160      	movs	r1, #96	; 0x60
 800494c:	4618      	mov	r0, r3
 800494e:	f000 faae 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004952:	e01c      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	461a      	mov	r2, r3
 8004962:	f000 f98f 	bl	8004c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fa9e 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004972:	e00c      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fa95 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004984:	e003      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      break;
 800498a:	e000      	b.n	800498e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800498c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d831      	bhi.n	8004a20 <HAL_TIM_ReadCapturedValue+0x78>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a21 	.word	0x08004a21
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a17 	.word	0x08004a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	60fb      	str	r3, [r7, #12]

      break;
 8004a00:	e00f      	b.n	8004a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	60fb      	str	r3, [r7, #12]

      break;
 8004a0a:	e00a      	b.n	8004a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	60fb      	str	r3, [r7, #12]

      break;
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	60fb      	str	r3, [r7, #12]

      break;
 8004a1e:	e000      	b.n	8004a22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a20:	bf00      	nop
  }

  return tmpreg;
 8004a22:	68fb      	ldr	r3, [r7, #12]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a42      	ldr	r2, [pc, #264]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00f      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3f      	ldr	r2, [pc, #252]	; (8004b8c <TIM_Base_SetConfig+0x120>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3e      	ldr	r2, [pc, #248]	; (8004b90 <TIM_Base_SetConfig+0x124>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3d      	ldr	r2, [pc, #244]	; (8004b94 <TIM_Base_SetConfig+0x128>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3c      	ldr	r2, [pc, #240]	; (8004b98 <TIM_Base_SetConfig+0x12c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a31      	ldr	r2, [pc, #196]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01f      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d01b      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2e      	ldr	r2, [pc, #184]	; (8004b8c <TIM_Base_SetConfig+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d017      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2d      	ldr	r2, [pc, #180]	; (8004b90 <TIM_Base_SetConfig+0x124>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <TIM_Base_SetConfig+0x128>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00f      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <TIM_Base_SetConfig+0x130>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <TIM_Base_SetConfig+0x134>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <TIM_Base_SetConfig+0x138>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a25      	ldr	r2, [pc, #148]	; (8004b98 <TIM_Base_SetConfig+0x12c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d108      	bne.n	8004b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <TIM_Base_SetConfig+0x100>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <TIM_Base_SetConfig+0x128>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00f      	beq.n	8004b6c <TIM_Base_SetConfig+0x100>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <TIM_Base_SetConfig+0x130>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_Base_SetConfig+0x100>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <TIM_Base_SetConfig+0x134>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x100>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <TIM_Base_SetConfig+0x138>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x100>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <TIM_Base_SetConfig+0x12c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40013400 	.word	0x40013400
 8004b98:	40015000 	.word	0x40015000
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800

08004ba8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <TIM_TI1_SetConfig+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <TIM_TI1_SetConfig+0x5e>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d013      	beq.n	8004c06 <TIM_TI1_SetConfig+0x5e>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <TIM_TI1_SetConfig+0xc8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_TI1_SetConfig+0x5e>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <TIM_TI1_SetConfig+0xcc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_TI1_SetConfig+0x5e>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <TIM_TI1_SetConfig+0xd0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_TI1_SetConfig+0x5e>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <TIM_TI1_SetConfig+0xd4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_TI1_SetConfig+0x5e>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <TIM_TI1_SetConfig+0xd8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <TIM_TI1_SetConfig+0x62>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <TIM_TI1_SetConfig+0x64>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e003      	b.n	8004c2a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f023 030a 	bic.w	r3, r3, #10
 8004c44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 030a 	and.w	r3, r3, #10
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40013400 	.word	0x40013400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40015000 	.word	0x40015000

08004c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0201 	bic.w	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 030a 	bic.w	r3, r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b087      	sub	sp, #28
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f023 0210 	bic.w	r2, r3, #16
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f023 0210 	bic.w	r2, r3, #16
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	031b      	lsls	r3, r3, #12
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	031b      	lsls	r3, r3, #12
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	031b      	lsls	r3, r3, #12
 8004e8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2201      	movs	r2, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1a      	ldr	r2, [r3, #32]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	401a      	ands	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e06d      	b.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a30      	ldr	r2, [pc, #192]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2f      	ldr	r2, [pc, #188]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2d      	ldr	r2, [pc, #180]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d108      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d018      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a11      	ldr	r2, [pc, #68]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10c      	bne.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40013400 	.word	0x40013400
 8005078:	40015000 	.word	0x40015000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40014000 	.word	0x40014000

08005088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e040      	b.n	8005158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fc ff46 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	; 0x24
 80050f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f82c 	bl	8005160 <UART_SetConfig>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e022      	b.n	8005158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f9f6 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800512e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800513e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fa7d 	bl	8005650 <UART_CheckIdleState>
 8005156:	4603      	mov	r3, r0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4bab      	ldr	r3, [pc, #684]	; (8005438 <UART_SetConfig+0x2d8>)
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	6979      	ldr	r1, [r7, #20]
 8005194:	430b      	orrs	r3, r1
 8005196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a99      	ldr	r2, [pc, #612]	; (800543c <UART_SetConfig+0x2dc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d120      	bne.n	800521e <UART_SetConfig+0xbe>
 80051dc:	4b98      	ldr	r3, [pc, #608]	; (8005440 <UART_SetConfig+0x2e0>)
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d817      	bhi.n	8005218 <UART_SetConfig+0xb8>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x90>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005201 	.word	0x08005201
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005213 	.word	0x08005213
 80051fc:	08005207 	.word	0x08005207
 8005200:	2301      	movs	r3, #1
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	e0b5      	b.n	8005372 <UART_SetConfig+0x212>
 8005206:	2302      	movs	r3, #2
 8005208:	77fb      	strb	r3, [r7, #31]
 800520a:	e0b2      	b.n	8005372 <UART_SetConfig+0x212>
 800520c:	2304      	movs	r3, #4
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e0af      	b.n	8005372 <UART_SetConfig+0x212>
 8005212:	2308      	movs	r3, #8
 8005214:	77fb      	strb	r3, [r7, #31]
 8005216:	e0ac      	b.n	8005372 <UART_SetConfig+0x212>
 8005218:	2310      	movs	r3, #16
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e0a9      	b.n	8005372 <UART_SetConfig+0x212>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a88      	ldr	r2, [pc, #544]	; (8005444 <UART_SetConfig+0x2e4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d124      	bne.n	8005272 <UART_SetConfig+0x112>
 8005228:	4b85      	ldr	r3, [pc, #532]	; (8005440 <UART_SetConfig+0x2e0>)
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005230:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005234:	d011      	beq.n	800525a <UART_SetConfig+0xfa>
 8005236:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800523a:	d817      	bhi.n	800526c <UART_SetConfig+0x10c>
 800523c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005240:	d011      	beq.n	8005266 <UART_SetConfig+0x106>
 8005242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005246:	d811      	bhi.n	800526c <UART_SetConfig+0x10c>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <UART_SetConfig+0xf4>
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d006      	beq.n	8005260 <UART_SetConfig+0x100>
 8005252:	e00b      	b.n	800526c <UART_SetConfig+0x10c>
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e08b      	b.n	8005372 <UART_SetConfig+0x212>
 800525a:	2302      	movs	r3, #2
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e088      	b.n	8005372 <UART_SetConfig+0x212>
 8005260:	2304      	movs	r3, #4
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e085      	b.n	8005372 <UART_SetConfig+0x212>
 8005266:	2308      	movs	r3, #8
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e082      	b.n	8005372 <UART_SetConfig+0x212>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e07f      	b.n	8005372 <UART_SetConfig+0x212>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a74      	ldr	r2, [pc, #464]	; (8005448 <UART_SetConfig+0x2e8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d124      	bne.n	80052c6 <UART_SetConfig+0x166>
 800527c:	4b70      	ldr	r3, [pc, #448]	; (8005440 <UART_SetConfig+0x2e0>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005284:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005288:	d011      	beq.n	80052ae <UART_SetConfig+0x14e>
 800528a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800528e:	d817      	bhi.n	80052c0 <UART_SetConfig+0x160>
 8005290:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005294:	d011      	beq.n	80052ba <UART_SetConfig+0x15a>
 8005296:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800529a:	d811      	bhi.n	80052c0 <UART_SetConfig+0x160>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <UART_SetConfig+0x148>
 80052a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052a4:	d006      	beq.n	80052b4 <UART_SetConfig+0x154>
 80052a6:	e00b      	b.n	80052c0 <UART_SetConfig+0x160>
 80052a8:	2300      	movs	r3, #0
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e061      	b.n	8005372 <UART_SetConfig+0x212>
 80052ae:	2302      	movs	r3, #2
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e05e      	b.n	8005372 <UART_SetConfig+0x212>
 80052b4:	2304      	movs	r3, #4
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e05b      	b.n	8005372 <UART_SetConfig+0x212>
 80052ba:	2308      	movs	r3, #8
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e058      	b.n	8005372 <UART_SetConfig+0x212>
 80052c0:	2310      	movs	r3, #16
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e055      	b.n	8005372 <UART_SetConfig+0x212>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a60      	ldr	r2, [pc, #384]	; (800544c <UART_SetConfig+0x2ec>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d124      	bne.n	800531a <UART_SetConfig+0x1ba>
 80052d0:	4b5b      	ldr	r3, [pc, #364]	; (8005440 <UART_SetConfig+0x2e0>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80052d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052dc:	d011      	beq.n	8005302 <UART_SetConfig+0x1a2>
 80052de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052e2:	d817      	bhi.n	8005314 <UART_SetConfig+0x1b4>
 80052e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e8:	d011      	beq.n	800530e <UART_SetConfig+0x1ae>
 80052ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ee:	d811      	bhi.n	8005314 <UART_SetConfig+0x1b4>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <UART_SetConfig+0x19c>
 80052f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f8:	d006      	beq.n	8005308 <UART_SetConfig+0x1a8>
 80052fa:	e00b      	b.n	8005314 <UART_SetConfig+0x1b4>
 80052fc:	2300      	movs	r3, #0
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e037      	b.n	8005372 <UART_SetConfig+0x212>
 8005302:	2302      	movs	r3, #2
 8005304:	77fb      	strb	r3, [r7, #31]
 8005306:	e034      	b.n	8005372 <UART_SetConfig+0x212>
 8005308:	2304      	movs	r3, #4
 800530a:	77fb      	strb	r3, [r7, #31]
 800530c:	e031      	b.n	8005372 <UART_SetConfig+0x212>
 800530e:	2308      	movs	r3, #8
 8005310:	77fb      	strb	r3, [r7, #31]
 8005312:	e02e      	b.n	8005372 <UART_SetConfig+0x212>
 8005314:	2310      	movs	r3, #16
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e02b      	b.n	8005372 <UART_SetConfig+0x212>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a4c      	ldr	r2, [pc, #304]	; (8005450 <UART_SetConfig+0x2f0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d124      	bne.n	800536e <UART_SetConfig+0x20e>
 8005324:	4b46      	ldr	r3, [pc, #280]	; (8005440 <UART_SetConfig+0x2e0>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800532c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005330:	d011      	beq.n	8005356 <UART_SetConfig+0x1f6>
 8005332:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005336:	d817      	bhi.n	8005368 <UART_SetConfig+0x208>
 8005338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533c:	d011      	beq.n	8005362 <UART_SetConfig+0x202>
 800533e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005342:	d811      	bhi.n	8005368 <UART_SetConfig+0x208>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <UART_SetConfig+0x1f0>
 8005348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534c:	d006      	beq.n	800535c <UART_SetConfig+0x1fc>
 800534e:	e00b      	b.n	8005368 <UART_SetConfig+0x208>
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e00d      	b.n	8005372 <UART_SetConfig+0x212>
 8005356:	2302      	movs	r3, #2
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e00a      	b.n	8005372 <UART_SetConfig+0x212>
 800535c:	2304      	movs	r3, #4
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e007      	b.n	8005372 <UART_SetConfig+0x212>
 8005362:	2308      	movs	r3, #8
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e004      	b.n	8005372 <UART_SetConfig+0x212>
 8005368:	2310      	movs	r3, #16
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e001      	b.n	8005372 <UART_SetConfig+0x212>
 800536e:	2310      	movs	r3, #16
 8005370:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537a:	d16d      	bne.n	8005458 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 800537c:	7ffb      	ldrb	r3, [r7, #31]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d827      	bhi.n	80053d2 <UART_SetConfig+0x272>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0x228>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053bd 	.word	0x080053bd
 8005394:	080053d3 	.word	0x080053d3
 8005398:	080053c3 	.word	0x080053c3
 800539c:	080053d3 	.word	0x080053d3
 80053a0:	080053d3 	.word	0x080053d3
 80053a4:	080053d3 	.word	0x080053d3
 80053a8:	080053cb 	.word	0x080053cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fe fba2 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80053b0:	61b8      	str	r0, [r7, #24]
        break;
 80053b2:	e013      	b.n	80053dc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fbc0 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 80053b8:	61b8      	str	r0, [r7, #24]
        break;
 80053ba:	e00f      	b.n	80053dc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053bc:	4b25      	ldr	r3, [pc, #148]	; (8005454 <UART_SetConfig+0x2f4>)
 80053be:	61bb      	str	r3, [r7, #24]
        break;
 80053c0:	e00c      	b.n	80053dc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c2:	f7fe fb21 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80053c6:	61b8      	str	r0, [r7, #24]
        break;
 80053c8:	e008      	b.n	80053dc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	61bb      	str	r3, [r7, #24]
        break;
 80053d0:	e004      	b.n	80053dc <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	77bb      	strb	r3, [r7, #30]
        break;
 80053da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8086 	beq.w	80054f0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	005a      	lsls	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	441a      	add	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d916      	bls.n	8005430 <UART_SetConfig+0x2d0>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d212      	bcs.n	8005430 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f023 030f 	bic.w	r3, r3, #15
 8005412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	b29a      	uxth	r2, r3
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	4313      	orrs	r3, r2
 8005424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	89fa      	ldrh	r2, [r7, #14]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e05f      	b.n	80054f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	77bb      	strb	r3, [r7, #30]
 8005434:	e05c      	b.n	80054f0 <UART_SetConfig+0x390>
 8005436:	bf00      	nop
 8005438:	efff69f3 	.word	0xefff69f3
 800543c:	40013800 	.word	0x40013800
 8005440:	40021000 	.word	0x40021000
 8005444:	40004400 	.word	0x40004400
 8005448:	40004800 	.word	0x40004800
 800544c:	40004c00 	.word	0x40004c00
 8005450:	40005000 	.word	0x40005000
 8005454:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005458:	7ffb      	ldrb	r3, [r7, #31]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d827      	bhi.n	80054ae <UART_SetConfig+0x34e>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x304>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	080054af 	.word	0x080054af
 8005474:	0800549f 	.word	0x0800549f
 8005478:	080054af 	.word	0x080054af
 800547c:	080054af 	.word	0x080054af
 8005480:	080054af 	.word	0x080054af
 8005484:	080054a7 	.word	0x080054a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7fe fb34 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 800548c:	61b8      	str	r0, [r7, #24]
        break;
 800548e:	e013      	b.n	80054b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fe fb52 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005494:	61b8      	str	r0, [r7, #24]
        break;
 8005496:	e00f      	b.n	80054b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <UART_SetConfig+0x3a8>)
 800549a:	61bb      	str	r3, [r7, #24]
        break;
 800549c:	e00c      	b.n	80054b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549e:	f7fe fab3 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80054a2:	61b8      	str	r0, [r7, #24]
        break;
 80054a4:	e008      	b.n	80054b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054aa:	61bb      	str	r3, [r7, #24]
        break;
 80054ac:	e004      	b.n	80054b8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	77bb      	strb	r3, [r7, #30]
        break;
 80054b6:	bf00      	nop
    }

    if (pclk != 0U)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d018      	beq.n	80054f0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	085a      	lsrs	r2, r3, #1
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	441a      	add	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d908      	bls.n	80054ec <UART_SetConfig+0x38c>
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d204      	bcs.n	80054ec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e001      	b.n	80054f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	007a1200 	.word	0x007a1200

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d10a      	bne.n	8005622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005660:	f7fc fe5c 	bl	800231c <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d10e      	bne.n	8005692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f82d 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e023      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d10e      	bne.n	80056be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f817 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00d      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b09c      	sub	sp, #112	; 0x70
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	e0a5      	b.n	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	f000 80a1 	beq.w	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fc fe0d 	bl	800231c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <UART_WaitOnFlagUntilTimeout+0x32>
 800570e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005710:	2b00      	cmp	r3, #0
 8005712:	d13e      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005728:	667b      	str	r3, [r7, #100]	; 0x64
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005734:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e6      	bne.n	8005714 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	663b      	str	r3, [r7, #96]	; 0x60
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005766:	64ba      	str	r2, [r7, #72]	; 0x48
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800576c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e067      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d04f      	beq.n	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ae:	d147      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
 80057da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	66bb      	str	r3, [r7, #104]	; 0x68
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800580c:	623a      	str	r2, [r7, #32]
 800580e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	61bb      	str	r3, [r7, #24]
   return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e010      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	bf0c      	ite	eq
 8005850:	2301      	moveq	r3, #1
 8005852:	2300      	movne	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	429a      	cmp	r2, r3
 800585c:	f43f af4a 	beq.w	80056f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3770      	adds	r7, #112	; 0x70
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2000000c 	.word	0x2000000c

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f003 fcea 	bl	8009264 <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	080096f0 	.word	0x080096f0
 80058b4:	080096f0 	.word	0x080096f0
 80058b8:	080096f0 	.word	0x080096f0
 80058bc:	080096f4 	.word	0x080096f4

080058c0 <memset>:
 80058c0:	4402      	add	r2, r0
 80058c2:	4603      	mov	r3, r0
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d100      	bne.n	80058ca <memset+0xa>
 80058c8:	4770      	bx	lr
 80058ca:	f803 1b01 	strb.w	r1, [r3], #1
 80058ce:	e7f9      	b.n	80058c4 <memset+0x4>

080058d0 <__cvt>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	ec55 4b10 	vmov	r4, r5, d0
 80058d8:	2d00      	cmp	r5, #0
 80058da:	460e      	mov	r6, r1
 80058dc:	4619      	mov	r1, r3
 80058de:	462b      	mov	r3, r5
 80058e0:	bfbb      	ittet	lt
 80058e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058e6:	461d      	movlt	r5, r3
 80058e8:	2300      	movge	r3, #0
 80058ea:	232d      	movlt	r3, #45	; 0x2d
 80058ec:	700b      	strb	r3, [r1, #0]
 80058ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058f4:	4691      	mov	r9, r2
 80058f6:	f023 0820 	bic.w	r8, r3, #32
 80058fa:	bfbc      	itt	lt
 80058fc:	4622      	movlt	r2, r4
 80058fe:	4614      	movlt	r4, r2
 8005900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005904:	d005      	beq.n	8005912 <__cvt+0x42>
 8005906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800590a:	d100      	bne.n	800590e <__cvt+0x3e>
 800590c:	3601      	adds	r6, #1
 800590e:	2102      	movs	r1, #2
 8005910:	e000      	b.n	8005914 <__cvt+0x44>
 8005912:	2103      	movs	r1, #3
 8005914:	ab03      	add	r3, sp, #12
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	ab02      	add	r3, sp, #8
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	ec45 4b10 	vmov	d0, r4, r5
 8005920:	4653      	mov	r3, sl
 8005922:	4632      	mov	r2, r6
 8005924:	f000 fccc 	bl	80062c0 <_dtoa_r>
 8005928:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800592c:	4607      	mov	r7, r0
 800592e:	d102      	bne.n	8005936 <__cvt+0x66>
 8005930:	f019 0f01 	tst.w	r9, #1
 8005934:	d022      	beq.n	800597c <__cvt+0xac>
 8005936:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800593a:	eb07 0906 	add.w	r9, r7, r6
 800593e:	d110      	bne.n	8005962 <__cvt+0x92>
 8005940:	783b      	ldrb	r3, [r7, #0]
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	d10a      	bne.n	800595c <__cvt+0x8c>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fb f8c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005952:	b918      	cbnz	r0, 800595c <__cvt+0x8c>
 8005954:	f1c6 0601 	rsb	r6, r6, #1
 8005958:	f8ca 6000 	str.w	r6, [sl]
 800595c:	f8da 3000 	ldr.w	r3, [sl]
 8005960:	4499      	add	r9, r3
 8005962:	2200      	movs	r2, #0
 8005964:	2300      	movs	r3, #0
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	f7fb f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800596e:	b108      	cbz	r0, 8005974 <__cvt+0xa4>
 8005970:	f8cd 900c 	str.w	r9, [sp, #12]
 8005974:	2230      	movs	r2, #48	; 0x30
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	454b      	cmp	r3, r9
 800597a:	d307      	bcc.n	800598c <__cvt+0xbc>
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005980:	1bdb      	subs	r3, r3, r7
 8005982:	4638      	mov	r0, r7
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	b004      	add	sp, #16
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	9103      	str	r1, [sp, #12]
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e7f0      	b.n	8005976 <__cvt+0xa6>

08005994 <__exponent>:
 8005994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005996:	4603      	mov	r3, r0
 8005998:	2900      	cmp	r1, #0
 800599a:	bfb8      	it	lt
 800599c:	4249      	neglt	r1, r1
 800599e:	f803 2b02 	strb.w	r2, [r3], #2
 80059a2:	bfb4      	ite	lt
 80059a4:	222d      	movlt	r2, #45	; 0x2d
 80059a6:	222b      	movge	r2, #43	; 0x2b
 80059a8:	2909      	cmp	r1, #9
 80059aa:	7042      	strb	r2, [r0, #1]
 80059ac:	dd2a      	ble.n	8005a04 <__exponent+0x70>
 80059ae:	f10d 0407 	add.w	r4, sp, #7
 80059b2:	46a4      	mov	ip, r4
 80059b4:	270a      	movs	r7, #10
 80059b6:	46a6      	mov	lr, r4
 80059b8:	460a      	mov	r2, r1
 80059ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80059be:	fb07 1516 	mls	r5, r7, r6, r1
 80059c2:	3530      	adds	r5, #48	; 0x30
 80059c4:	2a63      	cmp	r2, #99	; 0x63
 80059c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80059ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059ce:	4631      	mov	r1, r6
 80059d0:	dcf1      	bgt.n	80059b6 <__exponent+0x22>
 80059d2:	3130      	adds	r1, #48	; 0x30
 80059d4:	f1ae 0502 	sub.w	r5, lr, #2
 80059d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059dc:	1c44      	adds	r4, r0, #1
 80059de:	4629      	mov	r1, r5
 80059e0:	4561      	cmp	r1, ip
 80059e2:	d30a      	bcc.n	80059fa <__exponent+0x66>
 80059e4:	f10d 0209 	add.w	r2, sp, #9
 80059e8:	eba2 020e 	sub.w	r2, r2, lr
 80059ec:	4565      	cmp	r5, ip
 80059ee:	bf88      	it	hi
 80059f0:	2200      	movhi	r2, #0
 80059f2:	4413      	add	r3, r2
 80059f4:	1a18      	subs	r0, r3, r0
 80059f6:	b003      	add	sp, #12
 80059f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a02:	e7ed      	b.n	80059e0 <__exponent+0x4c>
 8005a04:	2330      	movs	r3, #48	; 0x30
 8005a06:	3130      	adds	r1, #48	; 0x30
 8005a08:	7083      	strb	r3, [r0, #2]
 8005a0a:	70c1      	strb	r1, [r0, #3]
 8005a0c:	1d03      	adds	r3, r0, #4
 8005a0e:	e7f1      	b.n	80059f4 <__exponent+0x60>

08005a10 <_printf_float>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	ed2d 8b02 	vpush	{d8}
 8005a18:	b08d      	sub	sp, #52	; 0x34
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a20:	4616      	mov	r6, r2
 8005a22:	461f      	mov	r7, r3
 8005a24:	4605      	mov	r5, r0
 8005a26:	f001 fa37 	bl	8006e98 <_localeconv_r>
 8005a2a:	f8d0 a000 	ldr.w	sl, [r0]
 8005a2e:	4650      	mov	r0, sl
 8005a30:	f7fa fbd6 	bl	80001e0 <strlen>
 8005a34:	2300      	movs	r3, #0
 8005a36:	930a      	str	r3, [sp, #40]	; 0x28
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a44:	3307      	adds	r3, #7
 8005a46:	f023 0307 	bic.w	r3, r3, #7
 8005a4a:	f103 0208 	add.w	r2, r3, #8
 8005a4e:	f8c8 2000 	str.w	r2, [r8]
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a62:	9307      	str	r3, [sp, #28]
 8005a64:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a68:	ee08 0a10 	vmov	s16, r0
 8005a6c:	4b9f      	ldr	r3, [pc, #636]	; (8005cec <_printf_float+0x2dc>)
 8005a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	f7fb f861 	bl	8000b3c <__aeabi_dcmpun>
 8005a7a:	bb88      	cbnz	r0, 8005ae0 <_printf_float+0xd0>
 8005a7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a80:	4b9a      	ldr	r3, [pc, #616]	; (8005cec <_printf_float+0x2dc>)
 8005a82:	f04f 32ff 	mov.w	r2, #4294967295
 8005a86:	f7fb f83b 	bl	8000b00 <__aeabi_dcmple>
 8005a8a:	bb48      	cbnz	r0, 8005ae0 <_printf_float+0xd0>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4640      	mov	r0, r8
 8005a92:	4649      	mov	r1, r9
 8005a94:	f7fb f82a 	bl	8000aec <__aeabi_dcmplt>
 8005a98:	b110      	cbz	r0, 8005aa0 <_printf_float+0x90>
 8005a9a:	232d      	movs	r3, #45	; 0x2d
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa0:	4b93      	ldr	r3, [pc, #588]	; (8005cf0 <_printf_float+0x2e0>)
 8005aa2:	4894      	ldr	r0, [pc, #592]	; (8005cf4 <_printf_float+0x2e4>)
 8005aa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005aa8:	bf94      	ite	ls
 8005aaa:	4698      	movls	r8, r3
 8005aac:	4680      	movhi	r8, r0
 8005aae:	2303      	movs	r3, #3
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	9b05      	ldr	r3, [sp, #20]
 8005ab4:	f023 0204 	bic.w	r2, r3, #4
 8005ab8:	6022      	str	r2, [r4, #0]
 8005aba:	f04f 0900 	mov.w	r9, #0
 8005abe:	9700      	str	r7, [sp, #0]
 8005ac0:	4633      	mov	r3, r6
 8005ac2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f9d8 	bl	8005e7c <_printf_common>
 8005acc:	3001      	adds	r0, #1
 8005ace:	f040 8090 	bne.w	8005bf2 <_printf_float+0x1e2>
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	b00d      	add	sp, #52	; 0x34
 8005ad8:	ecbd 8b02 	vpop	{d8}
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fb f828 	bl	8000b3c <__aeabi_dcmpun>
 8005aec:	b140      	cbz	r0, 8005b00 <_printf_float+0xf0>
 8005aee:	464b      	mov	r3, r9
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bfbc      	itt	lt
 8005af4:	232d      	movlt	r3, #45	; 0x2d
 8005af6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005afa:	487f      	ldr	r0, [pc, #508]	; (8005cf8 <_printf_float+0x2e8>)
 8005afc:	4b7f      	ldr	r3, [pc, #508]	; (8005cfc <_printf_float+0x2ec>)
 8005afe:	e7d1      	b.n	8005aa4 <_printf_float+0x94>
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b06:	9206      	str	r2, [sp, #24]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	d13f      	bne.n	8005b8c <_printf_float+0x17c>
 8005b0c:	2306      	movs	r3, #6
 8005b0e:	6063      	str	r3, [r4, #4]
 8005b10:	9b05      	ldr	r3, [sp, #20]
 8005b12:	6861      	ldr	r1, [r4, #4]
 8005b14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9303      	str	r3, [sp, #12]
 8005b1c:	ab0a      	add	r3, sp, #40	; 0x28
 8005b1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b22:	ab09      	add	r3, sp, #36	; 0x24
 8005b24:	ec49 8b10 	vmov	d0, r8, r9
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7ff fecd 	bl	80058d0 <__cvt>
 8005b36:	9b06      	ldr	r3, [sp, #24]
 8005b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b3a:	2b47      	cmp	r3, #71	; 0x47
 8005b3c:	4680      	mov	r8, r0
 8005b3e:	d108      	bne.n	8005b52 <_printf_float+0x142>
 8005b40:	1cc8      	adds	r0, r1, #3
 8005b42:	db02      	blt.n	8005b4a <_printf_float+0x13a>
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	4299      	cmp	r1, r3
 8005b48:	dd41      	ble.n	8005bce <_printf_float+0x1be>
 8005b4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b4e:	fa5f fb8b 	uxtb.w	fp, fp
 8005b52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b56:	d820      	bhi.n	8005b9a <_printf_float+0x18a>
 8005b58:	3901      	subs	r1, #1
 8005b5a:	465a      	mov	r2, fp
 8005b5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b60:	9109      	str	r1, [sp, #36]	; 0x24
 8005b62:	f7ff ff17 	bl	8005994 <__exponent>
 8005b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b68:	1813      	adds	r3, r2, r0
 8005b6a:	2a01      	cmp	r2, #1
 8005b6c:	4681      	mov	r9, r0
 8005b6e:	6123      	str	r3, [r4, #16]
 8005b70:	dc02      	bgt.n	8005b78 <_printf_float+0x168>
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	07d2      	lsls	r2, r2, #31
 8005b76:	d501      	bpl.n	8005b7c <_printf_float+0x16c>
 8005b78:	3301      	adds	r3, #1
 8005b7a:	6123      	str	r3, [r4, #16]
 8005b7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d09c      	beq.n	8005abe <_printf_float+0xae>
 8005b84:	232d      	movs	r3, #45	; 0x2d
 8005b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8a:	e798      	b.n	8005abe <_printf_float+0xae>
 8005b8c:	9a06      	ldr	r2, [sp, #24]
 8005b8e:	2a47      	cmp	r2, #71	; 0x47
 8005b90:	d1be      	bne.n	8005b10 <_printf_float+0x100>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1bc      	bne.n	8005b10 <_printf_float+0x100>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e7b9      	b.n	8005b0e <_printf_float+0xfe>
 8005b9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b9e:	d118      	bne.n	8005bd2 <_printf_float+0x1c2>
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	dd0b      	ble.n	8005bbe <_printf_float+0x1ae>
 8005ba6:	6121      	str	r1, [r4, #16]
 8005ba8:	b913      	cbnz	r3, 8005bb0 <_printf_float+0x1a0>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	07d0      	lsls	r0, r2, #31
 8005bae:	d502      	bpl.n	8005bb6 <_printf_float+0x1a6>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	440b      	add	r3, r1
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bb8:	f04f 0900 	mov.w	r9, #0
 8005bbc:	e7de      	b.n	8005b7c <_printf_float+0x16c>
 8005bbe:	b913      	cbnz	r3, 8005bc6 <_printf_float+0x1b6>
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	07d2      	lsls	r2, r2, #31
 8005bc4:	d501      	bpl.n	8005bca <_printf_float+0x1ba>
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	e7f4      	b.n	8005bb4 <_printf_float+0x1a4>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e7f2      	b.n	8005bb4 <_printf_float+0x1a4>
 8005bce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	db05      	blt.n	8005be4 <_printf_float+0x1d4>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	6121      	str	r1, [r4, #16]
 8005bdc:	07d8      	lsls	r0, r3, #31
 8005bde:	d5ea      	bpl.n	8005bb6 <_printf_float+0x1a6>
 8005be0:	1c4b      	adds	r3, r1, #1
 8005be2:	e7e7      	b.n	8005bb4 <_printf_float+0x1a4>
 8005be4:	2900      	cmp	r1, #0
 8005be6:	bfd4      	ite	le
 8005be8:	f1c1 0202 	rsble	r2, r1, #2
 8005bec:	2201      	movgt	r2, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	e7e0      	b.n	8005bb4 <_printf_float+0x1a4>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	055a      	lsls	r2, r3, #21
 8005bf6:	d407      	bmi.n	8005c08 <_printf_float+0x1f8>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	4642      	mov	r2, r8
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	d12c      	bne.n	8005c60 <_printf_float+0x250>
 8005c06:	e764      	b.n	8005ad2 <_printf_float+0xc2>
 8005c08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c0c:	f240 80e0 	bls.w	8005dd0 <_printf_float+0x3c0>
 8005c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c14:	2200      	movs	r2, #0
 8005c16:	2300      	movs	r3, #0
 8005c18:	f7fa ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d034      	beq.n	8005c8a <_printf_float+0x27a>
 8005c20:	4a37      	ldr	r2, [pc, #220]	; (8005d00 <_printf_float+0x2f0>)
 8005c22:	2301      	movs	r3, #1
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f af51 	beq.w	8005ad2 <_printf_float+0xc2>
 8005c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c34:	429a      	cmp	r2, r3
 8005c36:	db02      	blt.n	8005c3e <_printf_float+0x22e>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	07d8      	lsls	r0, r3, #31
 8005c3c:	d510      	bpl.n	8005c60 <_printf_float+0x250>
 8005c3e:	ee18 3a10 	vmov	r3, s16
 8005c42:	4652      	mov	r2, sl
 8005c44:	4631      	mov	r1, r6
 8005c46:	4628      	mov	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	f43f af41 	beq.w	8005ad2 <_printf_float+0xc2>
 8005c50:	f04f 0800 	mov.w	r8, #0
 8005c54:	f104 091a 	add.w	r9, r4, #26
 8005c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	4543      	cmp	r3, r8
 8005c5e:	dc09      	bgt.n	8005c74 <_printf_float+0x264>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	079b      	lsls	r3, r3, #30
 8005c64:	f100 8105 	bmi.w	8005e72 <_printf_float+0x462>
 8005c68:	68e0      	ldr	r0, [r4, #12]
 8005c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6c:	4298      	cmp	r0, r3
 8005c6e:	bfb8      	it	lt
 8005c70:	4618      	movlt	r0, r3
 8005c72:	e730      	b.n	8005ad6 <_printf_float+0xc6>
 8005c74:	2301      	movs	r3, #1
 8005c76:	464a      	mov	r2, r9
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f af27 	beq.w	8005ad2 <_printf_float+0xc2>
 8005c84:	f108 0801 	add.w	r8, r8, #1
 8005c88:	e7e6      	b.n	8005c58 <_printf_float+0x248>
 8005c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dc39      	bgt.n	8005d04 <_printf_float+0x2f4>
 8005c90:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <_printf_float+0x2f0>)
 8005c92:	2301      	movs	r3, #1
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f af19 	beq.w	8005ad2 <_printf_float+0xc2>
 8005ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	d102      	bne.n	8005cae <_printf_float+0x29e>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	07d9      	lsls	r1, r3, #31
 8005cac:	d5d8      	bpl.n	8005c60 <_printf_float+0x250>
 8005cae:	ee18 3a10 	vmov	r3, s16
 8005cb2:	4652      	mov	r2, sl
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f af09 	beq.w	8005ad2 <_printf_float+0xc2>
 8005cc0:	f04f 0900 	mov.w	r9, #0
 8005cc4:	f104 0a1a 	add.w	sl, r4, #26
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	425b      	negs	r3, r3
 8005ccc:	454b      	cmp	r3, r9
 8005cce:	dc01      	bgt.n	8005cd4 <_printf_float+0x2c4>
 8005cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd2:	e792      	b.n	8005bfa <_printf_float+0x1ea>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	4652      	mov	r2, sl
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	f43f aef7 	beq.w	8005ad2 <_printf_float+0xc2>
 8005ce4:	f109 0901 	add.w	r9, r9, #1
 8005ce8:	e7ee      	b.n	8005cc8 <_printf_float+0x2b8>
 8005cea:	bf00      	nop
 8005cec:	7fefffff 	.word	0x7fefffff
 8005cf0:	080092d0 	.word	0x080092d0
 8005cf4:	080092d4 	.word	0x080092d4
 8005cf8:	080092dc 	.word	0x080092dc
 8005cfc:	080092d8 	.word	0x080092d8
 8005d00:	080092e0 	.word	0x080092e0
 8005d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	bfa8      	it	ge
 8005d0c:	461a      	movge	r2, r3
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	4691      	mov	r9, r2
 8005d12:	dc37      	bgt.n	8005d84 <_printf_float+0x374>
 8005d14:	f04f 0b00 	mov.w	fp, #0
 8005d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d1c:	f104 021a 	add.w	r2, r4, #26
 8005d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d22:	9305      	str	r3, [sp, #20]
 8005d24:	eba3 0309 	sub.w	r3, r3, r9
 8005d28:	455b      	cmp	r3, fp
 8005d2a:	dc33      	bgt.n	8005d94 <_printf_float+0x384>
 8005d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d30:	429a      	cmp	r2, r3
 8005d32:	db3b      	blt.n	8005dac <_printf_float+0x39c>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	07da      	lsls	r2, r3, #31
 8005d38:	d438      	bmi.n	8005dac <_printf_float+0x39c>
 8005d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3c:	9b05      	ldr	r3, [sp, #20]
 8005d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	eba2 0901 	sub.w	r9, r2, r1
 8005d46:	4599      	cmp	r9, r3
 8005d48:	bfa8      	it	ge
 8005d4a:	4699      	movge	r9, r3
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	dc35      	bgt.n	8005dbe <_printf_float+0x3ae>
 8005d52:	f04f 0800 	mov.w	r8, #0
 8005d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d5a:	f104 0a1a 	add.w	sl, r4, #26
 8005d5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	eba3 0309 	sub.w	r3, r3, r9
 8005d68:	4543      	cmp	r3, r8
 8005d6a:	f77f af79 	ble.w	8005c60 <_printf_float+0x250>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4652      	mov	r2, sl
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f aeaa 	beq.w	8005ad2 <_printf_float+0xc2>
 8005d7e:	f108 0801 	add.w	r8, r8, #1
 8005d82:	e7ec      	b.n	8005d5e <_printf_float+0x34e>
 8005d84:	4613      	mov	r3, r2
 8005d86:	4631      	mov	r1, r6
 8005d88:	4642      	mov	r2, r8
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d1c0      	bne.n	8005d14 <_printf_float+0x304>
 8005d92:	e69e      	b.n	8005ad2 <_printf_float+0xc2>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	9205      	str	r2, [sp, #20]
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f ae97 	beq.w	8005ad2 <_printf_float+0xc2>
 8005da4:	9a05      	ldr	r2, [sp, #20]
 8005da6:	f10b 0b01 	add.w	fp, fp, #1
 8005daa:	e7b9      	b.n	8005d20 <_printf_float+0x310>
 8005dac:	ee18 3a10 	vmov	r3, s16
 8005db0:	4652      	mov	r2, sl
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	d1be      	bne.n	8005d3a <_printf_float+0x32a>
 8005dbc:	e689      	b.n	8005ad2 <_printf_float+0xc2>
 8005dbe:	9a05      	ldr	r2, [sp, #20]
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	4442      	add	r2, r8
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d1c1      	bne.n	8005d52 <_printf_float+0x342>
 8005dce:	e680      	b.n	8005ad2 <_printf_float+0xc2>
 8005dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd2:	2a01      	cmp	r2, #1
 8005dd4:	dc01      	bgt.n	8005dda <_printf_float+0x3ca>
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d538      	bpl.n	8005e4c <_printf_float+0x43c>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4642      	mov	r2, r8
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f ae74 	beq.w	8005ad2 <_printf_float+0xc2>
 8005dea:	ee18 3a10 	vmov	r3, s16
 8005dee:	4652      	mov	r2, sl
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	47b8      	blx	r7
 8005df6:	3001      	adds	r0, #1
 8005df8:	f43f ae6b 	beq.w	8005ad2 <_printf_float+0xc2>
 8005dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e00:	2200      	movs	r2, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	f7fa fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e08:	b9d8      	cbnz	r0, 8005e42 <_printf_float+0x432>
 8005e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0c:	f108 0201 	add.w	r2, r8, #1
 8005e10:	3b01      	subs	r3, #1
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d10e      	bne.n	8005e3a <_printf_float+0x42a>
 8005e1c:	e659      	b.n	8005ad2 <_printf_float+0xc2>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4652      	mov	r2, sl
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f43f ae52 	beq.w	8005ad2 <_printf_float+0xc2>
 8005e2e:	f108 0801 	add.w	r8, r8, #1
 8005e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	4543      	cmp	r3, r8
 8005e38:	dcf1      	bgt.n	8005e1e <_printf_float+0x40e>
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e40:	e6dc      	b.n	8005bfc <_printf_float+0x1ec>
 8005e42:	f04f 0800 	mov.w	r8, #0
 8005e46:	f104 0a1a 	add.w	sl, r4, #26
 8005e4a:	e7f2      	b.n	8005e32 <_printf_float+0x422>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4642      	mov	r2, r8
 8005e50:	e7df      	b.n	8005e12 <_printf_float+0x402>
 8005e52:	2301      	movs	r3, #1
 8005e54:	464a      	mov	r2, r9
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f43f ae38 	beq.w	8005ad2 <_printf_float+0xc2>
 8005e62:	f108 0801 	add.w	r8, r8, #1
 8005e66:	68e3      	ldr	r3, [r4, #12]
 8005e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e6a:	1a5b      	subs	r3, r3, r1
 8005e6c:	4543      	cmp	r3, r8
 8005e6e:	dcf0      	bgt.n	8005e52 <_printf_float+0x442>
 8005e70:	e6fa      	b.n	8005c68 <_printf_float+0x258>
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	f104 0919 	add.w	r9, r4, #25
 8005e7a:	e7f4      	b.n	8005e66 <_printf_float+0x456>

08005e7c <_printf_common>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	4616      	mov	r6, r2
 8005e82:	4699      	mov	r9, r3
 8005e84:	688a      	ldr	r2, [r1, #8]
 8005e86:	690b      	ldr	r3, [r1, #16]
 8005e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bfb8      	it	lt
 8005e90:	4613      	movlt	r3, r2
 8005e92:	6033      	str	r3, [r6, #0]
 8005e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e98:	4607      	mov	r7, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	b10a      	cbz	r2, 8005ea2 <_printf_common+0x26>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	0699      	lsls	r1, r3, #26
 8005ea6:	bf42      	ittt	mi
 8005ea8:	6833      	ldrmi	r3, [r6, #0]
 8005eaa:	3302      	addmi	r3, #2
 8005eac:	6033      	strmi	r3, [r6, #0]
 8005eae:	6825      	ldr	r5, [r4, #0]
 8005eb0:	f015 0506 	ands.w	r5, r5, #6
 8005eb4:	d106      	bne.n	8005ec4 <_printf_common+0x48>
 8005eb6:	f104 0a19 	add.w	sl, r4, #25
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	6832      	ldr	r2, [r6, #0]
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dc26      	bgt.n	8005f12 <_printf_common+0x96>
 8005ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ec8:	1e13      	subs	r3, r2, #0
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	bf18      	it	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	0692      	lsls	r2, r2, #26
 8005ed2:	d42b      	bmi.n	8005f2c <_printf_common+0xb0>
 8005ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed8:	4649      	mov	r1, r9
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c0      	blx	r8
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d01e      	beq.n	8005f20 <_printf_common+0xa4>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	68e5      	ldr	r5, [r4, #12]
 8005ee6:	6832      	ldr	r2, [r6, #0]
 8005ee8:	f003 0306 	and.w	r3, r3, #6
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	bf08      	it	eq
 8005ef0:	1aad      	subeq	r5, r5, r2
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	6922      	ldr	r2, [r4, #16]
 8005ef6:	bf0c      	ite	eq
 8005ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005efc:	2500      	movne	r5, #0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	bfc4      	itt	gt
 8005f02:	1a9b      	subgt	r3, r3, r2
 8005f04:	18ed      	addgt	r5, r5, r3
 8005f06:	2600      	movs	r6, #0
 8005f08:	341a      	adds	r4, #26
 8005f0a:	42b5      	cmp	r5, r6
 8005f0c:	d11a      	bne.n	8005f44 <_printf_common+0xc8>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e008      	b.n	8005f24 <_printf_common+0xa8>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4652      	mov	r2, sl
 8005f16:	4649      	mov	r1, r9
 8005f18:	4638      	mov	r0, r7
 8005f1a:	47c0      	blx	r8
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d103      	bne.n	8005f28 <_printf_common+0xac>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	3501      	adds	r5, #1
 8005f2a:	e7c6      	b.n	8005eba <_printf_common+0x3e>
 8005f2c:	18e1      	adds	r1, r4, r3
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	2030      	movs	r0, #48	; 0x30
 8005f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f36:	4422      	add	r2, r4
 8005f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f40:	3302      	adds	r3, #2
 8005f42:	e7c7      	b.n	8005ed4 <_printf_common+0x58>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4622      	mov	r2, r4
 8005f48:	4649      	mov	r1, r9
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c0      	blx	r8
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d0e6      	beq.n	8005f20 <_printf_common+0xa4>
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7d9      	b.n	8005f0a <_printf_common+0x8e>
	...

08005f58 <_printf_i>:
 8005f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4691      	mov	r9, r2
 8005f60:	7e27      	ldrb	r7, [r4, #24]
 8005f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f64:	2f78      	cmp	r7, #120	; 0x78
 8005f66:	4680      	mov	r8, r0
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6e:	d807      	bhi.n	8005f80 <_printf_i+0x28>
 8005f70:	2f62      	cmp	r7, #98	; 0x62
 8005f72:	d80a      	bhi.n	8005f8a <_printf_i+0x32>
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	f000 80d8 	beq.w	800612a <_printf_i+0x1d2>
 8005f7a:	2f58      	cmp	r7, #88	; 0x58
 8005f7c:	f000 80a3 	beq.w	80060c6 <_printf_i+0x16e>
 8005f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f88:	e03a      	b.n	8006000 <_printf_i+0xa8>
 8005f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f8e:	2b15      	cmp	r3, #21
 8005f90:	d8f6      	bhi.n	8005f80 <_printf_i+0x28>
 8005f92:	a001      	add	r0, pc, #4	; (adr r0, 8005f98 <_printf_i+0x40>)
 8005f94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08005f81 	.word	0x08005f81
 8005fa4:	08005f81 	.word	0x08005f81
 8005fa8:	08005f81 	.word	0x08005f81
 8005fac:	08005f81 	.word	0x08005f81
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08005f81 	.word	0x08005f81
 8005fb8:	08005f81 	.word	0x08005f81
 8005fbc:	08005f81 	.word	0x08005f81
 8005fc0:	08005f81 	.word	0x08005f81
 8005fc4:	08006111 	.word	0x08006111
 8005fc8:	08006035 	.word	0x08006035
 8005fcc:	080060f3 	.word	0x080060f3
 8005fd0:	08005f81 	.word	0x08005f81
 8005fd4:	08005f81 	.word	0x08005f81
 8005fd8:	08006133 	.word	0x08006133
 8005fdc:	08005f81 	.word	0x08005f81
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08005f81 	.word	0x08005f81
 8005fe8:	08005f81 	.word	0x08005f81
 8005fec:	080060fb 	.word	0x080060fb
 8005ff0:	680b      	ldr	r3, [r1, #0]
 8005ff2:	1d1a      	adds	r2, r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	600a      	str	r2, [r1, #0]
 8005ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006000:	2301      	movs	r3, #1
 8006002:	e0a3      	b.n	800614c <_printf_i+0x1f4>
 8006004:	6825      	ldr	r5, [r4, #0]
 8006006:	6808      	ldr	r0, [r1, #0]
 8006008:	062e      	lsls	r6, r5, #24
 800600a:	f100 0304 	add.w	r3, r0, #4
 800600e:	d50a      	bpl.n	8006026 <_printf_i+0xce>
 8006010:	6805      	ldr	r5, [r0, #0]
 8006012:	600b      	str	r3, [r1, #0]
 8006014:	2d00      	cmp	r5, #0
 8006016:	da03      	bge.n	8006020 <_printf_i+0xc8>
 8006018:	232d      	movs	r3, #45	; 0x2d
 800601a:	426d      	negs	r5, r5
 800601c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006020:	485e      	ldr	r0, [pc, #376]	; (800619c <_printf_i+0x244>)
 8006022:	230a      	movs	r3, #10
 8006024:	e019      	b.n	800605a <_printf_i+0x102>
 8006026:	f015 0f40 	tst.w	r5, #64	; 0x40
 800602a:	6805      	ldr	r5, [r0, #0]
 800602c:	600b      	str	r3, [r1, #0]
 800602e:	bf18      	it	ne
 8006030:	b22d      	sxthne	r5, r5
 8006032:	e7ef      	b.n	8006014 <_printf_i+0xbc>
 8006034:	680b      	ldr	r3, [r1, #0]
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	1d18      	adds	r0, r3, #4
 800603a:	6008      	str	r0, [r1, #0]
 800603c:	0628      	lsls	r0, r5, #24
 800603e:	d501      	bpl.n	8006044 <_printf_i+0xec>
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	e002      	b.n	800604a <_printf_i+0xf2>
 8006044:	0669      	lsls	r1, r5, #25
 8006046:	d5fb      	bpl.n	8006040 <_printf_i+0xe8>
 8006048:	881d      	ldrh	r5, [r3, #0]
 800604a:	4854      	ldr	r0, [pc, #336]	; (800619c <_printf_i+0x244>)
 800604c:	2f6f      	cmp	r7, #111	; 0x6f
 800604e:	bf0c      	ite	eq
 8006050:	2308      	moveq	r3, #8
 8006052:	230a      	movne	r3, #10
 8006054:	2100      	movs	r1, #0
 8006056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800605a:	6866      	ldr	r6, [r4, #4]
 800605c:	60a6      	str	r6, [r4, #8]
 800605e:	2e00      	cmp	r6, #0
 8006060:	bfa2      	ittt	ge
 8006062:	6821      	ldrge	r1, [r4, #0]
 8006064:	f021 0104 	bicge.w	r1, r1, #4
 8006068:	6021      	strge	r1, [r4, #0]
 800606a:	b90d      	cbnz	r5, 8006070 <_printf_i+0x118>
 800606c:	2e00      	cmp	r6, #0
 800606e:	d04d      	beq.n	800610c <_printf_i+0x1b4>
 8006070:	4616      	mov	r6, r2
 8006072:	fbb5 f1f3 	udiv	r1, r5, r3
 8006076:	fb03 5711 	mls	r7, r3, r1, r5
 800607a:	5dc7      	ldrb	r7, [r0, r7]
 800607c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006080:	462f      	mov	r7, r5
 8006082:	42bb      	cmp	r3, r7
 8006084:	460d      	mov	r5, r1
 8006086:	d9f4      	bls.n	8006072 <_printf_i+0x11a>
 8006088:	2b08      	cmp	r3, #8
 800608a:	d10b      	bne.n	80060a4 <_printf_i+0x14c>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	07df      	lsls	r7, r3, #31
 8006090:	d508      	bpl.n	80060a4 <_printf_i+0x14c>
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	6861      	ldr	r1, [r4, #4]
 8006096:	4299      	cmp	r1, r3
 8006098:	bfde      	ittt	le
 800609a:	2330      	movle	r3, #48	; 0x30
 800609c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060a4:	1b92      	subs	r2, r2, r6
 80060a6:	6122      	str	r2, [r4, #16]
 80060a8:	f8cd a000 	str.w	sl, [sp]
 80060ac:	464b      	mov	r3, r9
 80060ae:	aa03      	add	r2, sp, #12
 80060b0:	4621      	mov	r1, r4
 80060b2:	4640      	mov	r0, r8
 80060b4:	f7ff fee2 	bl	8005e7c <_printf_common>
 80060b8:	3001      	adds	r0, #1
 80060ba:	d14c      	bne.n	8006156 <_printf_i+0x1fe>
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	b004      	add	sp, #16
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c6:	4835      	ldr	r0, [pc, #212]	; (800619c <_printf_i+0x244>)
 80060c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	680e      	ldr	r6, [r1, #0]
 80060d0:	061f      	lsls	r7, r3, #24
 80060d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80060d6:	600e      	str	r6, [r1, #0]
 80060d8:	d514      	bpl.n	8006104 <_printf_i+0x1ac>
 80060da:	07d9      	lsls	r1, r3, #31
 80060dc:	bf44      	itt	mi
 80060de:	f043 0320 	orrmi.w	r3, r3, #32
 80060e2:	6023      	strmi	r3, [r4, #0]
 80060e4:	b91d      	cbnz	r5, 80060ee <_printf_i+0x196>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	f023 0320 	bic.w	r3, r3, #32
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	2310      	movs	r3, #16
 80060f0:	e7b0      	b.n	8006054 <_printf_i+0xfc>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	f043 0320 	orr.w	r3, r3, #32
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	2378      	movs	r3, #120	; 0x78
 80060fc:	4828      	ldr	r0, [pc, #160]	; (80061a0 <_printf_i+0x248>)
 80060fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006102:	e7e3      	b.n	80060cc <_printf_i+0x174>
 8006104:	065e      	lsls	r6, r3, #25
 8006106:	bf48      	it	mi
 8006108:	b2ad      	uxthmi	r5, r5
 800610a:	e7e6      	b.n	80060da <_printf_i+0x182>
 800610c:	4616      	mov	r6, r2
 800610e:	e7bb      	b.n	8006088 <_printf_i+0x130>
 8006110:	680b      	ldr	r3, [r1, #0]
 8006112:	6826      	ldr	r6, [r4, #0]
 8006114:	6960      	ldr	r0, [r4, #20]
 8006116:	1d1d      	adds	r5, r3, #4
 8006118:	600d      	str	r5, [r1, #0]
 800611a:	0635      	lsls	r5, r6, #24
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	d501      	bpl.n	8006124 <_printf_i+0x1cc>
 8006120:	6018      	str	r0, [r3, #0]
 8006122:	e002      	b.n	800612a <_printf_i+0x1d2>
 8006124:	0671      	lsls	r1, r6, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0x1c8>
 8006128:	8018      	strh	r0, [r3, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	4616      	mov	r6, r2
 8006130:	e7ba      	b.n	80060a8 <_printf_i+0x150>
 8006132:	680b      	ldr	r3, [r1, #0]
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	600a      	str	r2, [r1, #0]
 8006138:	681e      	ldr	r6, [r3, #0]
 800613a:	6862      	ldr	r2, [r4, #4]
 800613c:	2100      	movs	r1, #0
 800613e:	4630      	mov	r0, r6
 8006140:	f7fa f856 	bl	80001f0 <memchr>
 8006144:	b108      	cbz	r0, 800614a <_printf_i+0x1f2>
 8006146:	1b80      	subs	r0, r0, r6
 8006148:	6060      	str	r0, [r4, #4]
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	6123      	str	r3, [r4, #16]
 800614e:	2300      	movs	r3, #0
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006154:	e7a8      	b.n	80060a8 <_printf_i+0x150>
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	4632      	mov	r2, r6
 800615a:	4649      	mov	r1, r9
 800615c:	4640      	mov	r0, r8
 800615e:	47d0      	blx	sl
 8006160:	3001      	adds	r0, #1
 8006162:	d0ab      	beq.n	80060bc <_printf_i+0x164>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	d413      	bmi.n	8006192 <_printf_i+0x23a>
 800616a:	68e0      	ldr	r0, [r4, #12]
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	4298      	cmp	r0, r3
 8006170:	bfb8      	it	lt
 8006172:	4618      	movlt	r0, r3
 8006174:	e7a4      	b.n	80060c0 <_printf_i+0x168>
 8006176:	2301      	movs	r3, #1
 8006178:	4632      	mov	r2, r6
 800617a:	4649      	mov	r1, r9
 800617c:	4640      	mov	r0, r8
 800617e:	47d0      	blx	sl
 8006180:	3001      	adds	r0, #1
 8006182:	d09b      	beq.n	80060bc <_printf_i+0x164>
 8006184:	3501      	adds	r5, #1
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	9903      	ldr	r1, [sp, #12]
 800618a:	1a5b      	subs	r3, r3, r1
 800618c:	42ab      	cmp	r3, r5
 800618e:	dcf2      	bgt.n	8006176 <_printf_i+0x21e>
 8006190:	e7eb      	b.n	800616a <_printf_i+0x212>
 8006192:	2500      	movs	r5, #0
 8006194:	f104 0619 	add.w	r6, r4, #25
 8006198:	e7f5      	b.n	8006186 <_printf_i+0x22e>
 800619a:	bf00      	nop
 800619c:	080092e2 	.word	0x080092e2
 80061a0:	080092f3 	.word	0x080092f3

080061a4 <quorem>:
 80061a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	6903      	ldr	r3, [r0, #16]
 80061aa:	690c      	ldr	r4, [r1, #16]
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	4607      	mov	r7, r0
 80061b0:	f2c0 8081 	blt.w	80062b6 <quorem+0x112>
 80061b4:	3c01      	subs	r4, #1
 80061b6:	f101 0814 	add.w	r8, r1, #20
 80061ba:	f100 0514 	add.w	r5, r0, #20
 80061be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061cc:	3301      	adds	r3, #1
 80061ce:	429a      	cmp	r2, r3
 80061d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80061dc:	d331      	bcc.n	8006242 <quorem+0x9e>
 80061de:	f04f 0e00 	mov.w	lr, #0
 80061e2:	4640      	mov	r0, r8
 80061e4:	46ac      	mov	ip, r5
 80061e6:	46f2      	mov	sl, lr
 80061e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80061ec:	b293      	uxth	r3, r2
 80061ee:	fb06 e303 	mla	r3, r6, r3, lr
 80061f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ebaa 0303 	sub.w	r3, sl, r3
 80061fc:	0c12      	lsrs	r2, r2, #16
 80061fe:	f8dc a000 	ldr.w	sl, [ip]
 8006202:	fb06 e202 	mla	r2, r6, r2, lr
 8006206:	fa13 f38a 	uxtah	r3, r3, sl
 800620a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800620e:	fa1f fa82 	uxth.w	sl, r2
 8006212:	f8dc 2000 	ldr.w	r2, [ip]
 8006216:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800621a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006224:	4581      	cmp	r9, r0
 8006226:	f84c 3b04 	str.w	r3, [ip], #4
 800622a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800622e:	d2db      	bcs.n	80061e8 <quorem+0x44>
 8006230:	f855 300b 	ldr.w	r3, [r5, fp]
 8006234:	b92b      	cbnz	r3, 8006242 <quorem+0x9e>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	3b04      	subs	r3, #4
 800623a:	429d      	cmp	r5, r3
 800623c:	461a      	mov	r2, r3
 800623e:	d32e      	bcc.n	800629e <quorem+0xfa>
 8006240:	613c      	str	r4, [r7, #16]
 8006242:	4638      	mov	r0, r7
 8006244:	f001 f8c0 	bl	80073c8 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	db24      	blt.n	8006296 <quorem+0xf2>
 800624c:	3601      	adds	r6, #1
 800624e:	4628      	mov	r0, r5
 8006250:	f04f 0c00 	mov.w	ip, #0
 8006254:	f858 2b04 	ldr.w	r2, [r8], #4
 8006258:	f8d0 e000 	ldr.w	lr, [r0]
 800625c:	b293      	uxth	r3, r2
 800625e:	ebac 0303 	sub.w	r3, ip, r3
 8006262:	0c12      	lsrs	r2, r2, #16
 8006264:	fa13 f38e 	uxtah	r3, r3, lr
 8006268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800626c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006276:	45c1      	cmp	r9, r8
 8006278:	f840 3b04 	str.w	r3, [r0], #4
 800627c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006280:	d2e8      	bcs.n	8006254 <quorem+0xb0>
 8006282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628a:	b922      	cbnz	r2, 8006296 <quorem+0xf2>
 800628c:	3b04      	subs	r3, #4
 800628e:	429d      	cmp	r5, r3
 8006290:	461a      	mov	r2, r3
 8006292:	d30a      	bcc.n	80062aa <quorem+0x106>
 8006294:	613c      	str	r4, [r7, #16]
 8006296:	4630      	mov	r0, r6
 8006298:	b003      	add	sp, #12
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	d1cc      	bne.n	8006240 <quorem+0x9c>
 80062a6:	3c01      	subs	r4, #1
 80062a8:	e7c7      	b.n	800623a <quorem+0x96>
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1f0      	bne.n	8006294 <quorem+0xf0>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	e7eb      	b.n	800628e <quorem+0xea>
 80062b6:	2000      	movs	r0, #0
 80062b8:	e7ee      	b.n	8006298 <quorem+0xf4>
 80062ba:	0000      	movs	r0, r0
 80062bc:	0000      	movs	r0, r0
	...

080062c0 <_dtoa_r>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	ed2d 8b02 	vpush	{d8}
 80062c8:	ec57 6b10 	vmov	r6, r7, d0
 80062cc:	b095      	sub	sp, #84	; 0x54
 80062ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062d4:	9105      	str	r1, [sp, #20]
 80062d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80062da:	4604      	mov	r4, r0
 80062dc:	9209      	str	r2, [sp, #36]	; 0x24
 80062de:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e0:	b975      	cbnz	r5, 8006300 <_dtoa_r+0x40>
 80062e2:	2010      	movs	r0, #16
 80062e4:	f000 fddc 	bl	8006ea0 <malloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6260      	str	r0, [r4, #36]	; 0x24
 80062ec:	b920      	cbnz	r0, 80062f8 <_dtoa_r+0x38>
 80062ee:	4bb2      	ldr	r3, [pc, #712]	; (80065b8 <_dtoa_r+0x2f8>)
 80062f0:	21ea      	movs	r1, #234	; 0xea
 80062f2:	48b2      	ldr	r0, [pc, #712]	; (80065bc <_dtoa_r+0x2fc>)
 80062f4:	f001 fa32 	bl	800775c <__assert_func>
 80062f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062fc:	6005      	str	r5, [r0, #0]
 80062fe:	60c5      	str	r5, [r0, #12]
 8006300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	b151      	cbz	r1, 800631c <_dtoa_r+0x5c>
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	604a      	str	r2, [r1, #4]
 800630a:	2301      	movs	r3, #1
 800630c:	4093      	lsls	r3, r2
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fe1b 	bl	8006f4c <_Bfree>
 8006316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	1e3b      	subs	r3, r7, #0
 800631e:	bfb9      	ittee	lt
 8006320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006324:	9303      	strlt	r3, [sp, #12]
 8006326:	2300      	movge	r3, #0
 8006328:	f8c8 3000 	strge.w	r3, [r8]
 800632c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006330:	4ba3      	ldr	r3, [pc, #652]	; (80065c0 <_dtoa_r+0x300>)
 8006332:	bfbc      	itt	lt
 8006334:	2201      	movlt	r2, #1
 8006336:	f8c8 2000 	strlt.w	r2, [r8]
 800633a:	ea33 0309 	bics.w	r3, r3, r9
 800633e:	d11b      	bne.n	8006378 <_dtoa_r+0xb8>
 8006340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006342:	f242 730f 	movw	r3, #9999	; 0x270f
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800634c:	4333      	orrs	r3, r6
 800634e:	f000 857a 	beq.w	8006e46 <_dtoa_r+0xb86>
 8006352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006354:	b963      	cbnz	r3, 8006370 <_dtoa_r+0xb0>
 8006356:	4b9b      	ldr	r3, [pc, #620]	; (80065c4 <_dtoa_r+0x304>)
 8006358:	e024      	b.n	80063a4 <_dtoa_r+0xe4>
 800635a:	4b9b      	ldr	r3, [pc, #620]	; (80065c8 <_dtoa_r+0x308>)
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	9800      	ldr	r0, [sp, #0]
 8006366:	b015      	add	sp, #84	; 0x54
 8006368:	ecbd 8b02 	vpop	{d8}
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	4b94      	ldr	r3, [pc, #592]	; (80065c4 <_dtoa_r+0x304>)
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	3303      	adds	r3, #3
 8006376:	e7f3      	b.n	8006360 <_dtoa_r+0xa0>
 8006378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	ec51 0b17 	vmov	r0, r1, d7
 8006382:	2300      	movs	r3, #0
 8006384:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006388:	f7fa fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800638c:	4680      	mov	r8, r0
 800638e:	b158      	cbz	r0, 80063a8 <_dtoa_r+0xe8>
 8006390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006392:	2301      	movs	r3, #1
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8551 	beq.w	8006e40 <_dtoa_r+0xb80>
 800639e:	488b      	ldr	r0, [pc, #556]	; (80065cc <_dtoa_r+0x30c>)
 80063a0:	6018      	str	r0, [r3, #0]
 80063a2:	1e43      	subs	r3, r0, #1
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	e7dd      	b.n	8006364 <_dtoa_r+0xa4>
 80063a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80063ac:	aa12      	add	r2, sp, #72	; 0x48
 80063ae:	a913      	add	r1, sp, #76	; 0x4c
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 f8ad 	bl	8007510 <__d2b>
 80063b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063ba:	4683      	mov	fp, r0
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d07c      	beq.n	80064ba <_dtoa_r+0x1fa>
 80063c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80063ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063da:	4b7d      	ldr	r3, [pc, #500]	; (80065d0 <_dtoa_r+0x310>)
 80063dc:	2200      	movs	r2, #0
 80063de:	4630      	mov	r0, r6
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7f9 ff59 	bl	8000298 <__aeabi_dsub>
 80063e6:	a36e      	add	r3, pc, #440	; (adr r3, 80065a0 <_dtoa_r+0x2e0>)
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f7fa f90c 	bl	8000608 <__aeabi_dmul>
 80063f0:	a36d      	add	r3, pc, #436	; (adr r3, 80065a8 <_dtoa_r+0x2e8>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7f9 ff51 	bl	800029c <__adddf3>
 80063fa:	4606      	mov	r6, r0
 80063fc:	4628      	mov	r0, r5
 80063fe:	460f      	mov	r7, r1
 8006400:	f7fa f898 	bl	8000534 <__aeabi_i2d>
 8006404:	a36a      	add	r3, pc, #424	; (adr r3, 80065b0 <_dtoa_r+0x2f0>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7fa f8fd 	bl	8000608 <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7f9 ff41 	bl	800029c <__adddf3>
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7fa fba3 	bl	8000b68 <__aeabi_d2iz>
 8006422:	2200      	movs	r2, #0
 8006424:	4682      	mov	sl, r0
 8006426:	2300      	movs	r3, #0
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa fb5e 	bl	8000aec <__aeabi_dcmplt>
 8006430:	b148      	cbz	r0, 8006446 <_dtoa_r+0x186>
 8006432:	4650      	mov	r0, sl
 8006434:	f7fa f87e 	bl	8000534 <__aeabi_i2d>
 8006438:	4632      	mov	r2, r6
 800643a:	463b      	mov	r3, r7
 800643c:	f7fa fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006440:	b908      	cbnz	r0, 8006446 <_dtoa_r+0x186>
 8006442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006446:	f1ba 0f16 	cmp.w	sl, #22
 800644a:	d854      	bhi.n	80064f6 <_dtoa_r+0x236>
 800644c:	4b61      	ldr	r3, [pc, #388]	; (80065d4 <_dtoa_r+0x314>)
 800644e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800645a:	f7fa fb47 	bl	8000aec <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d04b      	beq.n	80064fa <_dtoa_r+0x23a>
 8006462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006466:	2300      	movs	r3, #0
 8006468:	930e      	str	r3, [sp, #56]	; 0x38
 800646a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800646c:	1b5d      	subs	r5, r3, r5
 800646e:	1e6b      	subs	r3, r5, #1
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	bf43      	ittte	mi
 8006474:	2300      	movmi	r3, #0
 8006476:	f1c5 0801 	rsbmi	r8, r5, #1
 800647a:	9304      	strmi	r3, [sp, #16]
 800647c:	f04f 0800 	movpl.w	r8, #0
 8006480:	f1ba 0f00 	cmp.w	sl, #0
 8006484:	db3b      	blt.n	80064fe <_dtoa_r+0x23e>
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800648c:	4453      	add	r3, sl
 800648e:	9304      	str	r3, [sp, #16]
 8006490:	2300      	movs	r3, #0
 8006492:	9306      	str	r3, [sp, #24]
 8006494:	9b05      	ldr	r3, [sp, #20]
 8006496:	2b09      	cmp	r3, #9
 8006498:	d869      	bhi.n	800656e <_dtoa_r+0x2ae>
 800649a:	2b05      	cmp	r3, #5
 800649c:	bfc4      	itt	gt
 800649e:	3b04      	subgt	r3, #4
 80064a0:	9305      	strgt	r3, [sp, #20]
 80064a2:	9b05      	ldr	r3, [sp, #20]
 80064a4:	f1a3 0302 	sub.w	r3, r3, #2
 80064a8:	bfcc      	ite	gt
 80064aa:	2500      	movgt	r5, #0
 80064ac:	2501      	movle	r5, #1
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d869      	bhi.n	8006586 <_dtoa_r+0x2c6>
 80064b2:	e8df f003 	tbb	[pc, r3]
 80064b6:	4e2c      	.short	0x4e2c
 80064b8:	5a4c      	.short	0x5a4c
 80064ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064be:	441d      	add	r5, r3
 80064c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	bfc1      	itttt	gt
 80064c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80064d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064d8:	bfda      	itte	le
 80064da:	f1c3 0320 	rsble	r3, r3, #32
 80064de:	fa06 f003 	lslle.w	r0, r6, r3
 80064e2:	4318      	orrgt	r0, r3
 80064e4:	f7fa f816 	bl	8000514 <__aeabi_ui2d>
 80064e8:	2301      	movs	r3, #1
 80064ea:	4606      	mov	r6, r0
 80064ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064f0:	3d01      	subs	r5, #1
 80064f2:	9310      	str	r3, [sp, #64]	; 0x40
 80064f4:	e771      	b.n	80063da <_dtoa_r+0x11a>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7b6      	b.n	8006468 <_dtoa_r+0x1a8>
 80064fa:	900e      	str	r0, [sp, #56]	; 0x38
 80064fc:	e7b5      	b.n	800646a <_dtoa_r+0x1aa>
 80064fe:	f1ca 0300 	rsb	r3, sl, #0
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	2300      	movs	r3, #0
 8006506:	eba8 080a 	sub.w	r8, r8, sl
 800650a:	930d      	str	r3, [sp, #52]	; 0x34
 800650c:	e7c2      	b.n	8006494 <_dtoa_r+0x1d4>
 800650e:	2300      	movs	r3, #0
 8006510:	9308      	str	r3, [sp, #32]
 8006512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	dc39      	bgt.n	800658c <_dtoa_r+0x2cc>
 8006518:	f04f 0901 	mov.w	r9, #1
 800651c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006520:	464b      	mov	r3, r9
 8006522:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006528:	2200      	movs	r2, #0
 800652a:	6042      	str	r2, [r0, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	f102 0614 	add.w	r6, r2, #20
 8006532:	429e      	cmp	r6, r3
 8006534:	6841      	ldr	r1, [r0, #4]
 8006536:	d92f      	bls.n	8006598 <_dtoa_r+0x2d8>
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fcc7 	bl	8006ecc <_Balloc>
 800653e:	9000      	str	r0, [sp, #0]
 8006540:	2800      	cmp	r0, #0
 8006542:	d14b      	bne.n	80065dc <_dtoa_r+0x31c>
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <_dtoa_r+0x318>)
 8006546:	4602      	mov	r2, r0
 8006548:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800654c:	e6d1      	b.n	80062f2 <_dtoa_r+0x32>
 800654e:	2301      	movs	r3, #1
 8006550:	e7de      	b.n	8006510 <_dtoa_r+0x250>
 8006552:	2300      	movs	r3, #0
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006558:	eb0a 0903 	add.w	r9, sl, r3
 800655c:	f109 0301 	add.w	r3, r9, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	bfb8      	it	lt
 8006566:	2301      	movlt	r3, #1
 8006568:	e7dd      	b.n	8006526 <_dtoa_r+0x266>
 800656a:	2301      	movs	r3, #1
 800656c:	e7f2      	b.n	8006554 <_dtoa_r+0x294>
 800656e:	2501      	movs	r5, #1
 8006570:	2300      	movs	r3, #0
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	9508      	str	r5, [sp, #32]
 8006576:	f04f 39ff 	mov.w	r9, #4294967295
 800657a:	2200      	movs	r2, #0
 800657c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006580:	2312      	movs	r3, #18
 8006582:	9209      	str	r2, [sp, #36]	; 0x24
 8006584:	e7cf      	b.n	8006526 <_dtoa_r+0x266>
 8006586:	2301      	movs	r3, #1
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	e7f4      	b.n	8006576 <_dtoa_r+0x2b6>
 800658c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006590:	f8cd 9004 	str.w	r9, [sp, #4]
 8006594:	464b      	mov	r3, r9
 8006596:	e7c6      	b.n	8006526 <_dtoa_r+0x266>
 8006598:	3101      	adds	r1, #1
 800659a:	6041      	str	r1, [r0, #4]
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	e7c6      	b.n	800652e <_dtoa_r+0x26e>
 80065a0:	636f4361 	.word	0x636f4361
 80065a4:	3fd287a7 	.word	0x3fd287a7
 80065a8:	8b60c8b3 	.word	0x8b60c8b3
 80065ac:	3fc68a28 	.word	0x3fc68a28
 80065b0:	509f79fb 	.word	0x509f79fb
 80065b4:	3fd34413 	.word	0x3fd34413
 80065b8:	08009311 	.word	0x08009311
 80065bc:	08009328 	.word	0x08009328
 80065c0:	7ff00000 	.word	0x7ff00000
 80065c4:	0800930d 	.word	0x0800930d
 80065c8:	08009304 	.word	0x08009304
 80065cc:	080092e1 	.word	0x080092e1
 80065d0:	3ff80000 	.word	0x3ff80000
 80065d4:	08009420 	.word	0x08009420
 80065d8:	08009387 	.word	0x08009387
 80065dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065de:	9a00      	ldr	r2, [sp, #0]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	2b0e      	cmp	r3, #14
 80065e6:	f200 80ad 	bhi.w	8006744 <_dtoa_r+0x484>
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	f000 80aa 	beq.w	8006744 <_dtoa_r+0x484>
 80065f0:	f1ba 0f00 	cmp.w	sl, #0
 80065f4:	dd36      	ble.n	8006664 <_dtoa_r+0x3a4>
 80065f6:	4ac3      	ldr	r2, [pc, #780]	; (8006904 <_dtoa_r+0x644>)
 80065f8:	f00a 030f 	and.w	r3, sl, #15
 80065fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006600:	ed93 7b00 	vldr	d7, [r3]
 8006604:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006608:	ea4f 172a 	mov.w	r7, sl, asr #4
 800660c:	eeb0 8a47 	vmov.f32	s16, s14
 8006610:	eef0 8a67 	vmov.f32	s17, s15
 8006614:	d016      	beq.n	8006644 <_dtoa_r+0x384>
 8006616:	4bbc      	ldr	r3, [pc, #752]	; (8006908 <_dtoa_r+0x648>)
 8006618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800661c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006620:	f7fa f91c 	bl	800085c <__aeabi_ddiv>
 8006624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006628:	f007 070f 	and.w	r7, r7, #15
 800662c:	2503      	movs	r5, #3
 800662e:	4eb6      	ldr	r6, [pc, #728]	; (8006908 <_dtoa_r+0x648>)
 8006630:	b957      	cbnz	r7, 8006648 <_dtoa_r+0x388>
 8006632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006636:	ec53 2b18 	vmov	r2, r3, d8
 800663a:	f7fa f90f 	bl	800085c <__aeabi_ddiv>
 800663e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006642:	e029      	b.n	8006698 <_dtoa_r+0x3d8>
 8006644:	2502      	movs	r5, #2
 8006646:	e7f2      	b.n	800662e <_dtoa_r+0x36e>
 8006648:	07f9      	lsls	r1, r7, #31
 800664a:	d508      	bpl.n	800665e <_dtoa_r+0x39e>
 800664c:	ec51 0b18 	vmov	r0, r1, d8
 8006650:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006654:	f7f9 ffd8 	bl	8000608 <__aeabi_dmul>
 8006658:	ec41 0b18 	vmov	d8, r0, r1
 800665c:	3501      	adds	r5, #1
 800665e:	107f      	asrs	r7, r7, #1
 8006660:	3608      	adds	r6, #8
 8006662:	e7e5      	b.n	8006630 <_dtoa_r+0x370>
 8006664:	f000 80a6 	beq.w	80067b4 <_dtoa_r+0x4f4>
 8006668:	f1ca 0600 	rsb	r6, sl, #0
 800666c:	4ba5      	ldr	r3, [pc, #660]	; (8006904 <_dtoa_r+0x644>)
 800666e:	4fa6      	ldr	r7, [pc, #664]	; (8006908 <_dtoa_r+0x648>)
 8006670:	f006 020f 	and.w	r2, r6, #15
 8006674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006680:	f7f9 ffc2 	bl	8000608 <__aeabi_dmul>
 8006684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006688:	1136      	asrs	r6, r6, #4
 800668a:	2300      	movs	r3, #0
 800668c:	2502      	movs	r5, #2
 800668e:	2e00      	cmp	r6, #0
 8006690:	f040 8085 	bne.w	800679e <_dtoa_r+0x4de>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1d2      	bne.n	800663e <_dtoa_r+0x37e>
 8006698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 808c 	beq.w	80067b8 <_dtoa_r+0x4f8>
 80066a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066a4:	4b99      	ldr	r3, [pc, #612]	; (800690c <_dtoa_r+0x64c>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7fa fa1e 	bl	8000aec <__aeabi_dcmplt>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f000 8081 	beq.w	80067b8 <_dtoa_r+0x4f8>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d07d      	beq.n	80067b8 <_dtoa_r+0x4f8>
 80066bc:	f1b9 0f00 	cmp.w	r9, #0
 80066c0:	dd3c      	ble.n	800673c <_dtoa_r+0x47c>
 80066c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	2200      	movs	r2, #0
 80066ca:	4b91      	ldr	r3, [pc, #580]	; (8006910 <_dtoa_r+0x650>)
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7f9 ff9a 	bl	8000608 <__aeabi_dmul>
 80066d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d8:	3501      	adds	r5, #1
 80066da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80066de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7f9 ff26 	bl	8000534 <__aeabi_i2d>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7f9 ff8c 	bl	8000608 <__aeabi_dmul>
 80066f0:	4b88      	ldr	r3, [pc, #544]	; (8006914 <_dtoa_r+0x654>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	f7f9 fdd2 	bl	800029c <__adddf3>
 80066f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006700:	9303      	str	r3, [sp, #12]
 8006702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006704:	2b00      	cmp	r3, #0
 8006706:	d15c      	bne.n	80067c2 <_dtoa_r+0x502>
 8006708:	4b83      	ldr	r3, [pc, #524]	; (8006918 <_dtoa_r+0x658>)
 800670a:	2200      	movs	r2, #0
 800670c:	4630      	mov	r0, r6
 800670e:	4639      	mov	r1, r7
 8006710:	f7f9 fdc2 	bl	8000298 <__aeabi_dsub>
 8006714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006718:	4606      	mov	r6, r0
 800671a:	460f      	mov	r7, r1
 800671c:	f7fa fa04 	bl	8000b28 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	f040 8296 	bne.w	8006c52 <_dtoa_r+0x992>
 8006726:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800672a:	4630      	mov	r0, r6
 800672c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006730:	4639      	mov	r1, r7
 8006732:	f7fa f9db 	bl	8000aec <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	f040 8288 	bne.w	8006c4c <_dtoa_r+0x98c>
 800673c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006746:	2b00      	cmp	r3, #0
 8006748:	f2c0 8158 	blt.w	80069fc <_dtoa_r+0x73c>
 800674c:	f1ba 0f0e 	cmp.w	sl, #14
 8006750:	f300 8154 	bgt.w	80069fc <_dtoa_r+0x73c>
 8006754:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <_dtoa_r+0x644>)
 8006756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800675a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	f280 80e3 	bge.w	800692c <_dtoa_r+0x66c>
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f300 80df 	bgt.w	800692c <_dtoa_r+0x66c>
 800676e:	f040 826d 	bne.w	8006c4c <_dtoa_r+0x98c>
 8006772:	4b69      	ldr	r3, [pc, #420]	; (8006918 <_dtoa_r+0x658>)
 8006774:	2200      	movs	r2, #0
 8006776:	4640      	mov	r0, r8
 8006778:	4649      	mov	r1, r9
 800677a:	f7f9 ff45 	bl	8000608 <__aeabi_dmul>
 800677e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006782:	f7fa f9c7 	bl	8000b14 <__aeabi_dcmpge>
 8006786:	9e01      	ldr	r6, [sp, #4]
 8006788:	4637      	mov	r7, r6
 800678a:	2800      	cmp	r0, #0
 800678c:	f040 8243 	bne.w	8006c16 <_dtoa_r+0x956>
 8006790:	9d00      	ldr	r5, [sp, #0]
 8006792:	2331      	movs	r3, #49	; 0x31
 8006794:	f805 3b01 	strb.w	r3, [r5], #1
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	e23f      	b.n	8006c1e <_dtoa_r+0x95e>
 800679e:	07f2      	lsls	r2, r6, #31
 80067a0:	d505      	bpl.n	80067ae <_dtoa_r+0x4ee>
 80067a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a6:	f7f9 ff2f 	bl	8000608 <__aeabi_dmul>
 80067aa:	3501      	adds	r5, #1
 80067ac:	2301      	movs	r3, #1
 80067ae:	1076      	asrs	r6, r6, #1
 80067b0:	3708      	adds	r7, #8
 80067b2:	e76c      	b.n	800668e <_dtoa_r+0x3ce>
 80067b4:	2502      	movs	r5, #2
 80067b6:	e76f      	b.n	8006698 <_dtoa_r+0x3d8>
 80067b8:	9b01      	ldr	r3, [sp, #4]
 80067ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80067be:	930c      	str	r3, [sp, #48]	; 0x30
 80067c0:	e78d      	b.n	80066de <_dtoa_r+0x41e>
 80067c2:	9900      	ldr	r1, [sp, #0]
 80067c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c8:	4b4e      	ldr	r3, [pc, #312]	; (8006904 <_dtoa_r+0x644>)
 80067ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067ce:	4401      	add	r1, r0
 80067d0:	9102      	str	r1, [sp, #8]
 80067d2:	9908      	ldr	r1, [sp, #32]
 80067d4:	eeb0 8a47 	vmov.f32	s16, s14
 80067d8:	eef0 8a67 	vmov.f32	s17, s15
 80067dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d045      	beq.n	8006874 <_dtoa_r+0x5b4>
 80067e8:	494c      	ldr	r1, [pc, #304]	; (800691c <_dtoa_r+0x65c>)
 80067ea:	2000      	movs	r0, #0
 80067ec:	f7fa f836 	bl	800085c <__aeabi_ddiv>
 80067f0:	ec53 2b18 	vmov	r2, r3, d8
 80067f4:	f7f9 fd50 	bl	8000298 <__aeabi_dsub>
 80067f8:	9d00      	ldr	r5, [sp, #0]
 80067fa:	ec41 0b18 	vmov	d8, r0, r1
 80067fe:	4639      	mov	r1, r7
 8006800:	4630      	mov	r0, r6
 8006802:	f7fa f9b1 	bl	8000b68 <__aeabi_d2iz>
 8006806:	900c      	str	r0, [sp, #48]	; 0x30
 8006808:	f7f9 fe94 	bl	8000534 <__aeabi_i2d>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7f9 fd40 	bl	8000298 <__aeabi_dsub>
 8006818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800681a:	3330      	adds	r3, #48	; 0x30
 800681c:	f805 3b01 	strb.w	r3, [r5], #1
 8006820:	ec53 2b18 	vmov	r2, r3, d8
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	f7fa f960 	bl	8000aec <__aeabi_dcmplt>
 800682c:	2800      	cmp	r0, #0
 800682e:	d165      	bne.n	80068fc <_dtoa_r+0x63c>
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	4935      	ldr	r1, [pc, #212]	; (800690c <_dtoa_r+0x64c>)
 8006836:	2000      	movs	r0, #0
 8006838:	f7f9 fd2e 	bl	8000298 <__aeabi_dsub>
 800683c:	ec53 2b18 	vmov	r2, r3, d8
 8006840:	f7fa f954 	bl	8000aec <__aeabi_dcmplt>
 8006844:	2800      	cmp	r0, #0
 8006846:	f040 80b9 	bne.w	80069bc <_dtoa_r+0x6fc>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	429d      	cmp	r5, r3
 800684e:	f43f af75 	beq.w	800673c <_dtoa_r+0x47c>
 8006852:	4b2f      	ldr	r3, [pc, #188]	; (8006910 <_dtoa_r+0x650>)
 8006854:	ec51 0b18 	vmov	r0, r1, d8
 8006858:	2200      	movs	r2, #0
 800685a:	f7f9 fed5 	bl	8000608 <__aeabi_dmul>
 800685e:	4b2c      	ldr	r3, [pc, #176]	; (8006910 <_dtoa_r+0x650>)
 8006860:	ec41 0b18 	vmov	d8, r0, r1
 8006864:	2200      	movs	r2, #0
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	f7f9 fecd 	bl	8000608 <__aeabi_dmul>
 800686e:	4606      	mov	r6, r0
 8006870:	460f      	mov	r7, r1
 8006872:	e7c4      	b.n	80067fe <_dtoa_r+0x53e>
 8006874:	ec51 0b17 	vmov	r0, r1, d7
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	9b02      	ldr	r3, [sp, #8]
 800687e:	9d00      	ldr	r5, [sp, #0]
 8006880:	930c      	str	r3, [sp, #48]	; 0x30
 8006882:	ec41 0b18 	vmov	d8, r0, r1
 8006886:	4639      	mov	r1, r7
 8006888:	4630      	mov	r0, r6
 800688a:	f7fa f96d 	bl	8000b68 <__aeabi_d2iz>
 800688e:	9011      	str	r0, [sp, #68]	; 0x44
 8006890:	f7f9 fe50 	bl	8000534 <__aeabi_i2d>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7f9 fcfc 	bl	8000298 <__aeabi_dsub>
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	3330      	adds	r3, #48	; 0x30
 80068a4:	f805 3b01 	strb.w	r3, [r5], #1
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	429d      	cmp	r5, r3
 80068ac:	4606      	mov	r6, r0
 80068ae:	460f      	mov	r7, r1
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	d134      	bne.n	8006920 <_dtoa_r+0x660>
 80068b6:	4b19      	ldr	r3, [pc, #100]	; (800691c <_dtoa_r+0x65c>)
 80068b8:	ec51 0b18 	vmov	r0, r1, d8
 80068bc:	f7f9 fcee 	bl	800029c <__adddf3>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4630      	mov	r0, r6
 80068c6:	4639      	mov	r1, r7
 80068c8:	f7fa f92e 	bl	8000b28 <__aeabi_dcmpgt>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d175      	bne.n	80069bc <_dtoa_r+0x6fc>
 80068d0:	ec53 2b18 	vmov	r2, r3, d8
 80068d4:	4911      	ldr	r1, [pc, #68]	; (800691c <_dtoa_r+0x65c>)
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7f9 fcde 	bl	8000298 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f902 	bl	8000aec <__aeabi_dcmplt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f43f af27 	beq.w	800673c <_dtoa_r+0x47c>
 80068ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f0:	1e6b      	subs	r3, r5, #1
 80068f2:	930c      	str	r3, [sp, #48]	; 0x30
 80068f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068f8:	2b30      	cmp	r3, #48	; 0x30
 80068fa:	d0f8      	beq.n	80068ee <_dtoa_r+0x62e>
 80068fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006900:	e04a      	b.n	8006998 <_dtoa_r+0x6d8>
 8006902:	bf00      	nop
 8006904:	08009420 	.word	0x08009420
 8006908:	080093f8 	.word	0x080093f8
 800690c:	3ff00000 	.word	0x3ff00000
 8006910:	40240000 	.word	0x40240000
 8006914:	401c0000 	.word	0x401c0000
 8006918:	40140000 	.word	0x40140000
 800691c:	3fe00000 	.word	0x3fe00000
 8006920:	4baf      	ldr	r3, [pc, #700]	; (8006be0 <_dtoa_r+0x920>)
 8006922:	f7f9 fe71 	bl	8000608 <__aeabi_dmul>
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	e7ac      	b.n	8006886 <_dtoa_r+0x5c6>
 800692c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006930:	9d00      	ldr	r5, [sp, #0]
 8006932:	4642      	mov	r2, r8
 8006934:	464b      	mov	r3, r9
 8006936:	4630      	mov	r0, r6
 8006938:	4639      	mov	r1, r7
 800693a:	f7f9 ff8f 	bl	800085c <__aeabi_ddiv>
 800693e:	f7fa f913 	bl	8000b68 <__aeabi_d2iz>
 8006942:	9002      	str	r0, [sp, #8]
 8006944:	f7f9 fdf6 	bl	8000534 <__aeabi_i2d>
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	f7f9 fe5c 	bl	8000608 <__aeabi_dmul>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4630      	mov	r0, r6
 8006956:	4639      	mov	r1, r7
 8006958:	f7f9 fc9e 	bl	8000298 <__aeabi_dsub>
 800695c:	9e02      	ldr	r6, [sp, #8]
 800695e:	9f01      	ldr	r7, [sp, #4]
 8006960:	3630      	adds	r6, #48	; 0x30
 8006962:	f805 6b01 	strb.w	r6, [r5], #1
 8006966:	9e00      	ldr	r6, [sp, #0]
 8006968:	1bae      	subs	r6, r5, r6
 800696a:	42b7      	cmp	r7, r6
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	d137      	bne.n	80069e2 <_dtoa_r+0x722>
 8006972:	f7f9 fc93 	bl	800029c <__adddf3>
 8006976:	4642      	mov	r2, r8
 8006978:	464b      	mov	r3, r9
 800697a:	4606      	mov	r6, r0
 800697c:	460f      	mov	r7, r1
 800697e:	f7fa f8d3 	bl	8000b28 <__aeabi_dcmpgt>
 8006982:	b9c8      	cbnz	r0, 80069b8 <_dtoa_r+0x6f8>
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7fa f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006990:	b110      	cbz	r0, 8006998 <_dtoa_r+0x6d8>
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	07d9      	lsls	r1, r3, #31
 8006996:	d40f      	bmi.n	80069b8 <_dtoa_r+0x6f8>
 8006998:	4620      	mov	r0, r4
 800699a:	4659      	mov	r1, fp
 800699c:	f000 fad6 	bl	8006f4c <_Bfree>
 80069a0:	2300      	movs	r3, #0
 80069a2:	702b      	strb	r3, [r5, #0]
 80069a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a6:	f10a 0001 	add.w	r0, sl, #1
 80069aa:	6018      	str	r0, [r3, #0]
 80069ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f43f acd8 	beq.w	8006364 <_dtoa_r+0xa4>
 80069b4:	601d      	str	r5, [r3, #0]
 80069b6:	e4d5      	b.n	8006364 <_dtoa_r+0xa4>
 80069b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80069bc:	462b      	mov	r3, r5
 80069be:	461d      	mov	r5, r3
 80069c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069c4:	2a39      	cmp	r2, #57	; 0x39
 80069c6:	d108      	bne.n	80069da <_dtoa_r+0x71a>
 80069c8:	9a00      	ldr	r2, [sp, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d1f7      	bne.n	80069be <_dtoa_r+0x6fe>
 80069ce:	9a07      	ldr	r2, [sp, #28]
 80069d0:	9900      	ldr	r1, [sp, #0]
 80069d2:	3201      	adds	r2, #1
 80069d4:	9207      	str	r2, [sp, #28]
 80069d6:	2230      	movs	r2, #48	; 0x30
 80069d8:	700a      	strb	r2, [r1, #0]
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	3201      	adds	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	e78c      	b.n	80068fc <_dtoa_r+0x63c>
 80069e2:	4b7f      	ldr	r3, [pc, #508]	; (8006be0 <_dtoa_r+0x920>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	f7f9 fe0f 	bl	8000608 <__aeabi_dmul>
 80069ea:	2200      	movs	r2, #0
 80069ec:	2300      	movs	r3, #0
 80069ee:	4606      	mov	r6, r0
 80069f0:	460f      	mov	r7, r1
 80069f2:	f7fa f871 	bl	8000ad8 <__aeabi_dcmpeq>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d09b      	beq.n	8006932 <_dtoa_r+0x672>
 80069fa:	e7cd      	b.n	8006998 <_dtoa_r+0x6d8>
 80069fc:	9a08      	ldr	r2, [sp, #32]
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	f000 80c4 	beq.w	8006b8c <_dtoa_r+0x8cc>
 8006a04:	9a05      	ldr	r2, [sp, #20]
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	f300 80a8 	bgt.w	8006b5c <_dtoa_r+0x89c>
 8006a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	f000 80a0 	beq.w	8006b54 <_dtoa_r+0x894>
 8006a14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a18:	9e06      	ldr	r6, [sp, #24]
 8006a1a:	4645      	mov	r5, r8
 8006a1c:	9a04      	ldr	r2, [sp, #16]
 8006a1e:	2101      	movs	r1, #1
 8006a20:	441a      	add	r2, r3
 8006a22:	4620      	mov	r0, r4
 8006a24:	4498      	add	r8, r3
 8006a26:	9204      	str	r2, [sp, #16]
 8006a28:	f000 fb4c 	bl	80070c4 <__i2b>
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	dd0b      	ble.n	8006a4a <_dtoa_r+0x78a>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd08      	ble.n	8006a4a <_dtoa_r+0x78a>
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	9a04      	ldr	r2, [sp, #16]
 8006a3c:	bfa8      	it	ge
 8006a3e:	462b      	movge	r3, r5
 8006a40:	eba8 0803 	sub.w	r8, r8, r3
 8006a44:	1aed      	subs	r5, r5, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	b1fb      	cbz	r3, 8006a8e <_dtoa_r+0x7ce>
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 809f 	beq.w	8006b94 <_dtoa_r+0x8d4>
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	dd11      	ble.n	8006a7e <_dtoa_r+0x7be>
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fbec 	bl	800723c <__pow5mult>
 8006a64:	465a      	mov	r2, fp
 8006a66:	4601      	mov	r1, r0
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fb40 	bl	80070f0 <__multiply>
 8006a70:	4659      	mov	r1, fp
 8006a72:	9007      	str	r0, [sp, #28]
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fa69 	bl	8006f4c <_Bfree>
 8006a7a:	9b07      	ldr	r3, [sp, #28]
 8006a7c:	469b      	mov	fp, r3
 8006a7e:	9b06      	ldr	r3, [sp, #24]
 8006a80:	1b9a      	subs	r2, r3, r6
 8006a82:	d004      	beq.n	8006a8e <_dtoa_r+0x7ce>
 8006a84:	4659      	mov	r1, fp
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fbd8 	bl	800723c <__pow5mult>
 8006a8c:	4683      	mov	fp, r0
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fb17 	bl	80070c4 <__i2b>
 8006a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	dd7c      	ble.n	8006b98 <_dtoa_r+0x8d8>
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 fbca 	bl	800723c <__pow5mult>
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	4606      	mov	r6, r0
 8006aae:	dd76      	ble.n	8006b9e <_dtoa_r+0x8de>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9306      	str	r3, [sp, #24]
 8006ab4:	6933      	ldr	r3, [r6, #16]
 8006ab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006aba:	6918      	ldr	r0, [r3, #16]
 8006abc:	f000 fab2 	bl	8007024 <__hi0bits>
 8006ac0:	f1c0 0020 	rsb	r0, r0, #32
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	4418      	add	r0, r3
 8006ac8:	f010 001f 	ands.w	r0, r0, #31
 8006acc:	f000 8086 	beq.w	8006bdc <_dtoa_r+0x91c>
 8006ad0:	f1c0 0320 	rsb	r3, r0, #32
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	dd7f      	ble.n	8006bd8 <_dtoa_r+0x918>
 8006ad8:	f1c0 001c 	rsb	r0, r0, #28
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	4403      	add	r3, r0
 8006ae0:	4480      	add	r8, r0
 8006ae2:	4405      	add	r5, r0
 8006ae4:	9304      	str	r3, [sp, #16]
 8006ae6:	f1b8 0f00 	cmp.w	r8, #0
 8006aea:	dd05      	ble.n	8006af8 <_dtoa_r+0x838>
 8006aec:	4659      	mov	r1, fp
 8006aee:	4642      	mov	r2, r8
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fbfd 	bl	80072f0 <__lshift>
 8006af6:	4683      	mov	fp, r0
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dd05      	ble.n	8006b0a <_dtoa_r+0x84a>
 8006afe:	4631      	mov	r1, r6
 8006b00:	461a      	mov	r2, r3
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fbf4 	bl	80072f0 <__lshift>
 8006b08:	4606      	mov	r6, r0
 8006b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d069      	beq.n	8006be4 <_dtoa_r+0x924>
 8006b10:	4631      	mov	r1, r6
 8006b12:	4658      	mov	r0, fp
 8006b14:	f000 fc58 	bl	80073c8 <__mcmp>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	da63      	bge.n	8006be4 <_dtoa_r+0x924>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4659      	mov	r1, fp
 8006b20:	220a      	movs	r2, #10
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fa34 	bl	8006f90 <__multadd>
 8006b28:	9b08      	ldr	r3, [sp, #32]
 8006b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2e:	4683      	mov	fp, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 818f 	beq.w	8006e54 <_dtoa_r+0xb94>
 8006b36:	4639      	mov	r1, r7
 8006b38:	2300      	movs	r3, #0
 8006b3a:	220a      	movs	r2, #10
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fa27 	bl	8006f90 <__multadd>
 8006b42:	f1b9 0f00 	cmp.w	r9, #0
 8006b46:	4607      	mov	r7, r0
 8006b48:	f300 808e 	bgt.w	8006c68 <_dtoa_r+0x9a8>
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	dc50      	bgt.n	8006bf4 <_dtoa_r+0x934>
 8006b52:	e089      	b.n	8006c68 <_dtoa_r+0x9a8>
 8006b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b5a:	e75d      	b.n	8006a18 <_dtoa_r+0x758>
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	1e5e      	subs	r6, r3, #1
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	42b3      	cmp	r3, r6
 8006b64:	bfbf      	itttt	lt
 8006b66:	9b06      	ldrlt	r3, [sp, #24]
 8006b68:	9606      	strlt	r6, [sp, #24]
 8006b6a:	1af2      	sublt	r2, r6, r3
 8006b6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b6e:	bfb6      	itet	lt
 8006b70:	189b      	addlt	r3, r3, r2
 8006b72:	1b9e      	subge	r6, r3, r6
 8006b74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	bfb8      	it	lt
 8006b7a:	2600      	movlt	r6, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfb5      	itete	lt
 8006b80:	eba8 0503 	sublt.w	r5, r8, r3
 8006b84:	9b01      	ldrge	r3, [sp, #4]
 8006b86:	2300      	movlt	r3, #0
 8006b88:	4645      	movge	r5, r8
 8006b8a:	e747      	b.n	8006a1c <_dtoa_r+0x75c>
 8006b8c:	9e06      	ldr	r6, [sp, #24]
 8006b8e:	9f08      	ldr	r7, [sp, #32]
 8006b90:	4645      	mov	r5, r8
 8006b92:	e74c      	b.n	8006a2e <_dtoa_r+0x76e>
 8006b94:	9a06      	ldr	r2, [sp, #24]
 8006b96:	e775      	b.n	8006a84 <_dtoa_r+0x7c4>
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	dc18      	bgt.n	8006bd0 <_dtoa_r+0x910>
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	b9b3      	cbnz	r3, 8006bd0 <_dtoa_r+0x910>
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba8:	b9a3      	cbnz	r3, 8006bd4 <_dtoa_r+0x914>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	051b      	lsls	r3, r3, #20
 8006bb4:	b12b      	cbz	r3, 8006bc2 <_dtoa_r+0x902>
 8006bb6:	9b04      	ldr	r3, [sp, #16]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	f108 0801 	add.w	r8, r8, #1
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f47f af74 	bne.w	8006ab4 <_dtoa_r+0x7f4>
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e779      	b.n	8006ac4 <_dtoa_r+0x804>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7f6      	b.n	8006bc2 <_dtoa_r+0x902>
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	e7f4      	b.n	8006bc2 <_dtoa_r+0x902>
 8006bd8:	d085      	beq.n	8006ae6 <_dtoa_r+0x826>
 8006bda:	4618      	mov	r0, r3
 8006bdc:	301c      	adds	r0, #28
 8006bde:	e77d      	b.n	8006adc <_dtoa_r+0x81c>
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dc38      	bgt.n	8006c5c <_dtoa_r+0x99c>
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	dd35      	ble.n	8006c5c <_dtoa_r+0x99c>
 8006bf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bf4:	f1b9 0f00 	cmp.w	r9, #0
 8006bf8:	d10d      	bne.n	8006c16 <_dtoa_r+0x956>
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	2205      	movs	r2, #5
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 f9c5 	bl	8006f90 <__multadd>
 8006c06:	4601      	mov	r1, r0
 8006c08:	4606      	mov	r6, r0
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	f000 fbdc 	bl	80073c8 <__mcmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f73f adbd 	bgt.w	8006790 <_dtoa_r+0x4d0>
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	9d00      	ldr	r5, [sp, #0]
 8006c1a:	ea6f 0a03 	mvn.w	sl, r3
 8006c1e:	f04f 0800 	mov.w	r8, #0
 8006c22:	4631      	mov	r1, r6
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 f991 	bl	8006f4c <_Bfree>
 8006c2a:	2f00      	cmp	r7, #0
 8006c2c:	f43f aeb4 	beq.w	8006998 <_dtoa_r+0x6d8>
 8006c30:	f1b8 0f00 	cmp.w	r8, #0
 8006c34:	d005      	beq.n	8006c42 <_dtoa_r+0x982>
 8006c36:	45b8      	cmp	r8, r7
 8006c38:	d003      	beq.n	8006c42 <_dtoa_r+0x982>
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 f985 	bl	8006f4c <_Bfree>
 8006c42:	4639      	mov	r1, r7
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 f981 	bl	8006f4c <_Bfree>
 8006c4a:	e6a5      	b.n	8006998 <_dtoa_r+0x6d8>
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	4637      	mov	r7, r6
 8006c50:	e7e1      	b.n	8006c16 <_dtoa_r+0x956>
 8006c52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c58:	4637      	mov	r7, r6
 8006c5a:	e599      	b.n	8006790 <_dtoa_r+0x4d0>
 8006c5c:	9b08      	ldr	r3, [sp, #32]
 8006c5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80fd 	beq.w	8006e62 <_dtoa_r+0xba2>
 8006c68:	2d00      	cmp	r5, #0
 8006c6a:	dd05      	ble.n	8006c78 <_dtoa_r+0x9b8>
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fb3d 	bl	80072f0 <__lshift>
 8006c76:	4607      	mov	r7, r0
 8006c78:	9b06      	ldr	r3, [sp, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d05c      	beq.n	8006d38 <_dtoa_r+0xa78>
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f923 	bl	8006ecc <_Balloc>
 8006c86:	4605      	mov	r5, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <_dtoa_r+0x9d6>
 8006c8a:	4b80      	ldr	r3, [pc, #512]	; (8006e8c <_dtoa_r+0xbcc>)
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c92:	f7ff bb2e 	b.w	80062f2 <_dtoa_r+0x32>
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	3202      	adds	r2, #2
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	f107 010c 	add.w	r1, r7, #12
 8006ca0:	300c      	adds	r0, #12
 8006ca2:	f000 f905 	bl	8006eb0 <memcpy>
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fb20 	bl	80072f0 <__lshift>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	444b      	add	r3, r9
 8006cba:	9307      	str	r3, [sp, #28]
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	46b8      	mov	r8, r7
 8006cc4:	9306      	str	r3, [sp, #24]
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	9b01      	ldr	r3, [sp, #4]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4658      	mov	r0, fp
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	f7ff fa67 	bl	80061a4 <quorem>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	3330      	adds	r3, #48	; 0x30
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	4641      	mov	r1, r8
 8006cde:	4658      	mov	r0, fp
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	f000 fb71 	bl	80073c8 <__mcmp>
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4681      	mov	r9, r0
 8006cea:	4631      	mov	r1, r6
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fb87 	bl	8007400 <__mdiff>
 8006cf2:	68c2      	ldr	r2, [r0, #12]
 8006cf4:	9b08      	ldr	r3, [sp, #32]
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	bb02      	cbnz	r2, 8006d3c <_dtoa_r+0xa7c>
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f000 fb63 	bl	80073c8 <__mcmp>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	4602      	mov	r2, r0
 8006d06:	4629      	mov	r1, r5
 8006d08:	4620      	mov	r0, r4
 8006d0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d0e:	f000 f91d 	bl	8006f4c <_Bfree>
 8006d12:	9b05      	ldr	r3, [sp, #20]
 8006d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d16:	9d01      	ldr	r5, [sp, #4]
 8006d18:	ea43 0102 	orr.w	r1, r3, r2
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	d10d      	bne.n	8006d40 <_dtoa_r+0xa80>
 8006d24:	2b39      	cmp	r3, #57	; 0x39
 8006d26:	d029      	beq.n	8006d7c <_dtoa_r+0xabc>
 8006d28:	f1b9 0f00 	cmp.w	r9, #0
 8006d2c:	dd01      	ble.n	8006d32 <_dtoa_r+0xa72>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	3331      	adds	r3, #49	; 0x31
 8006d32:	9a02      	ldr	r2, [sp, #8]
 8006d34:	7013      	strb	r3, [r2, #0]
 8006d36:	e774      	b.n	8006c22 <_dtoa_r+0x962>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	e7b9      	b.n	8006cb0 <_dtoa_r+0x9f0>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	e7e2      	b.n	8006d06 <_dtoa_r+0xa46>
 8006d40:	f1b9 0f00 	cmp.w	r9, #0
 8006d44:	db06      	blt.n	8006d54 <_dtoa_r+0xa94>
 8006d46:	9905      	ldr	r1, [sp, #20]
 8006d48:	ea41 0909 	orr.w	r9, r1, r9
 8006d4c:	9906      	ldr	r1, [sp, #24]
 8006d4e:	ea59 0101 	orrs.w	r1, r9, r1
 8006d52:	d120      	bne.n	8006d96 <_dtoa_r+0xad6>
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	ddec      	ble.n	8006d32 <_dtoa_r+0xa72>
 8006d58:	4659      	mov	r1, fp
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	f000 fac6 	bl	80072f0 <__lshift>
 8006d64:	4631      	mov	r1, r6
 8006d66:	4683      	mov	fp, r0
 8006d68:	f000 fb2e 	bl	80073c8 <__mcmp>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	dc02      	bgt.n	8006d78 <_dtoa_r+0xab8>
 8006d72:	d1de      	bne.n	8006d32 <_dtoa_r+0xa72>
 8006d74:	07da      	lsls	r2, r3, #31
 8006d76:	d5dc      	bpl.n	8006d32 <_dtoa_r+0xa72>
 8006d78:	2b39      	cmp	r3, #57	; 0x39
 8006d7a:	d1d8      	bne.n	8006d2e <_dtoa_r+0xa6e>
 8006d7c:	9a02      	ldr	r2, [sp, #8]
 8006d7e:	2339      	movs	r3, #57	; 0x39
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	462b      	mov	r3, r5
 8006d84:	461d      	mov	r5, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d8c:	2a39      	cmp	r2, #57	; 0x39
 8006d8e:	d050      	beq.n	8006e32 <_dtoa_r+0xb72>
 8006d90:	3201      	adds	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e745      	b.n	8006c22 <_dtoa_r+0x962>
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	dd03      	ble.n	8006da2 <_dtoa_r+0xae2>
 8006d9a:	2b39      	cmp	r3, #57	; 0x39
 8006d9c:	d0ee      	beq.n	8006d7c <_dtoa_r+0xabc>
 8006d9e:	3301      	adds	r3, #1
 8006da0:	e7c7      	b.n	8006d32 <_dtoa_r+0xa72>
 8006da2:	9a01      	ldr	r2, [sp, #4]
 8006da4:	9907      	ldr	r1, [sp, #28]
 8006da6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006daa:	428a      	cmp	r2, r1
 8006dac:	d02a      	beq.n	8006e04 <_dtoa_r+0xb44>
 8006dae:	4659      	mov	r1, fp
 8006db0:	2300      	movs	r3, #0
 8006db2:	220a      	movs	r2, #10
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 f8eb 	bl	8006f90 <__multadd>
 8006dba:	45b8      	cmp	r8, r7
 8006dbc:	4683      	mov	fp, r0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	f04f 020a 	mov.w	r2, #10
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4620      	mov	r0, r4
 8006dca:	d107      	bne.n	8006ddc <_dtoa_r+0xb1c>
 8006dcc:	f000 f8e0 	bl	8006f90 <__multadd>
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	e775      	b.n	8006cc8 <_dtoa_r+0xa08>
 8006ddc:	f000 f8d8 	bl	8006f90 <__multadd>
 8006de0:	4639      	mov	r1, r7
 8006de2:	4680      	mov	r8, r0
 8006de4:	2300      	movs	r3, #0
 8006de6:	220a      	movs	r2, #10
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f8d1 	bl	8006f90 <__multadd>
 8006dee:	4607      	mov	r7, r0
 8006df0:	e7f0      	b.n	8006dd4 <_dtoa_r+0xb14>
 8006df2:	f1b9 0f00 	cmp.w	r9, #0
 8006df6:	9a00      	ldr	r2, [sp, #0]
 8006df8:	bfcc      	ite	gt
 8006dfa:	464d      	movgt	r5, r9
 8006dfc:	2501      	movle	r5, #1
 8006dfe:	4415      	add	r5, r2
 8006e00:	f04f 0800 	mov.w	r8, #0
 8006e04:	4659      	mov	r1, fp
 8006e06:	2201      	movs	r2, #1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	f000 fa70 	bl	80072f0 <__lshift>
 8006e10:	4631      	mov	r1, r6
 8006e12:	4683      	mov	fp, r0
 8006e14:	f000 fad8 	bl	80073c8 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dcb2      	bgt.n	8006d82 <_dtoa_r+0xac2>
 8006e1c:	d102      	bne.n	8006e24 <_dtoa_r+0xb64>
 8006e1e:	9b01      	ldr	r3, [sp, #4]
 8006e20:	07db      	lsls	r3, r3, #31
 8006e22:	d4ae      	bmi.n	8006d82 <_dtoa_r+0xac2>
 8006e24:	462b      	mov	r3, r5
 8006e26:	461d      	mov	r5, r3
 8006e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2c:	2a30      	cmp	r2, #48	; 0x30
 8006e2e:	d0fa      	beq.n	8006e26 <_dtoa_r+0xb66>
 8006e30:	e6f7      	b.n	8006c22 <_dtoa_r+0x962>
 8006e32:	9a00      	ldr	r2, [sp, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1a5      	bne.n	8006d84 <_dtoa_r+0xac4>
 8006e38:	f10a 0a01 	add.w	sl, sl, #1
 8006e3c:	2331      	movs	r3, #49	; 0x31
 8006e3e:	e779      	b.n	8006d34 <_dtoa_r+0xa74>
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <_dtoa_r+0xbd0>)
 8006e42:	f7ff baaf 	b.w	80063a4 <_dtoa_r+0xe4>
 8006e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f aa86 	bne.w	800635a <_dtoa_r+0x9a>
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <_dtoa_r+0xbd4>)
 8006e50:	f7ff baa8 	b.w	80063a4 <_dtoa_r+0xe4>
 8006e54:	f1b9 0f00 	cmp.w	r9, #0
 8006e58:	dc03      	bgt.n	8006e62 <_dtoa_r+0xba2>
 8006e5a:	9b05      	ldr	r3, [sp, #20]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	f73f aec9 	bgt.w	8006bf4 <_dtoa_r+0x934>
 8006e62:	9d00      	ldr	r5, [sp, #0]
 8006e64:	4631      	mov	r1, r6
 8006e66:	4658      	mov	r0, fp
 8006e68:	f7ff f99c 	bl	80061a4 <quorem>
 8006e6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e70:	f805 3b01 	strb.w	r3, [r5], #1
 8006e74:	9a00      	ldr	r2, [sp, #0]
 8006e76:	1aaa      	subs	r2, r5, r2
 8006e78:	4591      	cmp	r9, r2
 8006e7a:	ddba      	ble.n	8006df2 <_dtoa_r+0xb32>
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	2300      	movs	r3, #0
 8006e80:	220a      	movs	r2, #10
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 f884 	bl	8006f90 <__multadd>
 8006e88:	4683      	mov	fp, r0
 8006e8a:	e7eb      	b.n	8006e64 <_dtoa_r+0xba4>
 8006e8c:	08009387 	.word	0x08009387
 8006e90:	080092e0 	.word	0x080092e0
 8006e94:	08009304 	.word	0x08009304

08006e98 <_localeconv_r>:
 8006e98:	4800      	ldr	r0, [pc, #0]	; (8006e9c <_localeconv_r+0x4>)
 8006e9a:	4770      	bx	lr
 8006e9c:	20000160 	.word	0x20000160

08006ea0 <malloc>:
 8006ea0:	4b02      	ldr	r3, [pc, #8]	; (8006eac <malloc+0xc>)
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f000 bbef 	b.w	8007688 <_malloc_r>
 8006eaa:	bf00      	nop
 8006eac:	2000000c 	.word	0x2000000c

08006eb0 <memcpy>:
 8006eb0:	440a      	add	r2, r1
 8006eb2:	4291      	cmp	r1, r2
 8006eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eb8:	d100      	bne.n	8006ebc <memcpy+0xc>
 8006eba:	4770      	bx	lr
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ec6:	4291      	cmp	r1, r2
 8006ec8:	d1f9      	bne.n	8006ebe <memcpy+0xe>
 8006eca:	bd10      	pop	{r4, pc}

08006ecc <_Balloc>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	b976      	cbnz	r6, 8006ef4 <_Balloc+0x28>
 8006ed6:	2010      	movs	r0, #16
 8006ed8:	f7ff ffe2 	bl	8006ea0 <malloc>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6260      	str	r0, [r4, #36]	; 0x24
 8006ee0:	b920      	cbnz	r0, 8006eec <_Balloc+0x20>
 8006ee2:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <_Balloc+0x78>)
 8006ee4:	4818      	ldr	r0, [pc, #96]	; (8006f48 <_Balloc+0x7c>)
 8006ee6:	2166      	movs	r1, #102	; 0x66
 8006ee8:	f000 fc38 	bl	800775c <__assert_func>
 8006eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ef0:	6006      	str	r6, [r0, #0]
 8006ef2:	60c6      	str	r6, [r0, #12]
 8006ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ef6:	68f3      	ldr	r3, [r6, #12]
 8006ef8:	b183      	cbz	r3, 8006f1c <_Balloc+0x50>
 8006efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f02:	b9b8      	cbnz	r0, 8006f34 <_Balloc+0x68>
 8006f04:	2101      	movs	r1, #1
 8006f06:	fa01 f605 	lsl.w	r6, r1, r5
 8006f0a:	1d72      	adds	r2, r6, #5
 8006f0c:	0092      	lsls	r2, r2, #2
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fb5a 	bl	80075c8 <_calloc_r>
 8006f14:	b160      	cbz	r0, 8006f30 <_Balloc+0x64>
 8006f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f1a:	e00e      	b.n	8006f3a <_Balloc+0x6e>
 8006f1c:	2221      	movs	r2, #33	; 0x21
 8006f1e:	2104      	movs	r1, #4
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fb51 	bl	80075c8 <_calloc_r>
 8006f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f28:	60f0      	str	r0, [r6, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e4      	bne.n	8006efa <_Balloc+0x2e>
 8006f30:	2000      	movs	r0, #0
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	6802      	ldr	r2, [r0, #0]
 8006f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f40:	e7f7      	b.n	8006f32 <_Balloc+0x66>
 8006f42:	bf00      	nop
 8006f44:	08009311 	.word	0x08009311
 8006f48:	08009398 	.word	0x08009398

08006f4c <_Bfree>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f50:	4605      	mov	r5, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b976      	cbnz	r6, 8006f74 <_Bfree+0x28>
 8006f56:	2010      	movs	r0, #16
 8006f58:	f7ff ffa2 	bl	8006ea0 <malloc>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	6268      	str	r0, [r5, #36]	; 0x24
 8006f60:	b920      	cbnz	r0, 8006f6c <_Bfree+0x20>
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <_Bfree+0x3c>)
 8006f64:	4809      	ldr	r0, [pc, #36]	; (8006f8c <_Bfree+0x40>)
 8006f66:	218a      	movs	r1, #138	; 0x8a
 8006f68:	f000 fbf8 	bl	800775c <__assert_func>
 8006f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f70:	6006      	str	r6, [r0, #0]
 8006f72:	60c6      	str	r6, [r0, #12]
 8006f74:	b13c      	cbz	r4, 8006f86 <_Bfree+0x3a>
 8006f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f78:	6862      	ldr	r2, [r4, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f80:	6021      	str	r1, [r4, #0]
 8006f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	08009311 	.word	0x08009311
 8006f8c:	08009398 	.word	0x08009398

08006f90 <__multadd>:
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	690e      	ldr	r6, [r1, #16]
 8006f96:	4607      	mov	r7, r0
 8006f98:	4698      	mov	r8, r3
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	f101 0014 	add.w	r0, r1, #20
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6805      	ldr	r5, [r0, #0]
 8006fa4:	b2a9      	uxth	r1, r5
 8006fa6:	fb02 8101 	mla	r1, r2, r1, r8
 8006faa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006fae:	0c2d      	lsrs	r5, r5, #16
 8006fb0:	fb02 c505 	mla	r5, r2, r5, ip
 8006fb4:	b289      	uxth	r1, r1
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006fbc:	429e      	cmp	r6, r3
 8006fbe:	f840 1b04 	str.w	r1, [r0], #4
 8006fc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006fc6:	dcec      	bgt.n	8006fa2 <__multadd+0x12>
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	d022      	beq.n	8007014 <__multadd+0x84>
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	42b3      	cmp	r3, r6
 8006fd2:	dc19      	bgt.n	8007008 <__multadd+0x78>
 8006fd4:	6861      	ldr	r1, [r4, #4]
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	3101      	adds	r1, #1
 8006fda:	f7ff ff77 	bl	8006ecc <_Balloc>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	b928      	cbnz	r0, 8006fee <__multadd+0x5e>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <__multadd+0x8c>)
 8006fe6:	480e      	ldr	r0, [pc, #56]	; (8007020 <__multadd+0x90>)
 8006fe8:	21b5      	movs	r1, #181	; 0xb5
 8006fea:	f000 fbb7 	bl	800775c <__assert_func>
 8006fee:	6922      	ldr	r2, [r4, #16]
 8006ff0:	3202      	adds	r2, #2
 8006ff2:	f104 010c 	add.w	r1, r4, #12
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	f7ff ff59 	bl	8006eb0 <memcpy>
 8006ffe:	4621      	mov	r1, r4
 8007000:	4638      	mov	r0, r7
 8007002:	f7ff ffa3 	bl	8006f4c <_Bfree>
 8007006:	462c      	mov	r4, r5
 8007008:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800700c:	3601      	adds	r6, #1
 800700e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007012:	6126      	str	r6, [r4, #16]
 8007014:	4620      	mov	r0, r4
 8007016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701a:	bf00      	nop
 800701c:	08009387 	.word	0x08009387
 8007020:	08009398 	.word	0x08009398

08007024 <__hi0bits>:
 8007024:	0c03      	lsrs	r3, r0, #16
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	b9d3      	cbnz	r3, 8007060 <__hi0bits+0x3c>
 800702a:	0400      	lsls	r0, r0, #16
 800702c:	2310      	movs	r3, #16
 800702e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007032:	bf04      	itt	eq
 8007034:	0200      	lsleq	r0, r0, #8
 8007036:	3308      	addeq	r3, #8
 8007038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800703c:	bf04      	itt	eq
 800703e:	0100      	lsleq	r0, r0, #4
 8007040:	3304      	addeq	r3, #4
 8007042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007046:	bf04      	itt	eq
 8007048:	0080      	lsleq	r0, r0, #2
 800704a:	3302      	addeq	r3, #2
 800704c:	2800      	cmp	r0, #0
 800704e:	db05      	blt.n	800705c <__hi0bits+0x38>
 8007050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007054:	f103 0301 	add.w	r3, r3, #1
 8007058:	bf08      	it	eq
 800705a:	2320      	moveq	r3, #32
 800705c:	4618      	mov	r0, r3
 800705e:	4770      	bx	lr
 8007060:	2300      	movs	r3, #0
 8007062:	e7e4      	b.n	800702e <__hi0bits+0xa>

08007064 <__lo0bits>:
 8007064:	6803      	ldr	r3, [r0, #0]
 8007066:	f013 0207 	ands.w	r2, r3, #7
 800706a:	4601      	mov	r1, r0
 800706c:	d00b      	beq.n	8007086 <__lo0bits+0x22>
 800706e:	07da      	lsls	r2, r3, #31
 8007070:	d424      	bmi.n	80070bc <__lo0bits+0x58>
 8007072:	0798      	lsls	r0, r3, #30
 8007074:	bf49      	itett	mi
 8007076:	085b      	lsrmi	r3, r3, #1
 8007078:	089b      	lsrpl	r3, r3, #2
 800707a:	2001      	movmi	r0, #1
 800707c:	600b      	strmi	r3, [r1, #0]
 800707e:	bf5c      	itt	pl
 8007080:	600b      	strpl	r3, [r1, #0]
 8007082:	2002      	movpl	r0, #2
 8007084:	4770      	bx	lr
 8007086:	b298      	uxth	r0, r3
 8007088:	b9b0      	cbnz	r0, 80070b8 <__lo0bits+0x54>
 800708a:	0c1b      	lsrs	r3, r3, #16
 800708c:	2010      	movs	r0, #16
 800708e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007092:	bf04      	itt	eq
 8007094:	0a1b      	lsreq	r3, r3, #8
 8007096:	3008      	addeq	r0, #8
 8007098:	071a      	lsls	r2, r3, #28
 800709a:	bf04      	itt	eq
 800709c:	091b      	lsreq	r3, r3, #4
 800709e:	3004      	addeq	r0, #4
 80070a0:	079a      	lsls	r2, r3, #30
 80070a2:	bf04      	itt	eq
 80070a4:	089b      	lsreq	r3, r3, #2
 80070a6:	3002      	addeq	r0, #2
 80070a8:	07da      	lsls	r2, r3, #31
 80070aa:	d403      	bmi.n	80070b4 <__lo0bits+0x50>
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	f100 0001 	add.w	r0, r0, #1
 80070b2:	d005      	beq.n	80070c0 <__lo0bits+0x5c>
 80070b4:	600b      	str	r3, [r1, #0]
 80070b6:	4770      	bx	lr
 80070b8:	4610      	mov	r0, r2
 80070ba:	e7e8      	b.n	800708e <__lo0bits+0x2a>
 80070bc:	2000      	movs	r0, #0
 80070be:	4770      	bx	lr
 80070c0:	2020      	movs	r0, #32
 80070c2:	4770      	bx	lr

080070c4 <__i2b>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	2101      	movs	r1, #1
 80070ca:	f7ff feff 	bl	8006ecc <_Balloc>
 80070ce:	4602      	mov	r2, r0
 80070d0:	b928      	cbnz	r0, 80070de <__i2b+0x1a>
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <__i2b+0x24>)
 80070d4:	4805      	ldr	r0, [pc, #20]	; (80070ec <__i2b+0x28>)
 80070d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070da:	f000 fb3f 	bl	800775c <__assert_func>
 80070de:	2301      	movs	r3, #1
 80070e0:	6144      	str	r4, [r0, #20]
 80070e2:	6103      	str	r3, [r0, #16]
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	bf00      	nop
 80070e8:	08009387 	.word	0x08009387
 80070ec:	08009398 	.word	0x08009398

080070f0 <__multiply>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4614      	mov	r4, r2
 80070f6:	690a      	ldr	r2, [r1, #16]
 80070f8:	6923      	ldr	r3, [r4, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	bfb8      	it	lt
 80070fe:	460b      	movlt	r3, r1
 8007100:	460d      	mov	r5, r1
 8007102:	bfbc      	itt	lt
 8007104:	4625      	movlt	r5, r4
 8007106:	461c      	movlt	r4, r3
 8007108:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800710c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007110:	68ab      	ldr	r3, [r5, #8]
 8007112:	6869      	ldr	r1, [r5, #4]
 8007114:	eb0a 0709 	add.w	r7, sl, r9
 8007118:	42bb      	cmp	r3, r7
 800711a:	b085      	sub	sp, #20
 800711c:	bfb8      	it	lt
 800711e:	3101      	addlt	r1, #1
 8007120:	f7ff fed4 	bl	8006ecc <_Balloc>
 8007124:	b930      	cbnz	r0, 8007134 <__multiply+0x44>
 8007126:	4602      	mov	r2, r0
 8007128:	4b42      	ldr	r3, [pc, #264]	; (8007234 <__multiply+0x144>)
 800712a:	4843      	ldr	r0, [pc, #268]	; (8007238 <__multiply+0x148>)
 800712c:	f240 115d 	movw	r1, #349	; 0x15d
 8007130:	f000 fb14 	bl	800775c <__assert_func>
 8007134:	f100 0614 	add.w	r6, r0, #20
 8007138:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800713c:	4633      	mov	r3, r6
 800713e:	2200      	movs	r2, #0
 8007140:	4543      	cmp	r3, r8
 8007142:	d31e      	bcc.n	8007182 <__multiply+0x92>
 8007144:	f105 0c14 	add.w	ip, r5, #20
 8007148:	f104 0314 	add.w	r3, r4, #20
 800714c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007150:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	ebac 0205 	sub.w	r2, ip, r5
 800715a:	3a15      	subs	r2, #21
 800715c:	f022 0203 	bic.w	r2, r2, #3
 8007160:	3204      	adds	r2, #4
 8007162:	f105 0115 	add.w	r1, r5, #21
 8007166:	458c      	cmp	ip, r1
 8007168:	bf38      	it	cc
 800716a:	2204      	movcc	r2, #4
 800716c:	9201      	str	r2, [sp, #4]
 800716e:	9a02      	ldr	r2, [sp, #8]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	429a      	cmp	r2, r3
 8007174:	d808      	bhi.n	8007188 <__multiply+0x98>
 8007176:	2f00      	cmp	r7, #0
 8007178:	dc55      	bgt.n	8007226 <__multiply+0x136>
 800717a:	6107      	str	r7, [r0, #16]
 800717c:	b005      	add	sp, #20
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	f843 2b04 	str.w	r2, [r3], #4
 8007186:	e7db      	b.n	8007140 <__multiply+0x50>
 8007188:	f8b3 a000 	ldrh.w	sl, [r3]
 800718c:	f1ba 0f00 	cmp.w	sl, #0
 8007190:	d020      	beq.n	80071d4 <__multiply+0xe4>
 8007192:	f105 0e14 	add.w	lr, r5, #20
 8007196:	46b1      	mov	r9, r6
 8007198:	2200      	movs	r2, #0
 800719a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800719e:	f8d9 b000 	ldr.w	fp, [r9]
 80071a2:	b2a1      	uxth	r1, r4
 80071a4:	fa1f fb8b 	uxth.w	fp, fp
 80071a8:	fb0a b101 	mla	r1, sl, r1, fp
 80071ac:	4411      	add	r1, r2
 80071ae:	f8d9 2000 	ldr.w	r2, [r9]
 80071b2:	0c24      	lsrs	r4, r4, #16
 80071b4:	0c12      	lsrs	r2, r2, #16
 80071b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80071ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80071be:	b289      	uxth	r1, r1
 80071c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071c4:	45f4      	cmp	ip, lr
 80071c6:	f849 1b04 	str.w	r1, [r9], #4
 80071ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80071ce:	d8e4      	bhi.n	800719a <__multiply+0xaa>
 80071d0:	9901      	ldr	r1, [sp, #4]
 80071d2:	5072      	str	r2, [r6, r1]
 80071d4:	9a03      	ldr	r2, [sp, #12]
 80071d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071da:	3304      	adds	r3, #4
 80071dc:	f1b9 0f00 	cmp.w	r9, #0
 80071e0:	d01f      	beq.n	8007222 <__multiply+0x132>
 80071e2:	6834      	ldr	r4, [r6, #0]
 80071e4:	f105 0114 	add.w	r1, r5, #20
 80071e8:	46b6      	mov	lr, r6
 80071ea:	f04f 0a00 	mov.w	sl, #0
 80071ee:	880a      	ldrh	r2, [r1, #0]
 80071f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80071f4:	fb09 b202 	mla	r2, r9, r2, fp
 80071f8:	4492      	add	sl, r2
 80071fa:	b2a4      	uxth	r4, r4
 80071fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007200:	f84e 4b04 	str.w	r4, [lr], #4
 8007204:	f851 4b04 	ldr.w	r4, [r1], #4
 8007208:	f8be 2000 	ldrh.w	r2, [lr]
 800720c:	0c24      	lsrs	r4, r4, #16
 800720e:	fb09 2404 	mla	r4, r9, r4, r2
 8007212:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007216:	458c      	cmp	ip, r1
 8007218:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800721c:	d8e7      	bhi.n	80071ee <__multiply+0xfe>
 800721e:	9a01      	ldr	r2, [sp, #4]
 8007220:	50b4      	str	r4, [r6, r2]
 8007222:	3604      	adds	r6, #4
 8007224:	e7a3      	b.n	800716e <__multiply+0x7e>
 8007226:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1a5      	bne.n	800717a <__multiply+0x8a>
 800722e:	3f01      	subs	r7, #1
 8007230:	e7a1      	b.n	8007176 <__multiply+0x86>
 8007232:	bf00      	nop
 8007234:	08009387 	.word	0x08009387
 8007238:	08009398 	.word	0x08009398

0800723c <__pow5mult>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	4615      	mov	r5, r2
 8007242:	f012 0203 	ands.w	r2, r2, #3
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	d007      	beq.n	800725c <__pow5mult+0x20>
 800724c:	4c25      	ldr	r4, [pc, #148]	; (80072e4 <__pow5mult+0xa8>)
 800724e:	3a01      	subs	r2, #1
 8007250:	2300      	movs	r3, #0
 8007252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007256:	f7ff fe9b 	bl	8006f90 <__multadd>
 800725a:	4607      	mov	r7, r0
 800725c:	10ad      	asrs	r5, r5, #2
 800725e:	d03d      	beq.n	80072dc <__pow5mult+0xa0>
 8007260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007262:	b97c      	cbnz	r4, 8007284 <__pow5mult+0x48>
 8007264:	2010      	movs	r0, #16
 8007266:	f7ff fe1b 	bl	8006ea0 <malloc>
 800726a:	4602      	mov	r2, r0
 800726c:	6270      	str	r0, [r6, #36]	; 0x24
 800726e:	b928      	cbnz	r0, 800727c <__pow5mult+0x40>
 8007270:	4b1d      	ldr	r3, [pc, #116]	; (80072e8 <__pow5mult+0xac>)
 8007272:	481e      	ldr	r0, [pc, #120]	; (80072ec <__pow5mult+0xb0>)
 8007274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007278:	f000 fa70 	bl	800775c <__assert_func>
 800727c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007280:	6004      	str	r4, [r0, #0]
 8007282:	60c4      	str	r4, [r0, #12]
 8007284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800728c:	b94c      	cbnz	r4, 80072a2 <__pow5mult+0x66>
 800728e:	f240 2171 	movw	r1, #625	; 0x271
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ff16 	bl	80070c4 <__i2b>
 8007298:	2300      	movs	r3, #0
 800729a:	f8c8 0008 	str.w	r0, [r8, #8]
 800729e:	4604      	mov	r4, r0
 80072a0:	6003      	str	r3, [r0, #0]
 80072a2:	f04f 0900 	mov.w	r9, #0
 80072a6:	07eb      	lsls	r3, r5, #31
 80072a8:	d50a      	bpl.n	80072c0 <__pow5mult+0x84>
 80072aa:	4639      	mov	r1, r7
 80072ac:	4622      	mov	r2, r4
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ff1e 	bl	80070f0 <__multiply>
 80072b4:	4639      	mov	r1, r7
 80072b6:	4680      	mov	r8, r0
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff fe47 	bl	8006f4c <_Bfree>
 80072be:	4647      	mov	r7, r8
 80072c0:	106d      	asrs	r5, r5, #1
 80072c2:	d00b      	beq.n	80072dc <__pow5mult+0xa0>
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	b938      	cbnz	r0, 80072d8 <__pow5mult+0x9c>
 80072c8:	4622      	mov	r2, r4
 80072ca:	4621      	mov	r1, r4
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ff0f 	bl	80070f0 <__multiply>
 80072d2:	6020      	str	r0, [r4, #0]
 80072d4:	f8c0 9000 	str.w	r9, [r0]
 80072d8:	4604      	mov	r4, r0
 80072da:	e7e4      	b.n	80072a6 <__pow5mult+0x6a>
 80072dc:	4638      	mov	r0, r7
 80072de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e2:	bf00      	nop
 80072e4:	080094e8 	.word	0x080094e8
 80072e8:	08009311 	.word	0x08009311
 80072ec:	08009398 	.word	0x08009398

080072f0 <__lshift>:
 80072f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	460c      	mov	r4, r1
 80072f6:	6849      	ldr	r1, [r1, #4]
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	4607      	mov	r7, r0
 8007302:	4691      	mov	r9, r2
 8007304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007308:	f108 0601 	add.w	r6, r8, #1
 800730c:	42b3      	cmp	r3, r6
 800730e:	db0b      	blt.n	8007328 <__lshift+0x38>
 8007310:	4638      	mov	r0, r7
 8007312:	f7ff fddb 	bl	8006ecc <_Balloc>
 8007316:	4605      	mov	r5, r0
 8007318:	b948      	cbnz	r0, 800732e <__lshift+0x3e>
 800731a:	4602      	mov	r2, r0
 800731c:	4b28      	ldr	r3, [pc, #160]	; (80073c0 <__lshift+0xd0>)
 800731e:	4829      	ldr	r0, [pc, #164]	; (80073c4 <__lshift+0xd4>)
 8007320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007324:	f000 fa1a 	bl	800775c <__assert_func>
 8007328:	3101      	adds	r1, #1
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	e7ee      	b.n	800730c <__lshift+0x1c>
 800732e:	2300      	movs	r3, #0
 8007330:	f100 0114 	add.w	r1, r0, #20
 8007334:	f100 0210 	add.w	r2, r0, #16
 8007338:	4618      	mov	r0, r3
 800733a:	4553      	cmp	r3, sl
 800733c:	db33      	blt.n	80073a6 <__lshift+0xb6>
 800733e:	6920      	ldr	r0, [r4, #16]
 8007340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007344:	f104 0314 	add.w	r3, r4, #20
 8007348:	f019 091f 	ands.w	r9, r9, #31
 800734c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007354:	d02b      	beq.n	80073ae <__lshift+0xbe>
 8007356:	f1c9 0e20 	rsb	lr, r9, #32
 800735a:	468a      	mov	sl, r1
 800735c:	2200      	movs	r2, #0
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	fa00 f009 	lsl.w	r0, r0, r9
 8007364:	4302      	orrs	r2, r0
 8007366:	f84a 2b04 	str.w	r2, [sl], #4
 800736a:	f853 2b04 	ldr.w	r2, [r3], #4
 800736e:	459c      	cmp	ip, r3
 8007370:	fa22 f20e 	lsr.w	r2, r2, lr
 8007374:	d8f3      	bhi.n	800735e <__lshift+0x6e>
 8007376:	ebac 0304 	sub.w	r3, ip, r4
 800737a:	3b15      	subs	r3, #21
 800737c:	f023 0303 	bic.w	r3, r3, #3
 8007380:	3304      	adds	r3, #4
 8007382:	f104 0015 	add.w	r0, r4, #21
 8007386:	4584      	cmp	ip, r0
 8007388:	bf38      	it	cc
 800738a:	2304      	movcc	r3, #4
 800738c:	50ca      	str	r2, [r1, r3]
 800738e:	b10a      	cbz	r2, 8007394 <__lshift+0xa4>
 8007390:	f108 0602 	add.w	r6, r8, #2
 8007394:	3e01      	subs	r6, #1
 8007396:	4638      	mov	r0, r7
 8007398:	612e      	str	r6, [r5, #16]
 800739a:	4621      	mov	r1, r4
 800739c:	f7ff fdd6 	bl	8006f4c <_Bfree>
 80073a0:	4628      	mov	r0, r5
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073aa:	3301      	adds	r3, #1
 80073ac:	e7c5      	b.n	800733a <__lshift+0x4a>
 80073ae:	3904      	subs	r1, #4
 80073b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073b8:	459c      	cmp	ip, r3
 80073ba:	d8f9      	bhi.n	80073b0 <__lshift+0xc0>
 80073bc:	e7ea      	b.n	8007394 <__lshift+0xa4>
 80073be:	bf00      	nop
 80073c0:	08009387 	.word	0x08009387
 80073c4:	08009398 	.word	0x08009398

080073c8 <__mcmp>:
 80073c8:	b530      	push	{r4, r5, lr}
 80073ca:	6902      	ldr	r2, [r0, #16]
 80073cc:	690c      	ldr	r4, [r1, #16]
 80073ce:	1b12      	subs	r2, r2, r4
 80073d0:	d10e      	bne.n	80073f0 <__mcmp+0x28>
 80073d2:	f100 0314 	add.w	r3, r0, #20
 80073d6:	3114      	adds	r1, #20
 80073d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073e8:	42a5      	cmp	r5, r4
 80073ea:	d003      	beq.n	80073f4 <__mcmp+0x2c>
 80073ec:	d305      	bcc.n	80073fa <__mcmp+0x32>
 80073ee:	2201      	movs	r2, #1
 80073f0:	4610      	mov	r0, r2
 80073f2:	bd30      	pop	{r4, r5, pc}
 80073f4:	4283      	cmp	r3, r0
 80073f6:	d3f3      	bcc.n	80073e0 <__mcmp+0x18>
 80073f8:	e7fa      	b.n	80073f0 <__mcmp+0x28>
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	e7f7      	b.n	80073f0 <__mcmp+0x28>

08007400 <__mdiff>:
 8007400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	4606      	mov	r6, r0
 8007408:	4611      	mov	r1, r2
 800740a:	4620      	mov	r0, r4
 800740c:	4617      	mov	r7, r2
 800740e:	f7ff ffdb 	bl	80073c8 <__mcmp>
 8007412:	1e05      	subs	r5, r0, #0
 8007414:	d110      	bne.n	8007438 <__mdiff+0x38>
 8007416:	4629      	mov	r1, r5
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff fd57 	bl	8006ecc <_Balloc>
 800741e:	b930      	cbnz	r0, 800742e <__mdiff+0x2e>
 8007420:	4b39      	ldr	r3, [pc, #228]	; (8007508 <__mdiff+0x108>)
 8007422:	4602      	mov	r2, r0
 8007424:	f240 2132 	movw	r1, #562	; 0x232
 8007428:	4838      	ldr	r0, [pc, #224]	; (800750c <__mdiff+0x10c>)
 800742a:	f000 f997 	bl	800775c <__assert_func>
 800742e:	2301      	movs	r3, #1
 8007430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007438:	bfa4      	itt	ge
 800743a:	463b      	movge	r3, r7
 800743c:	4627      	movge	r7, r4
 800743e:	4630      	mov	r0, r6
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	bfa6      	itte	ge
 8007444:	461c      	movge	r4, r3
 8007446:	2500      	movge	r5, #0
 8007448:	2501      	movlt	r5, #1
 800744a:	f7ff fd3f 	bl	8006ecc <_Balloc>
 800744e:	b920      	cbnz	r0, 800745a <__mdiff+0x5a>
 8007450:	4b2d      	ldr	r3, [pc, #180]	; (8007508 <__mdiff+0x108>)
 8007452:	4602      	mov	r2, r0
 8007454:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007458:	e7e6      	b.n	8007428 <__mdiff+0x28>
 800745a:	693e      	ldr	r6, [r7, #16]
 800745c:	60c5      	str	r5, [r0, #12]
 800745e:	6925      	ldr	r5, [r4, #16]
 8007460:	f107 0114 	add.w	r1, r7, #20
 8007464:	f104 0914 	add.w	r9, r4, #20
 8007468:	f100 0e14 	add.w	lr, r0, #20
 800746c:	f107 0210 	add.w	r2, r7, #16
 8007470:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007474:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007478:	46f2      	mov	sl, lr
 800747a:	2700      	movs	r7, #0
 800747c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007484:	fa1f f883 	uxth.w	r8, r3
 8007488:	fa17 f78b 	uxtah	r7, r7, fp
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	eba7 0808 	sub.w	r8, r7, r8
 8007492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007496:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800749a:	fa1f f888 	uxth.w	r8, r8
 800749e:	141f      	asrs	r7, r3, #16
 80074a0:	454d      	cmp	r5, r9
 80074a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074a6:	f84a 3b04 	str.w	r3, [sl], #4
 80074aa:	d8e7      	bhi.n	800747c <__mdiff+0x7c>
 80074ac:	1b2b      	subs	r3, r5, r4
 80074ae:	3b15      	subs	r3, #21
 80074b0:	f023 0303 	bic.w	r3, r3, #3
 80074b4:	3304      	adds	r3, #4
 80074b6:	3415      	adds	r4, #21
 80074b8:	42a5      	cmp	r5, r4
 80074ba:	bf38      	it	cc
 80074bc:	2304      	movcc	r3, #4
 80074be:	4419      	add	r1, r3
 80074c0:	4473      	add	r3, lr
 80074c2:	469e      	mov	lr, r3
 80074c4:	460d      	mov	r5, r1
 80074c6:	4565      	cmp	r5, ip
 80074c8:	d30e      	bcc.n	80074e8 <__mdiff+0xe8>
 80074ca:	f10c 0203 	add.w	r2, ip, #3
 80074ce:	1a52      	subs	r2, r2, r1
 80074d0:	f022 0203 	bic.w	r2, r2, #3
 80074d4:	3903      	subs	r1, #3
 80074d6:	458c      	cmp	ip, r1
 80074d8:	bf38      	it	cc
 80074da:	2200      	movcc	r2, #0
 80074dc:	441a      	add	r2, r3
 80074de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074e2:	b17b      	cbz	r3, 8007504 <__mdiff+0x104>
 80074e4:	6106      	str	r6, [r0, #16]
 80074e6:	e7a5      	b.n	8007434 <__mdiff+0x34>
 80074e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80074ec:	fa17 f488 	uxtah	r4, r7, r8
 80074f0:	1422      	asrs	r2, r4, #16
 80074f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80074f6:	b2a4      	uxth	r4, r4
 80074f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80074fc:	f84e 4b04 	str.w	r4, [lr], #4
 8007500:	1417      	asrs	r7, r2, #16
 8007502:	e7e0      	b.n	80074c6 <__mdiff+0xc6>
 8007504:	3e01      	subs	r6, #1
 8007506:	e7ea      	b.n	80074de <__mdiff+0xde>
 8007508:	08009387 	.word	0x08009387
 800750c:	08009398 	.word	0x08009398

08007510 <__d2b>:
 8007510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4689      	mov	r9, r1
 8007516:	2101      	movs	r1, #1
 8007518:	ec57 6b10 	vmov	r6, r7, d0
 800751c:	4690      	mov	r8, r2
 800751e:	f7ff fcd5 	bl	8006ecc <_Balloc>
 8007522:	4604      	mov	r4, r0
 8007524:	b930      	cbnz	r0, 8007534 <__d2b+0x24>
 8007526:	4602      	mov	r2, r0
 8007528:	4b25      	ldr	r3, [pc, #148]	; (80075c0 <__d2b+0xb0>)
 800752a:	4826      	ldr	r0, [pc, #152]	; (80075c4 <__d2b+0xb4>)
 800752c:	f240 310a 	movw	r1, #778	; 0x30a
 8007530:	f000 f914 	bl	800775c <__assert_func>
 8007534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800753c:	bb35      	cbnz	r5, 800758c <__d2b+0x7c>
 800753e:	2e00      	cmp	r6, #0
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	d028      	beq.n	8007596 <__d2b+0x86>
 8007544:	4668      	mov	r0, sp
 8007546:	9600      	str	r6, [sp, #0]
 8007548:	f7ff fd8c 	bl	8007064 <__lo0bits>
 800754c:	9900      	ldr	r1, [sp, #0]
 800754e:	b300      	cbz	r0, 8007592 <__d2b+0x82>
 8007550:	9a01      	ldr	r2, [sp, #4]
 8007552:	f1c0 0320 	rsb	r3, r0, #32
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	430b      	orrs	r3, r1
 800755c:	40c2      	lsrs	r2, r0
 800755e:	6163      	str	r3, [r4, #20]
 8007560:	9201      	str	r2, [sp, #4]
 8007562:	9b01      	ldr	r3, [sp, #4]
 8007564:	61a3      	str	r3, [r4, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2202      	movne	r2, #2
 800756c:	2201      	moveq	r2, #1
 800756e:	6122      	str	r2, [r4, #16]
 8007570:	b1d5      	cbz	r5, 80075a8 <__d2b+0x98>
 8007572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007576:	4405      	add	r5, r0
 8007578:	f8c9 5000 	str.w	r5, [r9]
 800757c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007580:	f8c8 0000 	str.w	r0, [r8]
 8007584:	4620      	mov	r0, r4
 8007586:	b003      	add	sp, #12
 8007588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800758c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007590:	e7d5      	b.n	800753e <__d2b+0x2e>
 8007592:	6161      	str	r1, [r4, #20]
 8007594:	e7e5      	b.n	8007562 <__d2b+0x52>
 8007596:	a801      	add	r0, sp, #4
 8007598:	f7ff fd64 	bl	8007064 <__lo0bits>
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	6163      	str	r3, [r4, #20]
 80075a0:	2201      	movs	r2, #1
 80075a2:	6122      	str	r2, [r4, #16]
 80075a4:	3020      	adds	r0, #32
 80075a6:	e7e3      	b.n	8007570 <__d2b+0x60>
 80075a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075b0:	f8c9 0000 	str.w	r0, [r9]
 80075b4:	6918      	ldr	r0, [r3, #16]
 80075b6:	f7ff fd35 	bl	8007024 <__hi0bits>
 80075ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075be:	e7df      	b.n	8007580 <__d2b+0x70>
 80075c0:	08009387 	.word	0x08009387
 80075c4:	08009398 	.word	0x08009398

080075c8 <_calloc_r>:
 80075c8:	b513      	push	{r0, r1, r4, lr}
 80075ca:	434a      	muls	r2, r1
 80075cc:	4611      	mov	r1, r2
 80075ce:	9201      	str	r2, [sp, #4]
 80075d0:	f000 f85a 	bl	8007688 <_malloc_r>
 80075d4:	4604      	mov	r4, r0
 80075d6:	b118      	cbz	r0, 80075e0 <_calloc_r+0x18>
 80075d8:	9a01      	ldr	r2, [sp, #4]
 80075da:	2100      	movs	r1, #0
 80075dc:	f7fe f970 	bl	80058c0 <memset>
 80075e0:	4620      	mov	r0, r4
 80075e2:	b002      	add	sp, #8
 80075e4:	bd10      	pop	{r4, pc}
	...

080075e8 <_free_r>:
 80075e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ea:	2900      	cmp	r1, #0
 80075ec:	d048      	beq.n	8007680 <_free_r+0x98>
 80075ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f2:	9001      	str	r0, [sp, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f1a1 0404 	sub.w	r4, r1, #4
 80075fa:	bfb8      	it	lt
 80075fc:	18e4      	addlt	r4, r4, r3
 80075fe:	f000 f8ef 	bl	80077e0 <__malloc_lock>
 8007602:	4a20      	ldr	r2, [pc, #128]	; (8007684 <_free_r+0x9c>)
 8007604:	9801      	ldr	r0, [sp, #4]
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	4615      	mov	r5, r2
 800760a:	b933      	cbnz	r3, 800761a <_free_r+0x32>
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	6014      	str	r4, [r2, #0]
 8007610:	b003      	add	sp, #12
 8007612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007616:	f000 b8e9 	b.w	80077ec <__malloc_unlock>
 800761a:	42a3      	cmp	r3, r4
 800761c:	d90b      	bls.n	8007636 <_free_r+0x4e>
 800761e:	6821      	ldr	r1, [r4, #0]
 8007620:	1862      	adds	r2, r4, r1
 8007622:	4293      	cmp	r3, r2
 8007624:	bf04      	itt	eq
 8007626:	681a      	ldreq	r2, [r3, #0]
 8007628:	685b      	ldreq	r3, [r3, #4]
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	bf04      	itt	eq
 800762e:	1852      	addeq	r2, r2, r1
 8007630:	6022      	streq	r2, [r4, #0]
 8007632:	602c      	str	r4, [r5, #0]
 8007634:	e7ec      	b.n	8007610 <_free_r+0x28>
 8007636:	461a      	mov	r2, r3
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	b10b      	cbz	r3, 8007640 <_free_r+0x58>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d9fa      	bls.n	8007636 <_free_r+0x4e>
 8007640:	6811      	ldr	r1, [r2, #0]
 8007642:	1855      	adds	r5, r2, r1
 8007644:	42a5      	cmp	r5, r4
 8007646:	d10b      	bne.n	8007660 <_free_r+0x78>
 8007648:	6824      	ldr	r4, [r4, #0]
 800764a:	4421      	add	r1, r4
 800764c:	1854      	adds	r4, r2, r1
 800764e:	42a3      	cmp	r3, r4
 8007650:	6011      	str	r1, [r2, #0]
 8007652:	d1dd      	bne.n	8007610 <_free_r+0x28>
 8007654:	681c      	ldr	r4, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	6053      	str	r3, [r2, #4]
 800765a:	4421      	add	r1, r4
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	e7d7      	b.n	8007610 <_free_r+0x28>
 8007660:	d902      	bls.n	8007668 <_free_r+0x80>
 8007662:	230c      	movs	r3, #12
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	e7d3      	b.n	8007610 <_free_r+0x28>
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	1961      	adds	r1, r4, r5
 800766c:	428b      	cmp	r3, r1
 800766e:	bf04      	itt	eq
 8007670:	6819      	ldreq	r1, [r3, #0]
 8007672:	685b      	ldreq	r3, [r3, #4]
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	bf04      	itt	eq
 8007678:	1949      	addeq	r1, r1, r5
 800767a:	6021      	streq	r1, [r4, #0]
 800767c:	6054      	str	r4, [r2, #4]
 800767e:	e7c7      	b.n	8007610 <_free_r+0x28>
 8007680:	b003      	add	sp, #12
 8007682:	bd30      	pop	{r4, r5, pc}
 8007684:	20000228 	.word	0x20000228

08007688 <_malloc_r>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	1ccd      	adds	r5, r1, #3
 800768c:	f025 0503 	bic.w	r5, r5, #3
 8007690:	3508      	adds	r5, #8
 8007692:	2d0c      	cmp	r5, #12
 8007694:	bf38      	it	cc
 8007696:	250c      	movcc	r5, #12
 8007698:	2d00      	cmp	r5, #0
 800769a:	4606      	mov	r6, r0
 800769c:	db01      	blt.n	80076a2 <_malloc_r+0x1a>
 800769e:	42a9      	cmp	r1, r5
 80076a0:	d903      	bls.n	80076aa <_malloc_r+0x22>
 80076a2:	230c      	movs	r3, #12
 80076a4:	6033      	str	r3, [r6, #0]
 80076a6:	2000      	movs	r0, #0
 80076a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076aa:	f000 f899 	bl	80077e0 <__malloc_lock>
 80076ae:	4921      	ldr	r1, [pc, #132]	; (8007734 <_malloc_r+0xac>)
 80076b0:	680a      	ldr	r2, [r1, #0]
 80076b2:	4614      	mov	r4, r2
 80076b4:	b99c      	cbnz	r4, 80076de <_malloc_r+0x56>
 80076b6:	4f20      	ldr	r7, [pc, #128]	; (8007738 <_malloc_r+0xb0>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	b923      	cbnz	r3, 80076c6 <_malloc_r+0x3e>
 80076bc:	4621      	mov	r1, r4
 80076be:	4630      	mov	r0, r6
 80076c0:	f000 f83c 	bl	800773c <_sbrk_r>
 80076c4:	6038      	str	r0, [r7, #0]
 80076c6:	4629      	mov	r1, r5
 80076c8:	4630      	mov	r0, r6
 80076ca:	f000 f837 	bl	800773c <_sbrk_r>
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	d123      	bne.n	800771a <_malloc_r+0x92>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6033      	str	r3, [r6, #0]
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f888 	bl	80077ec <__malloc_unlock>
 80076dc:	e7e3      	b.n	80076a6 <_malloc_r+0x1e>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	1b5b      	subs	r3, r3, r5
 80076e2:	d417      	bmi.n	8007714 <_malloc_r+0x8c>
 80076e4:	2b0b      	cmp	r3, #11
 80076e6:	d903      	bls.n	80076f0 <_malloc_r+0x68>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	441c      	add	r4, r3
 80076ec:	6025      	str	r5, [r4, #0]
 80076ee:	e004      	b.n	80076fa <_malloc_r+0x72>
 80076f0:	6863      	ldr	r3, [r4, #4]
 80076f2:	42a2      	cmp	r2, r4
 80076f4:	bf0c      	ite	eq
 80076f6:	600b      	streq	r3, [r1, #0]
 80076f8:	6053      	strne	r3, [r2, #4]
 80076fa:	4630      	mov	r0, r6
 80076fc:	f000 f876 	bl	80077ec <__malloc_unlock>
 8007700:	f104 000b 	add.w	r0, r4, #11
 8007704:	1d23      	adds	r3, r4, #4
 8007706:	f020 0007 	bic.w	r0, r0, #7
 800770a:	1ac2      	subs	r2, r0, r3
 800770c:	d0cc      	beq.n	80076a8 <_malloc_r+0x20>
 800770e:	1a1b      	subs	r3, r3, r0
 8007710:	50a3      	str	r3, [r4, r2]
 8007712:	e7c9      	b.n	80076a8 <_malloc_r+0x20>
 8007714:	4622      	mov	r2, r4
 8007716:	6864      	ldr	r4, [r4, #4]
 8007718:	e7cc      	b.n	80076b4 <_malloc_r+0x2c>
 800771a:	1cc4      	adds	r4, r0, #3
 800771c:	f024 0403 	bic.w	r4, r4, #3
 8007720:	42a0      	cmp	r0, r4
 8007722:	d0e3      	beq.n	80076ec <_malloc_r+0x64>
 8007724:	1a21      	subs	r1, r4, r0
 8007726:	4630      	mov	r0, r6
 8007728:	f000 f808 	bl	800773c <_sbrk_r>
 800772c:	3001      	adds	r0, #1
 800772e:	d1dd      	bne.n	80076ec <_malloc_r+0x64>
 8007730:	e7cf      	b.n	80076d2 <_malloc_r+0x4a>
 8007732:	bf00      	nop
 8007734:	20000228 	.word	0x20000228
 8007738:	2000022c 	.word	0x2000022c

0800773c <_sbrk_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d06      	ldr	r5, [pc, #24]	; (8007758 <_sbrk_r+0x1c>)
 8007740:	2300      	movs	r3, #0
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	f7fa fd1c 	bl	8002184 <_sbrk>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_sbrk_r+0x1a>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_sbrk_r+0x1a>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	20000304 	.word	0x20000304

0800775c <__assert_func>:
 800775c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800775e:	4614      	mov	r4, r2
 8007760:	461a      	mov	r2, r3
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <__assert_func+0x2c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4605      	mov	r5, r0
 8007768:	68d8      	ldr	r0, [r3, #12]
 800776a:	b14c      	cbz	r4, 8007780 <__assert_func+0x24>
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <__assert_func+0x30>)
 800776e:	9100      	str	r1, [sp, #0]
 8007770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007774:	4906      	ldr	r1, [pc, #24]	; (8007790 <__assert_func+0x34>)
 8007776:	462b      	mov	r3, r5
 8007778:	f000 f80e 	bl	8007798 <fiprintf>
 800777c:	f000 fa64 	bl	8007c48 <abort>
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <__assert_func+0x38>)
 8007782:	461c      	mov	r4, r3
 8007784:	e7f3      	b.n	800776e <__assert_func+0x12>
 8007786:	bf00      	nop
 8007788:	2000000c 	.word	0x2000000c
 800778c:	080094f4 	.word	0x080094f4
 8007790:	08009501 	.word	0x08009501
 8007794:	0800952f 	.word	0x0800952f

08007798 <fiprintf>:
 8007798:	b40e      	push	{r1, r2, r3}
 800779a:	b503      	push	{r0, r1, lr}
 800779c:	4601      	mov	r1, r0
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	4805      	ldr	r0, [pc, #20]	; (80077b8 <fiprintf+0x20>)
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	6800      	ldr	r0, [r0, #0]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	f000 f84f 	bl	800784c <_vfiprintf_r>
 80077ae:	b002      	add	sp, #8
 80077b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b4:	b003      	add	sp, #12
 80077b6:	4770      	bx	lr
 80077b8:	2000000c 	.word	0x2000000c

080077bc <__ascii_mbtowc>:
 80077bc:	b082      	sub	sp, #8
 80077be:	b901      	cbnz	r1, 80077c2 <__ascii_mbtowc+0x6>
 80077c0:	a901      	add	r1, sp, #4
 80077c2:	b142      	cbz	r2, 80077d6 <__ascii_mbtowc+0x1a>
 80077c4:	b14b      	cbz	r3, 80077da <__ascii_mbtowc+0x1e>
 80077c6:	7813      	ldrb	r3, [r2, #0]
 80077c8:	600b      	str	r3, [r1, #0]
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	1e10      	subs	r0, r2, #0
 80077ce:	bf18      	it	ne
 80077d0:	2001      	movne	r0, #1
 80077d2:	b002      	add	sp, #8
 80077d4:	4770      	bx	lr
 80077d6:	4610      	mov	r0, r2
 80077d8:	e7fb      	b.n	80077d2 <__ascii_mbtowc+0x16>
 80077da:	f06f 0001 	mvn.w	r0, #1
 80077de:	e7f8      	b.n	80077d2 <__ascii_mbtowc+0x16>

080077e0 <__malloc_lock>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__malloc_lock+0x8>)
 80077e2:	f000 bbf1 	b.w	8007fc8 <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	2000030c 	.word	0x2000030c

080077ec <__malloc_unlock>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__malloc_unlock+0x8>)
 80077ee:	f000 bbec 	b.w	8007fca <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	2000030c 	.word	0x2000030c

080077f8 <__sfputc_r>:
 80077f8:	6893      	ldr	r3, [r2, #8]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	b410      	push	{r4}
 8007800:	6093      	str	r3, [r2, #8]
 8007802:	da08      	bge.n	8007816 <__sfputc_r+0x1e>
 8007804:	6994      	ldr	r4, [r2, #24]
 8007806:	42a3      	cmp	r3, r4
 8007808:	db01      	blt.n	800780e <__sfputc_r+0x16>
 800780a:	290a      	cmp	r1, #10
 800780c:	d103      	bne.n	8007816 <__sfputc_r+0x1e>
 800780e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007812:	f000 b94b 	b.w	8007aac <__swbuf_r>
 8007816:	6813      	ldr	r3, [r2, #0]
 8007818:	1c58      	adds	r0, r3, #1
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	7019      	strb	r1, [r3, #0]
 800781e:	4608      	mov	r0, r1
 8007820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007824:	4770      	bx	lr

08007826 <__sfputs_r>:
 8007826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007828:	4606      	mov	r6, r0
 800782a:	460f      	mov	r7, r1
 800782c:	4614      	mov	r4, r2
 800782e:	18d5      	adds	r5, r2, r3
 8007830:	42ac      	cmp	r4, r5
 8007832:	d101      	bne.n	8007838 <__sfputs_r+0x12>
 8007834:	2000      	movs	r0, #0
 8007836:	e007      	b.n	8007848 <__sfputs_r+0x22>
 8007838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783c:	463a      	mov	r2, r7
 800783e:	4630      	mov	r0, r6
 8007840:	f7ff ffda 	bl	80077f8 <__sfputc_r>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d1f3      	bne.n	8007830 <__sfputs_r+0xa>
 8007848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800784c <_vfiprintf_r>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	460d      	mov	r5, r1
 8007852:	b09d      	sub	sp, #116	; 0x74
 8007854:	4614      	mov	r4, r2
 8007856:	4698      	mov	r8, r3
 8007858:	4606      	mov	r6, r0
 800785a:	b118      	cbz	r0, 8007864 <_vfiprintf_r+0x18>
 800785c:	6983      	ldr	r3, [r0, #24]
 800785e:	b90b      	cbnz	r3, 8007864 <_vfiprintf_r+0x18>
 8007860:	f000 fb14 	bl	8007e8c <__sinit>
 8007864:	4b89      	ldr	r3, [pc, #548]	; (8007a8c <_vfiprintf_r+0x240>)
 8007866:	429d      	cmp	r5, r3
 8007868:	d11b      	bne.n	80078a2 <_vfiprintf_r+0x56>
 800786a:	6875      	ldr	r5, [r6, #4]
 800786c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800786e:	07d9      	lsls	r1, r3, #31
 8007870:	d405      	bmi.n	800787e <_vfiprintf_r+0x32>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	059a      	lsls	r2, r3, #22
 8007876:	d402      	bmi.n	800787e <_vfiprintf_r+0x32>
 8007878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787a:	f000 fba5 	bl	8007fc8 <__retarget_lock_acquire_recursive>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	071b      	lsls	r3, r3, #28
 8007882:	d501      	bpl.n	8007888 <_vfiprintf_r+0x3c>
 8007884:	692b      	ldr	r3, [r5, #16]
 8007886:	b9eb      	cbnz	r3, 80078c4 <_vfiprintf_r+0x78>
 8007888:	4629      	mov	r1, r5
 800788a:	4630      	mov	r0, r6
 800788c:	f000 f96e 	bl	8007b6c <__swsetup_r>
 8007890:	b1c0      	cbz	r0, 80078c4 <_vfiprintf_r+0x78>
 8007892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007894:	07dc      	lsls	r4, r3, #31
 8007896:	d50e      	bpl.n	80078b6 <_vfiprintf_r+0x6a>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	b01d      	add	sp, #116	; 0x74
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <_vfiprintf_r+0x244>)
 80078a4:	429d      	cmp	r5, r3
 80078a6:	d101      	bne.n	80078ac <_vfiprintf_r+0x60>
 80078a8:	68b5      	ldr	r5, [r6, #8]
 80078aa:	e7df      	b.n	800786c <_vfiprintf_r+0x20>
 80078ac:	4b79      	ldr	r3, [pc, #484]	; (8007a94 <_vfiprintf_r+0x248>)
 80078ae:	429d      	cmp	r5, r3
 80078b0:	bf08      	it	eq
 80078b2:	68f5      	ldreq	r5, [r6, #12]
 80078b4:	e7da      	b.n	800786c <_vfiprintf_r+0x20>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	0598      	lsls	r0, r3, #22
 80078ba:	d4ed      	bmi.n	8007898 <_vfiprintf_r+0x4c>
 80078bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078be:	f000 fb84 	bl	8007fca <__retarget_lock_release_recursive>
 80078c2:	e7e9      	b.n	8007898 <_vfiprintf_r+0x4c>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9309      	str	r3, [sp, #36]	; 0x24
 80078c8:	2320      	movs	r3, #32
 80078ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d2:	2330      	movs	r3, #48	; 0x30
 80078d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a98 <_vfiprintf_r+0x24c>
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078dc:	f04f 0901 	mov.w	r9, #1
 80078e0:	4623      	mov	r3, r4
 80078e2:	469a      	mov	sl, r3
 80078e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e8:	b10a      	cbz	r2, 80078ee <_vfiprintf_r+0xa2>
 80078ea:	2a25      	cmp	r2, #37	; 0x25
 80078ec:	d1f9      	bne.n	80078e2 <_vfiprintf_r+0x96>
 80078ee:	ebba 0b04 	subs.w	fp, sl, r4
 80078f2:	d00b      	beq.n	800790c <_vfiprintf_r+0xc0>
 80078f4:	465b      	mov	r3, fp
 80078f6:	4622      	mov	r2, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ff93 	bl	8007826 <__sfputs_r>
 8007900:	3001      	adds	r0, #1
 8007902:	f000 80aa 	beq.w	8007a5a <_vfiprintf_r+0x20e>
 8007906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007908:	445a      	add	r2, fp
 800790a:	9209      	str	r2, [sp, #36]	; 0x24
 800790c:	f89a 3000 	ldrb.w	r3, [sl]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80a2 	beq.w	8007a5a <_vfiprintf_r+0x20e>
 8007916:	2300      	movs	r3, #0
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800792c:	931a      	str	r3, [sp, #104]	; 0x68
 800792e:	4654      	mov	r4, sl
 8007930:	2205      	movs	r2, #5
 8007932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007936:	4858      	ldr	r0, [pc, #352]	; (8007a98 <_vfiprintf_r+0x24c>)
 8007938:	f7f8 fc5a 	bl	80001f0 <memchr>
 800793c:	9a04      	ldr	r2, [sp, #16]
 800793e:	b9d8      	cbnz	r0, 8007978 <_vfiprintf_r+0x12c>
 8007940:	06d1      	lsls	r1, r2, #27
 8007942:	bf44      	itt	mi
 8007944:	2320      	movmi	r3, #32
 8007946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794a:	0713      	lsls	r3, r2, #28
 800794c:	bf44      	itt	mi
 800794e:	232b      	movmi	r3, #43	; 0x2b
 8007950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007954:	f89a 3000 	ldrb.w	r3, [sl]
 8007958:	2b2a      	cmp	r3, #42	; 0x2a
 800795a:	d015      	beq.n	8007988 <_vfiprintf_r+0x13c>
 800795c:	9a07      	ldr	r2, [sp, #28]
 800795e:	4654      	mov	r4, sl
 8007960:	2000      	movs	r0, #0
 8007962:	f04f 0c0a 	mov.w	ip, #10
 8007966:	4621      	mov	r1, r4
 8007968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796c:	3b30      	subs	r3, #48	; 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d94e      	bls.n	8007a10 <_vfiprintf_r+0x1c4>
 8007972:	b1b0      	cbz	r0, 80079a2 <_vfiprintf_r+0x156>
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	e014      	b.n	80079a2 <_vfiprintf_r+0x156>
 8007978:	eba0 0308 	sub.w	r3, r0, r8
 800797c:	fa09 f303 	lsl.w	r3, r9, r3
 8007980:	4313      	orrs	r3, r2
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	46a2      	mov	sl, r4
 8007986:	e7d2      	b.n	800792e <_vfiprintf_r+0xe2>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d19      	adds	r1, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfbb      	ittet	lt
 8007994:	425b      	neglt	r3, r3
 8007996:	f042 0202 	orrlt.w	r2, r2, #2
 800799a:	9307      	strge	r3, [sp, #28]
 800799c:	9307      	strlt	r3, [sp, #28]
 800799e:	bfb8      	it	lt
 80079a0:	9204      	strlt	r2, [sp, #16]
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	2b2e      	cmp	r3, #46	; 0x2e
 80079a6:	d10c      	bne.n	80079c2 <_vfiprintf_r+0x176>
 80079a8:	7863      	ldrb	r3, [r4, #1]
 80079aa:	2b2a      	cmp	r3, #42	; 0x2a
 80079ac:	d135      	bne.n	8007a1a <_vfiprintf_r+0x1ce>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bfb8      	it	lt
 80079ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80079be:	3402      	adds	r4, #2
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007aa8 <_vfiprintf_r+0x25c>
 80079c6:	7821      	ldrb	r1, [r4, #0]
 80079c8:	2203      	movs	r2, #3
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fc10 	bl	80001f0 <memchr>
 80079d0:	b140      	cbz	r0, 80079e4 <_vfiprintf_r+0x198>
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	eba0 000a 	sub.w	r0, r0, sl
 80079d8:	fa03 f000 	lsl.w	r0, r3, r0
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	4303      	orrs	r3, r0
 80079e0:	3401      	adds	r4, #1
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e8:	482c      	ldr	r0, [pc, #176]	; (8007a9c <_vfiprintf_r+0x250>)
 80079ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ee:	2206      	movs	r2, #6
 80079f0:	f7f8 fbfe 	bl	80001f0 <memchr>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d03f      	beq.n	8007a78 <_vfiprintf_r+0x22c>
 80079f8:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <_vfiprintf_r+0x254>)
 80079fa:	bb1b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x1f8>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	3308      	adds	r3, #8
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	443b      	add	r3, r7
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	e767      	b.n	80078e0 <_vfiprintf_r+0x94>
 8007a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a14:	460c      	mov	r4, r1
 8007a16:	2001      	movs	r0, #1
 8007a18:	e7a5      	b.n	8007966 <_vfiprintf_r+0x11a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	3401      	adds	r4, #1
 8007a1e:	9305      	str	r3, [sp, #20]
 8007a20:	4619      	mov	r1, r3
 8007a22:	f04f 0c0a 	mov.w	ip, #10
 8007a26:	4620      	mov	r0, r4
 8007a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2c:	3a30      	subs	r2, #48	; 0x30
 8007a2e:	2a09      	cmp	r2, #9
 8007a30:	d903      	bls.n	8007a3a <_vfiprintf_r+0x1ee>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c5      	beq.n	80079c2 <_vfiprintf_r+0x176>
 8007a36:	9105      	str	r1, [sp, #20]
 8007a38:	e7c3      	b.n	80079c2 <_vfiprintf_r+0x176>
 8007a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a3e:	4604      	mov	r4, r0
 8007a40:	2301      	movs	r3, #1
 8007a42:	e7f0      	b.n	8007a26 <_vfiprintf_r+0x1da>
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <_vfiprintf_r+0x258>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f7fd ffde 	bl	8005a10 <_printf_float>
 8007a54:	4607      	mov	r7, r0
 8007a56:	1c78      	adds	r0, r7, #1
 8007a58:	d1d6      	bne.n	8007a08 <_vfiprintf_r+0x1bc>
 8007a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5c:	07d9      	lsls	r1, r3, #31
 8007a5e:	d405      	bmi.n	8007a6c <_vfiprintf_r+0x220>
 8007a60:	89ab      	ldrh	r3, [r5, #12]
 8007a62:	059a      	lsls	r2, r3, #22
 8007a64:	d402      	bmi.n	8007a6c <_vfiprintf_r+0x220>
 8007a66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a68:	f000 faaf 	bl	8007fca <__retarget_lock_release_recursive>
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	065b      	lsls	r3, r3, #25
 8007a70:	f53f af12 	bmi.w	8007898 <_vfiprintf_r+0x4c>
 8007a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a76:	e711      	b.n	800789c <_vfiprintf_r+0x50>
 8007a78:	ab03      	add	r3, sp, #12
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	462a      	mov	r2, r5
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <_vfiprintf_r+0x258>)
 8007a80:	a904      	add	r1, sp, #16
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7fe fa68 	bl	8005f58 <_printf_i>
 8007a88:	e7e4      	b.n	8007a54 <_vfiprintf_r+0x208>
 8007a8a:	bf00      	nop
 8007a8c:	0800966c 	.word	0x0800966c
 8007a90:	0800968c 	.word	0x0800968c
 8007a94:	0800964c 	.word	0x0800964c
 8007a98:	0800953a 	.word	0x0800953a
 8007a9c:	08009544 	.word	0x08009544
 8007aa0:	08005a11 	.word	0x08005a11
 8007aa4:	08007827 	.word	0x08007827
 8007aa8:	08009540 	.word	0x08009540

08007aac <__swbuf_r>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	b118      	cbz	r0, 8007abe <__swbuf_r+0x12>
 8007ab6:	6983      	ldr	r3, [r0, #24]
 8007ab8:	b90b      	cbnz	r3, 8007abe <__swbuf_r+0x12>
 8007aba:	f000 f9e7 	bl	8007e8c <__sinit>
 8007abe:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <__swbuf_r+0x98>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d12b      	bne.n	8007b1c <__swbuf_r+0x70>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	071a      	lsls	r2, r3, #28
 8007ace:	d52f      	bpl.n	8007b30 <__swbuf_r+0x84>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b36b      	cbz	r3, 8007b30 <__swbuf_r+0x84>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	6820      	ldr	r0, [r4, #0]
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	b2f6      	uxtb	r6, r6
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	4637      	mov	r7, r6
 8007ae2:	dc04      	bgt.n	8007aee <__swbuf_r+0x42>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 f93c 	bl	8007d64 <_fflush_r>
 8007aec:	bb30      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	701e      	strb	r6, [r3, #0]
 8007afc:	6963      	ldr	r3, [r4, #20]
 8007afe:	3001      	adds	r0, #1
 8007b00:	4283      	cmp	r3, r0
 8007b02:	d004      	beq.n	8007b0e <__swbuf_r+0x62>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d506      	bpl.n	8007b18 <__swbuf_r+0x6c>
 8007b0a:	2e0a      	cmp	r6, #10
 8007b0c:	d104      	bne.n	8007b18 <__swbuf_r+0x6c>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f927 	bl	8007d64 <_fflush_r>
 8007b16:	b988      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <__swbuf_r+0x9c>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d101      	bne.n	8007b26 <__swbuf_r+0x7a>
 8007b22:	68ac      	ldr	r4, [r5, #8]
 8007b24:	e7cf      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <__swbuf_r+0xa0>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	bf08      	it	eq
 8007b2c:	68ec      	ldreq	r4, [r5, #12]
 8007b2e:	e7ca      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f81a 	bl	8007b6c <__swsetup_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d0cb      	beq.n	8007ad4 <__swbuf_r+0x28>
 8007b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b40:	e7ea      	b.n	8007b18 <__swbuf_r+0x6c>
 8007b42:	bf00      	nop
 8007b44:	0800966c 	.word	0x0800966c
 8007b48:	0800968c 	.word	0x0800968c
 8007b4c:	0800964c 	.word	0x0800964c

08007b50 <__ascii_wctomb>:
 8007b50:	b149      	cbz	r1, 8007b66 <__ascii_wctomb+0x16>
 8007b52:	2aff      	cmp	r2, #255	; 0xff
 8007b54:	bf85      	ittet	hi
 8007b56:	238a      	movhi	r3, #138	; 0x8a
 8007b58:	6003      	strhi	r3, [r0, #0]
 8007b5a:	700a      	strbls	r2, [r1, #0]
 8007b5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b60:	bf98      	it	ls
 8007b62:	2001      	movls	r0, #1
 8007b64:	4770      	bx	lr
 8007b66:	4608      	mov	r0, r1
 8007b68:	4770      	bx	lr
	...

08007b6c <__swsetup_r>:
 8007b6c:	4b32      	ldr	r3, [pc, #200]	; (8007c38 <__swsetup_r+0xcc>)
 8007b6e:	b570      	push	{r4, r5, r6, lr}
 8007b70:	681d      	ldr	r5, [r3, #0]
 8007b72:	4606      	mov	r6, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	b125      	cbz	r5, 8007b82 <__swsetup_r+0x16>
 8007b78:	69ab      	ldr	r3, [r5, #24]
 8007b7a:	b913      	cbnz	r3, 8007b82 <__swsetup_r+0x16>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f985 	bl	8007e8c <__sinit>
 8007b82:	4b2e      	ldr	r3, [pc, #184]	; (8007c3c <__swsetup_r+0xd0>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d10f      	bne.n	8007ba8 <__swsetup_r+0x3c>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b90:	0719      	lsls	r1, r3, #28
 8007b92:	d42c      	bmi.n	8007bee <__swsetup_r+0x82>
 8007b94:	06dd      	lsls	r5, r3, #27
 8007b96:	d411      	bmi.n	8007bbc <__swsetup_r+0x50>
 8007b98:	2309      	movs	r3, #9
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba6:	e03e      	b.n	8007c26 <__swsetup_r+0xba>
 8007ba8:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <__swsetup_r+0xd4>)
 8007baa:	429c      	cmp	r4, r3
 8007bac:	d101      	bne.n	8007bb2 <__swsetup_r+0x46>
 8007bae:	68ac      	ldr	r4, [r5, #8]
 8007bb0:	e7eb      	b.n	8007b8a <__swsetup_r+0x1e>
 8007bb2:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <__swsetup_r+0xd8>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	bf08      	it	eq
 8007bb8:	68ec      	ldreq	r4, [r5, #12]
 8007bba:	e7e6      	b.n	8007b8a <__swsetup_r+0x1e>
 8007bbc:	0758      	lsls	r0, r3, #29
 8007bbe:	d512      	bpl.n	8007be6 <__swsetup_r+0x7a>
 8007bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc2:	b141      	cbz	r1, 8007bd6 <__swsetup_r+0x6a>
 8007bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	d002      	beq.n	8007bd2 <__swsetup_r+0x66>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7ff fd0b 	bl	80075e8 <_free_r>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	2300      	movs	r3, #0
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0308 	orr.w	r3, r3, #8
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	b94b      	cbnz	r3, 8007c06 <__swsetup_r+0x9a>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bfc:	d003      	beq.n	8007c06 <__swsetup_r+0x9a>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 fa07 	bl	8008014 <__smakebuf_r>
 8007c06:	89a0      	ldrh	r0, [r4, #12]
 8007c08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c0c:	f010 0301 	ands.w	r3, r0, #1
 8007c10:	d00a      	beq.n	8007c28 <__swsetup_r+0xbc>
 8007c12:	2300      	movs	r3, #0
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	425b      	negs	r3, r3
 8007c1a:	61a3      	str	r3, [r4, #24]
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	b943      	cbnz	r3, 8007c32 <__swsetup_r+0xc6>
 8007c20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c24:	d1ba      	bne.n	8007b9c <__swsetup_r+0x30>
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	0781      	lsls	r1, r0, #30
 8007c2a:	bf58      	it	pl
 8007c2c:	6963      	ldrpl	r3, [r4, #20]
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	e7f4      	b.n	8007c1c <__swsetup_r+0xb0>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e7f7      	b.n	8007c26 <__swsetup_r+0xba>
 8007c36:	bf00      	nop
 8007c38:	2000000c 	.word	0x2000000c
 8007c3c:	0800966c 	.word	0x0800966c
 8007c40:	0800968c 	.word	0x0800968c
 8007c44:	0800964c 	.word	0x0800964c

08007c48 <abort>:
 8007c48:	b508      	push	{r3, lr}
 8007c4a:	2006      	movs	r0, #6
 8007c4c:	f000 fa4a 	bl	80080e4 <raise>
 8007c50:	2001      	movs	r0, #1
 8007c52:	f7fa fa1f 	bl	8002094 <_exit>
	...

08007c58 <__sflush_r>:
 8007c58:	898a      	ldrh	r2, [r1, #12]
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	0710      	lsls	r0, r2, #28
 8007c62:	460c      	mov	r4, r1
 8007c64:	d458      	bmi.n	8007d18 <__sflush_r+0xc0>
 8007c66:	684b      	ldr	r3, [r1, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc05      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d0f9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	d032      	beq.n	8007cf0 <__sflush_r+0x98>
 8007c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	075a      	lsls	r2, r3, #29
 8007c90:	d505      	bpl.n	8007c9e <__sflush_r+0x46>
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	1ac0      	subs	r0, r0, r3
 8007c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c98:	b10b      	cbz	r3, 8007c9e <__sflush_r+0x46>
 8007c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b0      	blx	r6
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	d106      	bne.n	8007cbe <__sflush_r+0x66>
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	291d      	cmp	r1, #29
 8007cb4:	d82c      	bhi.n	8007d10 <__sflush_r+0xb8>
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	; (8007d60 <__sflush_r+0x108>)
 8007cb8:	40ca      	lsrs	r2, r1
 8007cba:	07d6      	lsls	r6, r2, #31
 8007cbc:	d528      	bpl.n	8007d10 <__sflush_r+0xb8>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6062      	str	r2, [r4, #4]
 8007cc2:	04d9      	lsls	r1, r3, #19
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	d504      	bpl.n	8007cd4 <__sflush_r+0x7c>
 8007cca:	1c42      	adds	r2, r0, #1
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0x7a>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b903      	cbnz	r3, 8007cd4 <__sflush_r+0x7c>
 8007cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	d0ca      	beq.n	8007c72 <__sflush_r+0x1a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__sflush_r+0x92>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7ff fc7f 	bl	80075e8 <_free_r>
 8007cea:	2000      	movs	r0, #0
 8007cec:	6360      	str	r0, [r4, #52]	; 0x34
 8007cee:	e7c1      	b.n	8007c74 <__sflush_r+0x1c>
 8007cf0:	6a21      	ldr	r1, [r4, #32]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	1c41      	adds	r1, r0, #1
 8007cfa:	d1c7      	bne.n	8007c8c <__sflush_r+0x34>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c4      	beq.n	8007c8c <__sflush_r+0x34>
 8007d02:	2b1d      	cmp	r3, #29
 8007d04:	d001      	beq.n	8007d0a <__sflush_r+0xb2>
 8007d06:	2b16      	cmp	r3, #22
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0xb6>
 8007d0a:	602f      	str	r7, [r5, #0]
 8007d0c:	e7b1      	b.n	8007c72 <__sflush_r+0x1a>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	e7ad      	b.n	8007c74 <__sflush_r+0x1c>
 8007d18:	690f      	ldr	r7, [r1, #16]
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	d0a9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007d1e:	0793      	lsls	r3, r2, #30
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	bf08      	it	eq
 8007d24:	694b      	ldreq	r3, [r1, #20]
 8007d26:	600f      	str	r7, [r1, #0]
 8007d28:	bf18      	it	ne
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	eba6 0807 	sub.w	r8, r6, r7
 8007d30:	608b      	str	r3, [r1, #8]
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	dd9c      	ble.n	8007c72 <__sflush_r+0x1a>
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d3c:	4643      	mov	r3, r8
 8007d3e:	463a      	mov	r2, r7
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b0      	blx	r6
 8007d44:	2800      	cmp	r0, #0
 8007d46:	dc06      	bgt.n	8007d56 <__sflush_r+0xfe>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e78e      	b.n	8007c74 <__sflush_r+0x1c>
 8007d56:	4407      	add	r7, r0
 8007d58:	eba8 0800 	sub.w	r8, r8, r0
 8007d5c:	e7e9      	b.n	8007d32 <__sflush_r+0xda>
 8007d5e:	bf00      	nop
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b913      	cbnz	r3, 8007d74 <_fflush_r+0x10>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	4628      	mov	r0, r5
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	b118      	cbz	r0, 8007d7e <_fflush_r+0x1a>
 8007d76:	6983      	ldr	r3, [r0, #24]
 8007d78:	b90b      	cbnz	r3, 8007d7e <_fflush_r+0x1a>
 8007d7a:	f000 f887 	bl	8007e8c <__sinit>
 8007d7e:	4b14      	ldr	r3, [pc, #80]	; (8007dd0 <_fflush_r+0x6c>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d11b      	bne.n	8007dbc <_fflush_r+0x58>
 8007d84:	686c      	ldr	r4, [r5, #4]
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0ef      	beq.n	8007d6e <_fflush_r+0xa>
 8007d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d90:	07d0      	lsls	r0, r2, #31
 8007d92:	d404      	bmi.n	8007d9e <_fflush_r+0x3a>
 8007d94:	0599      	lsls	r1, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_fflush_r+0x3a>
 8007d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9a:	f000 f915 	bl	8007fc8 <__retarget_lock_acquire_recursive>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4621      	mov	r1, r4
 8007da2:	f7ff ff59 	bl	8007c58 <__sflush_r>
 8007da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	4605      	mov	r5, r0
 8007dac:	d4e0      	bmi.n	8007d70 <_fflush_r+0xc>
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	059b      	lsls	r3, r3, #22
 8007db2:	d4dd      	bmi.n	8007d70 <_fflush_r+0xc>
 8007db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db6:	f000 f908 	bl	8007fca <__retarget_lock_release_recursive>
 8007dba:	e7d9      	b.n	8007d70 <_fflush_r+0xc>
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <_fflush_r+0x70>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <_fflush_r+0x62>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7df      	b.n	8007d86 <_fflush_r+0x22>
 8007dc6:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <_fflush_r+0x74>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7da      	b.n	8007d86 <_fflush_r+0x22>
 8007dd0:	0800966c 	.word	0x0800966c
 8007dd4:	0800968c 	.word	0x0800968c
 8007dd8:	0800964c 	.word	0x0800964c

08007ddc <std>:
 8007ddc:	2300      	movs	r3, #0
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	e9c0 3300 	strd	r3, r3, [r0]
 8007de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dea:	6083      	str	r3, [r0, #8]
 8007dec:	8181      	strh	r1, [r0, #12]
 8007dee:	6643      	str	r3, [r0, #100]	; 0x64
 8007df0:	81c2      	strh	r2, [r0, #14]
 8007df2:	6183      	str	r3, [r0, #24]
 8007df4:	4619      	mov	r1, r3
 8007df6:	2208      	movs	r2, #8
 8007df8:	305c      	adds	r0, #92	; 0x5c
 8007dfa:	f7fd fd61 	bl	80058c0 <memset>
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x38>)
 8007e00:	6263      	str	r3, [r4, #36]	; 0x24
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x3c>)
 8007e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <std+0x40>)
 8007e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x44>)
 8007e0c:	6224      	str	r4, [r4, #32]
 8007e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	bf00      	nop
 8007e14:	0800811d 	.word	0x0800811d
 8007e18:	0800813f 	.word	0x0800813f
 8007e1c:	08008177 	.word	0x08008177
 8007e20:	0800819b 	.word	0x0800819b

08007e24 <_cleanup_r>:
 8007e24:	4901      	ldr	r1, [pc, #4]	; (8007e2c <_cleanup_r+0x8>)
 8007e26:	f000 b8af 	b.w	8007f88 <_fwalk_reent>
 8007e2a:	bf00      	nop
 8007e2c:	08007d65 	.word	0x08007d65

08007e30 <__sfmoreglue>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	1e4a      	subs	r2, r1, #1
 8007e34:	2568      	movs	r5, #104	; 0x68
 8007e36:	4355      	muls	r5, r2
 8007e38:	460e      	mov	r6, r1
 8007e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e3e:	f7ff fc23 	bl	8007688 <_malloc_r>
 8007e42:	4604      	mov	r4, r0
 8007e44:	b140      	cbz	r0, 8007e58 <__sfmoreglue+0x28>
 8007e46:	2100      	movs	r1, #0
 8007e48:	e9c0 1600 	strd	r1, r6, [r0]
 8007e4c:	300c      	adds	r0, #12
 8007e4e:	60a0      	str	r0, [r4, #8]
 8007e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e54:	f7fd fd34 	bl	80058c0 <memset>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}

08007e5c <__sfp_lock_acquire>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sfp_lock_acquire+0x8>)
 8007e5e:	f000 b8b3 	b.w	8007fc8 <__retarget_lock_acquire_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000310 	.word	0x20000310

08007e68 <__sfp_lock_release>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__sfp_lock_release+0x8>)
 8007e6a:	f000 b8ae 	b.w	8007fca <__retarget_lock_release_recursive>
 8007e6e:	bf00      	nop
 8007e70:	20000310 	.word	0x20000310

08007e74 <__sinit_lock_acquire>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__sinit_lock_acquire+0x8>)
 8007e76:	f000 b8a7 	b.w	8007fc8 <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	2000030b 	.word	0x2000030b

08007e80 <__sinit_lock_release>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__sinit_lock_release+0x8>)
 8007e82:	f000 b8a2 	b.w	8007fca <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	2000030b 	.word	0x2000030b

08007e8c <__sinit>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4604      	mov	r4, r0
 8007e90:	f7ff fff0 	bl	8007e74 <__sinit_lock_acquire>
 8007e94:	69a3      	ldr	r3, [r4, #24]
 8007e96:	b11b      	cbz	r3, 8007ea0 <__sinit+0x14>
 8007e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e9c:	f7ff bff0 	b.w	8007e80 <__sinit_lock_release>
 8007ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <__sinit+0x68>)
 8007ea8:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <__sinit+0x6c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	bf04      	itt	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	61a3      	streq	r3, [r4, #24]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f820 	bl	8007efc <__sfp>
 8007ebc:	6060      	str	r0, [r4, #4]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f81c 	bl	8007efc <__sfp>
 8007ec4:	60a0      	str	r0, [r4, #8]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 f818 	bl	8007efc <__sfp>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	60e0      	str	r0, [r4, #12]
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	6860      	ldr	r0, [r4, #4]
 8007ed4:	f7ff ff82 	bl	8007ddc <std>
 8007ed8:	68a0      	ldr	r0, [r4, #8]
 8007eda:	2201      	movs	r2, #1
 8007edc:	2109      	movs	r1, #9
 8007ede:	f7ff ff7d 	bl	8007ddc <std>
 8007ee2:	68e0      	ldr	r0, [r4, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f7ff ff78 	bl	8007ddc <std>
 8007eec:	2301      	movs	r3, #1
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	e7d2      	b.n	8007e98 <__sinit+0xc>
 8007ef2:	bf00      	nop
 8007ef4:	080092cc 	.word	0x080092cc
 8007ef8:	08007e25 	.word	0x08007e25

08007efc <__sfp>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	4607      	mov	r7, r0
 8007f00:	f7ff ffac 	bl	8007e5c <__sfp_lock_acquire>
 8007f04:	4b1e      	ldr	r3, [pc, #120]	; (8007f80 <__sfp+0x84>)
 8007f06:	681e      	ldr	r6, [r3, #0]
 8007f08:	69b3      	ldr	r3, [r6, #24]
 8007f0a:	b913      	cbnz	r3, 8007f12 <__sfp+0x16>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff ffbd 	bl	8007e8c <__sinit>
 8007f12:	3648      	adds	r6, #72	; 0x48
 8007f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	d503      	bpl.n	8007f24 <__sfp+0x28>
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	b30b      	cbz	r3, 8007f64 <__sfp+0x68>
 8007f20:	6836      	ldr	r6, [r6, #0]
 8007f22:	e7f7      	b.n	8007f14 <__sfp+0x18>
 8007f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f28:	b9d5      	cbnz	r5, 8007f60 <__sfp+0x64>
 8007f2a:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <__sfp+0x88>)
 8007f2c:	60e3      	str	r3, [r4, #12]
 8007f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f32:	6665      	str	r5, [r4, #100]	; 0x64
 8007f34:	f000 f847 	bl	8007fc6 <__retarget_lock_init_recursive>
 8007f38:	f7ff ff96 	bl	8007e68 <__sfp_lock_release>
 8007f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f44:	6025      	str	r5, [r4, #0]
 8007f46:	61a5      	str	r5, [r4, #24]
 8007f48:	2208      	movs	r2, #8
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f50:	f7fd fcb6 	bl	80058c0 <memset>
 8007f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f60:	3468      	adds	r4, #104	; 0x68
 8007f62:	e7d9      	b.n	8007f18 <__sfp+0x1c>
 8007f64:	2104      	movs	r1, #4
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7ff ff62 	bl	8007e30 <__sfmoreglue>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	6030      	str	r0, [r6, #0]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1d5      	bne.n	8007f20 <__sfp+0x24>
 8007f74:	f7ff ff78 	bl	8007e68 <__sfp_lock_release>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	e7ee      	b.n	8007f5c <__sfp+0x60>
 8007f7e:	bf00      	nop
 8007f80:	080092cc 	.word	0x080092cc
 8007f84:	ffff0001 	.word	0xffff0001

08007f88 <_fwalk_reent>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	4688      	mov	r8, r1
 8007f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f94:	2700      	movs	r7, #0
 8007f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f9e:	d505      	bpl.n	8007fac <_fwalk_reent+0x24>
 8007fa0:	6824      	ldr	r4, [r4, #0]
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	d1f7      	bne.n	8007f96 <_fwalk_reent+0xe>
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fac:	89ab      	ldrh	r3, [r5, #12]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d907      	bls.n	8007fc2 <_fwalk_reent+0x3a>
 8007fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	d003      	beq.n	8007fc2 <_fwalk_reent+0x3a>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	47c0      	blx	r8
 8007fc0:	4307      	orrs	r7, r0
 8007fc2:	3568      	adds	r5, #104	; 0x68
 8007fc4:	e7e9      	b.n	8007f9a <_fwalk_reent+0x12>

08007fc6 <__retarget_lock_init_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <__retarget_lock_acquire_recursive>:
 8007fc8:	4770      	bx	lr

08007fca <__retarget_lock_release_recursive>:
 8007fca:	4770      	bx	lr

08007fcc <__swhatbuf_r>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	460e      	mov	r6, r1
 8007fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	b096      	sub	sp, #88	; 0x58
 8007fd8:	4614      	mov	r4, r2
 8007fda:	461d      	mov	r5, r3
 8007fdc:	da07      	bge.n	8007fee <__swhatbuf_r+0x22>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	89b3      	ldrh	r3, [r6, #12]
 8007fe4:	061a      	lsls	r2, r3, #24
 8007fe6:	d410      	bmi.n	800800a <__swhatbuf_r+0x3e>
 8007fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fec:	e00e      	b.n	800800c <__swhatbuf_r+0x40>
 8007fee:	466a      	mov	r2, sp
 8007ff0:	f000 f8fa 	bl	80081e8 <_fstat_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dbf2      	blt.n	8007fde <__swhatbuf_r+0x12>
 8007ff8:	9a01      	ldr	r2, [sp, #4]
 8007ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008002:	425a      	negs	r2, r3
 8008004:	415a      	adcs	r2, r3
 8008006:	602a      	str	r2, [r5, #0]
 8008008:	e7ee      	b.n	8007fe8 <__swhatbuf_r+0x1c>
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	2000      	movs	r0, #0
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	b016      	add	sp, #88	; 0x58
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__smakebuf_r>:
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008018:	079d      	lsls	r5, r3, #30
 800801a:	4606      	mov	r6, r0
 800801c:	460c      	mov	r4, r1
 800801e:	d507      	bpl.n	8008030 <__smakebuf_r+0x1c>
 8008020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	2301      	movs	r3, #1
 800802a:	6163      	str	r3, [r4, #20]
 800802c:	b002      	add	sp, #8
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	ab01      	add	r3, sp, #4
 8008032:	466a      	mov	r2, sp
 8008034:	f7ff ffca 	bl	8007fcc <__swhatbuf_r>
 8008038:	9900      	ldr	r1, [sp, #0]
 800803a:	4605      	mov	r5, r0
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fb23 	bl	8007688 <_malloc_r>
 8008042:	b948      	cbnz	r0, 8008058 <__smakebuf_r+0x44>
 8008044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008048:	059a      	lsls	r2, r3, #22
 800804a:	d4ef      	bmi.n	800802c <__smakebuf_r+0x18>
 800804c:	f023 0303 	bic.w	r3, r3, #3
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	e7e3      	b.n	8008020 <__smakebuf_r+0xc>
 8008058:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <__smakebuf_r+0x7c>)
 800805a:	62b3      	str	r3, [r6, #40]	; 0x28
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	6020      	str	r0, [r4, #0]
 8008060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	9b00      	ldr	r3, [sp, #0]
 8008068:	6163      	str	r3, [r4, #20]
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	6120      	str	r0, [r4, #16]
 800806e:	b15b      	cbz	r3, 8008088 <__smakebuf_r+0x74>
 8008070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008074:	4630      	mov	r0, r6
 8008076:	f000 f8c9 	bl	800820c <_isatty_r>
 800807a:	b128      	cbz	r0, 8008088 <__smakebuf_r+0x74>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f023 0303 	bic.w	r3, r3, #3
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	89a0      	ldrh	r0, [r4, #12]
 800808a:	4305      	orrs	r5, r0
 800808c:	81a5      	strh	r5, [r4, #12]
 800808e:	e7cd      	b.n	800802c <__smakebuf_r+0x18>
 8008090:	08007e25 	.word	0x08007e25

08008094 <_raise_r>:
 8008094:	291f      	cmp	r1, #31
 8008096:	b538      	push	{r3, r4, r5, lr}
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	d904      	bls.n	80080a8 <_raise_r+0x14>
 800809e:	2316      	movs	r3, #22
 80080a0:	6003      	str	r3, [r0, #0]
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080aa:	b112      	cbz	r2, 80080b2 <_raise_r+0x1e>
 80080ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080b0:	b94b      	cbnz	r3, 80080c6 <_raise_r+0x32>
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f830 	bl	8008118 <_getpid_r>
 80080b8:	462a      	mov	r2, r5
 80080ba:	4601      	mov	r1, r0
 80080bc:	4620      	mov	r0, r4
 80080be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c2:	f000 b817 	b.w	80080f4 <_kill_r>
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d00a      	beq.n	80080e0 <_raise_r+0x4c>
 80080ca:	1c59      	adds	r1, r3, #1
 80080cc:	d103      	bne.n	80080d6 <_raise_r+0x42>
 80080ce:	2316      	movs	r3, #22
 80080d0:	6003      	str	r3, [r0, #0]
 80080d2:	2001      	movs	r0, #1
 80080d4:	e7e7      	b.n	80080a6 <_raise_r+0x12>
 80080d6:	2400      	movs	r4, #0
 80080d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080dc:	4628      	mov	r0, r5
 80080de:	4798      	blx	r3
 80080e0:	2000      	movs	r0, #0
 80080e2:	e7e0      	b.n	80080a6 <_raise_r+0x12>

080080e4 <raise>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <raise+0xc>)
 80080e6:	4601      	mov	r1, r0
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f7ff bfd3 	b.w	8008094 <_raise_r>
 80080ee:	bf00      	nop
 80080f0:	2000000c 	.word	0x2000000c

080080f4 <_kill_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	; (8008114 <_kill_r+0x20>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	4611      	mov	r1, r2
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	f7f9 ffb7 	bl	8002074 <_kill>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d102      	bne.n	8008110 <_kill_r+0x1c>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b103      	cbz	r3, 8008110 <_kill_r+0x1c>
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	20000304 	.word	0x20000304

08008118 <_getpid_r>:
 8008118:	f7f9 bfa4 	b.w	8002064 <_getpid>

0800811c <__sread>:
 800811c:	b510      	push	{r4, lr}
 800811e:	460c      	mov	r4, r1
 8008120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008124:	f000 f894 	bl	8008250 <_read_r>
 8008128:	2800      	cmp	r0, #0
 800812a:	bfab      	itete	ge
 800812c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800812e:	89a3      	ldrhlt	r3, [r4, #12]
 8008130:	181b      	addge	r3, r3, r0
 8008132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008136:	bfac      	ite	ge
 8008138:	6563      	strge	r3, [r4, #84]	; 0x54
 800813a:	81a3      	strhlt	r3, [r4, #12]
 800813c:	bd10      	pop	{r4, pc}

0800813e <__swrite>:
 800813e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	461f      	mov	r7, r3
 8008144:	898b      	ldrh	r3, [r1, #12]
 8008146:	05db      	lsls	r3, r3, #23
 8008148:	4605      	mov	r5, r0
 800814a:	460c      	mov	r4, r1
 800814c:	4616      	mov	r6, r2
 800814e:	d505      	bpl.n	800815c <__swrite+0x1e>
 8008150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008154:	2302      	movs	r3, #2
 8008156:	2200      	movs	r2, #0
 8008158:	f000 f868 	bl	800822c <_lseek_r>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	4632      	mov	r2, r6
 800816a:	463b      	mov	r3, r7
 800816c:	4628      	mov	r0, r5
 800816e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	f000 b817 	b.w	80081a4 <_write_r>

08008176 <__sseek>:
 8008176:	b510      	push	{r4, lr}
 8008178:	460c      	mov	r4, r1
 800817a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817e:	f000 f855 	bl	800822c <_lseek_r>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	bf15      	itete	ne
 8008188:	6560      	strne	r0, [r4, #84]	; 0x54
 800818a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800818e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008192:	81a3      	strheq	r3, [r4, #12]
 8008194:	bf18      	it	ne
 8008196:	81a3      	strhne	r3, [r4, #12]
 8008198:	bd10      	pop	{r4, pc}

0800819a <__sclose>:
 800819a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819e:	f000 b813 	b.w	80081c8 <_close_r>
	...

080081a4 <_write_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4d07      	ldr	r5, [pc, #28]	; (80081c4 <_write_r+0x20>)
 80081a8:	4604      	mov	r4, r0
 80081aa:	4608      	mov	r0, r1
 80081ac:	4611      	mov	r1, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	602a      	str	r2, [r5, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	f7f9 ff95 	bl	80020e2 <_write>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_write_r+0x1e>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_write_r+0x1e>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	20000304 	.word	0x20000304

080081c8 <_close_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4d06      	ldr	r5, [pc, #24]	; (80081e4 <_close_r+0x1c>)
 80081cc:	2300      	movs	r3, #0
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	f7f9 ffa1 	bl	800211a <_close>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_close_r+0x1a>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_close_r+0x1a>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	20000304 	.word	0x20000304

080081e8 <_fstat_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d07      	ldr	r5, [pc, #28]	; (8008208 <_fstat_r+0x20>)
 80081ec:	2300      	movs	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	4611      	mov	r1, r2
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	f7f9 ff9c 	bl	8002132 <_fstat>
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d102      	bne.n	8008204 <_fstat_r+0x1c>
 80081fe:	682b      	ldr	r3, [r5, #0]
 8008200:	b103      	cbz	r3, 8008204 <_fstat_r+0x1c>
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	20000304 	.word	0x20000304

0800820c <_isatty_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d06      	ldr	r5, [pc, #24]	; (8008228 <_isatty_r+0x1c>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	f7f9 ff9b 	bl	8002152 <_isatty>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_isatty_r+0x1a>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_isatty_r+0x1a>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20000304 	.word	0x20000304

0800822c <_lseek_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	; (800824c <_lseek_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7f9 ff94 	bl	8002168 <_lseek>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_lseek_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_lseek_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	20000304 	.word	0x20000304

08008250 <_read_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	; (8008270 <_read_r+0x20>)
 8008254:	4604      	mov	r4, r0
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	602a      	str	r2, [r5, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f7f9 ff22 	bl	80020a8 <_read>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_read_r+0x1e>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_read_r+0x1e>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20000304 	.word	0x20000304

08008274 <floorf>:
 8008274:	ee10 3a10 	vmov	r3, s0
 8008278:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800827c:	3a7f      	subs	r2, #127	; 0x7f
 800827e:	2a16      	cmp	r2, #22
 8008280:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008284:	dc2a      	bgt.n	80082dc <floorf+0x68>
 8008286:	2a00      	cmp	r2, #0
 8008288:	da11      	bge.n	80082ae <floorf+0x3a>
 800828a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80082ec <floorf+0x78>
 800828e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008292:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829a:	dd05      	ble.n	80082a8 <floorf+0x34>
 800829c:	2b00      	cmp	r3, #0
 800829e:	da23      	bge.n	80082e8 <floorf+0x74>
 80082a0:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <floorf+0x7c>)
 80082a2:	2900      	cmp	r1, #0
 80082a4:	bf18      	it	ne
 80082a6:	4613      	movne	r3, r2
 80082a8:	ee00 3a10 	vmov	s0, r3
 80082ac:	4770      	bx	lr
 80082ae:	4911      	ldr	r1, [pc, #68]	; (80082f4 <floorf+0x80>)
 80082b0:	4111      	asrs	r1, r2
 80082b2:	420b      	tst	r3, r1
 80082b4:	d0fa      	beq.n	80082ac <floorf+0x38>
 80082b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80082ec <floorf+0x78>
 80082ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	ddef      	ble.n	80082a8 <floorf+0x34>
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bfbe      	ittt	lt
 80082cc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80082d0:	fa40 f202 	asrlt.w	r2, r0, r2
 80082d4:	189b      	addlt	r3, r3, r2
 80082d6:	ea23 0301 	bic.w	r3, r3, r1
 80082da:	e7e5      	b.n	80082a8 <floorf+0x34>
 80082dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80082e0:	d3e4      	bcc.n	80082ac <floorf+0x38>
 80082e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082e6:	4770      	bx	lr
 80082e8:	2300      	movs	r3, #0
 80082ea:	e7dd      	b.n	80082a8 <floorf+0x34>
 80082ec:	7149f2ca 	.word	0x7149f2ca
 80082f0:	bf800000 	.word	0xbf800000
 80082f4:	007fffff 	.word	0x007fffff

080082f8 <pow>:
 80082f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082fc:	ec59 8b10 	vmov	r8, r9, d0
 8008300:	ec57 6b11 	vmov	r6, r7, d1
 8008304:	f000 f8a8 	bl	8008458 <__ieee754_pow>
 8008308:	4b4e      	ldr	r3, [pc, #312]	; (8008444 <pow+0x14c>)
 800830a:	f993 3000 	ldrsb.w	r3, [r3]
 800830e:	3301      	adds	r3, #1
 8008310:	ec55 4b10 	vmov	r4, r5, d0
 8008314:	d015      	beq.n	8008342 <pow+0x4a>
 8008316:	4632      	mov	r2, r6
 8008318:	463b      	mov	r3, r7
 800831a:	4630      	mov	r0, r6
 800831c:	4639      	mov	r1, r7
 800831e:	f7f8 fc0d 	bl	8000b3c <__aeabi_dcmpun>
 8008322:	b970      	cbnz	r0, 8008342 <pow+0x4a>
 8008324:	4642      	mov	r2, r8
 8008326:	464b      	mov	r3, r9
 8008328:	4640      	mov	r0, r8
 800832a:	4649      	mov	r1, r9
 800832c:	f7f8 fc06 	bl	8000b3c <__aeabi_dcmpun>
 8008330:	2200      	movs	r2, #0
 8008332:	2300      	movs	r3, #0
 8008334:	b148      	cbz	r0, 800834a <pow+0x52>
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800833e:	2800      	cmp	r0, #0
 8008340:	d17d      	bne.n	800843e <pow+0x146>
 8008342:	ec45 4b10 	vmov	d0, r4, r5
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f8 fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008352:	b1e0      	cbz	r0, 800838e <pow+0x96>
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008360:	2800      	cmp	r0, #0
 8008362:	d16c      	bne.n	800843e <pow+0x146>
 8008364:	ec47 6b10 	vmov	d0, r6, r7
 8008368:	f000 fe55 	bl	8009016 <finite>
 800836c:	2800      	cmp	r0, #0
 800836e:	d0e8      	beq.n	8008342 <pow+0x4a>
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f8 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	d0e0      	beq.n	8008342 <pow+0x4a>
 8008380:	f7fd fa74 	bl	800586c <__errno>
 8008384:	2321      	movs	r3, #33	; 0x21
 8008386:	6003      	str	r3, [r0, #0]
 8008388:	2400      	movs	r4, #0
 800838a:	4d2f      	ldr	r5, [pc, #188]	; (8008448 <pow+0x150>)
 800838c:	e7d9      	b.n	8008342 <pow+0x4a>
 800838e:	ec45 4b10 	vmov	d0, r4, r5
 8008392:	f000 fe40 	bl	8009016 <finite>
 8008396:	bbb8      	cbnz	r0, 8008408 <pow+0x110>
 8008398:	ec49 8b10 	vmov	d0, r8, r9
 800839c:	f000 fe3b 	bl	8009016 <finite>
 80083a0:	b390      	cbz	r0, 8008408 <pow+0x110>
 80083a2:	ec47 6b10 	vmov	d0, r6, r7
 80083a6:	f000 fe36 	bl	8009016 <finite>
 80083aa:	b368      	cbz	r0, 8008408 <pow+0x110>
 80083ac:	4622      	mov	r2, r4
 80083ae:	462b      	mov	r3, r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	4629      	mov	r1, r5
 80083b4:	f7f8 fbc2 	bl	8000b3c <__aeabi_dcmpun>
 80083b8:	b160      	cbz	r0, 80083d4 <pow+0xdc>
 80083ba:	f7fd fa57 	bl	800586c <__errno>
 80083be:	2321      	movs	r3, #33	; 0x21
 80083c0:	6003      	str	r3, [r0, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	2300      	movs	r3, #0
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7f8 fa47 	bl	800085c <__aeabi_ddiv>
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	e7b6      	b.n	8008342 <pow+0x4a>
 80083d4:	f7fd fa4a 	bl	800586c <__errno>
 80083d8:	2322      	movs	r3, #34	; 0x22
 80083da:	6003      	str	r3, [r0, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	f7f8 fb82 	bl	8000aec <__aeabi_dcmplt>
 80083e8:	2400      	movs	r4, #0
 80083ea:	b158      	cbz	r0, 8008404 <pow+0x10c>
 80083ec:	ec47 6b10 	vmov	d0, r6, r7
 80083f0:	f000 fe26 	bl	8009040 <rint>
 80083f4:	4632      	mov	r2, r6
 80083f6:	ec51 0b10 	vmov	r0, r1, d0
 80083fa:	463b      	mov	r3, r7
 80083fc:	f7f8 fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d0c2      	beq.n	800838a <pow+0x92>
 8008404:	4d11      	ldr	r5, [pc, #68]	; (800844c <pow+0x154>)
 8008406:	e79c      	b.n	8008342 <pow+0x4a>
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	f7f8 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8008414:	2800      	cmp	r0, #0
 8008416:	d094      	beq.n	8008342 <pow+0x4a>
 8008418:	ec49 8b10 	vmov	d0, r8, r9
 800841c:	f000 fdfb 	bl	8009016 <finite>
 8008420:	2800      	cmp	r0, #0
 8008422:	d08e      	beq.n	8008342 <pow+0x4a>
 8008424:	ec47 6b10 	vmov	d0, r6, r7
 8008428:	f000 fdf5 	bl	8009016 <finite>
 800842c:	2800      	cmp	r0, #0
 800842e:	d088      	beq.n	8008342 <pow+0x4a>
 8008430:	f7fd fa1c 	bl	800586c <__errno>
 8008434:	2322      	movs	r3, #34	; 0x22
 8008436:	6003      	str	r3, [r0, #0]
 8008438:	2400      	movs	r4, #0
 800843a:	2500      	movs	r5, #0
 800843c:	e781      	b.n	8008342 <pow+0x4a>
 800843e:	4d04      	ldr	r5, [pc, #16]	; (8008450 <pow+0x158>)
 8008440:	2400      	movs	r4, #0
 8008442:	e77e      	b.n	8008342 <pow+0x4a>
 8008444:	200001dc 	.word	0x200001dc
 8008448:	fff00000 	.word	0xfff00000
 800844c:	7ff00000 	.word	0x7ff00000
 8008450:	3ff00000 	.word	0x3ff00000
 8008454:	00000000 	.word	0x00000000

08008458 <__ieee754_pow>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	ed2d 8b06 	vpush	{d8-d10}
 8008460:	b08d      	sub	sp, #52	; 0x34
 8008462:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008466:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800846a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800846e:	ea56 0100 	orrs.w	r1, r6, r0
 8008472:	ec53 2b10 	vmov	r2, r3, d0
 8008476:	f000 84d1 	beq.w	8008e1c <__ieee754_pow+0x9c4>
 800847a:	497f      	ldr	r1, [pc, #508]	; (8008678 <__ieee754_pow+0x220>)
 800847c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008480:	428c      	cmp	r4, r1
 8008482:	ee10 8a10 	vmov	r8, s0
 8008486:	4699      	mov	r9, r3
 8008488:	dc09      	bgt.n	800849e <__ieee754_pow+0x46>
 800848a:	d103      	bne.n	8008494 <__ieee754_pow+0x3c>
 800848c:	b97a      	cbnz	r2, 80084ae <__ieee754_pow+0x56>
 800848e:	42a6      	cmp	r6, r4
 8008490:	dd02      	ble.n	8008498 <__ieee754_pow+0x40>
 8008492:	e00c      	b.n	80084ae <__ieee754_pow+0x56>
 8008494:	428e      	cmp	r6, r1
 8008496:	dc02      	bgt.n	800849e <__ieee754_pow+0x46>
 8008498:	428e      	cmp	r6, r1
 800849a:	d110      	bne.n	80084be <__ieee754_pow+0x66>
 800849c:	b178      	cbz	r0, 80084be <__ieee754_pow+0x66>
 800849e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80084a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80084a6:	ea54 0308 	orrs.w	r3, r4, r8
 80084aa:	f000 84b7 	beq.w	8008e1c <__ieee754_pow+0x9c4>
 80084ae:	4873      	ldr	r0, [pc, #460]	; (800867c <__ieee754_pow+0x224>)
 80084b0:	b00d      	add	sp, #52	; 0x34
 80084b2:	ecbd 8b06 	vpop	{d8-d10}
 80084b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f000 bdb9 	b.w	8009030 <nan>
 80084be:	f1b9 0f00 	cmp.w	r9, #0
 80084c2:	da36      	bge.n	8008532 <__ieee754_pow+0xda>
 80084c4:	496e      	ldr	r1, [pc, #440]	; (8008680 <__ieee754_pow+0x228>)
 80084c6:	428e      	cmp	r6, r1
 80084c8:	dc51      	bgt.n	800856e <__ieee754_pow+0x116>
 80084ca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80084ce:	428e      	cmp	r6, r1
 80084d0:	f340 84af 	ble.w	8008e32 <__ieee754_pow+0x9da>
 80084d4:	1531      	asrs	r1, r6, #20
 80084d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80084da:	2914      	cmp	r1, #20
 80084dc:	dd0f      	ble.n	80084fe <__ieee754_pow+0xa6>
 80084de:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80084e2:	fa20 fc01 	lsr.w	ip, r0, r1
 80084e6:	fa0c f101 	lsl.w	r1, ip, r1
 80084ea:	4281      	cmp	r1, r0
 80084ec:	f040 84a1 	bne.w	8008e32 <__ieee754_pow+0x9da>
 80084f0:	f00c 0c01 	and.w	ip, ip, #1
 80084f4:	f1cc 0102 	rsb	r1, ip, #2
 80084f8:	9100      	str	r1, [sp, #0]
 80084fa:	b180      	cbz	r0, 800851e <__ieee754_pow+0xc6>
 80084fc:	e059      	b.n	80085b2 <__ieee754_pow+0x15a>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d155      	bne.n	80085ae <__ieee754_pow+0x156>
 8008502:	f1c1 0114 	rsb	r1, r1, #20
 8008506:	fa46 fc01 	asr.w	ip, r6, r1
 800850a:	fa0c f101 	lsl.w	r1, ip, r1
 800850e:	42b1      	cmp	r1, r6
 8008510:	f040 848c 	bne.w	8008e2c <__ieee754_pow+0x9d4>
 8008514:	f00c 0c01 	and.w	ip, ip, #1
 8008518:	f1cc 0102 	rsb	r1, ip, #2
 800851c:	9100      	str	r1, [sp, #0]
 800851e:	4959      	ldr	r1, [pc, #356]	; (8008684 <__ieee754_pow+0x22c>)
 8008520:	428e      	cmp	r6, r1
 8008522:	d12d      	bne.n	8008580 <__ieee754_pow+0x128>
 8008524:	2f00      	cmp	r7, #0
 8008526:	da79      	bge.n	800861c <__ieee754_pow+0x1c4>
 8008528:	4956      	ldr	r1, [pc, #344]	; (8008684 <__ieee754_pow+0x22c>)
 800852a:	2000      	movs	r0, #0
 800852c:	f7f8 f996 	bl	800085c <__aeabi_ddiv>
 8008530:	e016      	b.n	8008560 <__ieee754_pow+0x108>
 8008532:	2100      	movs	r1, #0
 8008534:	9100      	str	r1, [sp, #0]
 8008536:	2800      	cmp	r0, #0
 8008538:	d13b      	bne.n	80085b2 <__ieee754_pow+0x15a>
 800853a:	494f      	ldr	r1, [pc, #316]	; (8008678 <__ieee754_pow+0x220>)
 800853c:	428e      	cmp	r6, r1
 800853e:	d1ee      	bne.n	800851e <__ieee754_pow+0xc6>
 8008540:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008544:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008548:	ea53 0308 	orrs.w	r3, r3, r8
 800854c:	f000 8466 	beq.w	8008e1c <__ieee754_pow+0x9c4>
 8008550:	4b4d      	ldr	r3, [pc, #308]	; (8008688 <__ieee754_pow+0x230>)
 8008552:	429c      	cmp	r4, r3
 8008554:	dd0d      	ble.n	8008572 <__ieee754_pow+0x11a>
 8008556:	2f00      	cmp	r7, #0
 8008558:	f280 8464 	bge.w	8008e24 <__ieee754_pow+0x9cc>
 800855c:	2000      	movs	r0, #0
 800855e:	2100      	movs	r1, #0
 8008560:	ec41 0b10 	vmov	d0, r0, r1
 8008564:	b00d      	add	sp, #52	; 0x34
 8008566:	ecbd 8b06 	vpop	{d8-d10}
 800856a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856e:	2102      	movs	r1, #2
 8008570:	e7e0      	b.n	8008534 <__ieee754_pow+0xdc>
 8008572:	2f00      	cmp	r7, #0
 8008574:	daf2      	bge.n	800855c <__ieee754_pow+0x104>
 8008576:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800857a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800857e:	e7ef      	b.n	8008560 <__ieee754_pow+0x108>
 8008580:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008584:	d104      	bne.n	8008590 <__ieee754_pow+0x138>
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	f7f8 f83d 	bl	8000608 <__aeabi_dmul>
 800858e:	e7e7      	b.n	8008560 <__ieee754_pow+0x108>
 8008590:	493e      	ldr	r1, [pc, #248]	; (800868c <__ieee754_pow+0x234>)
 8008592:	428f      	cmp	r7, r1
 8008594:	d10d      	bne.n	80085b2 <__ieee754_pow+0x15a>
 8008596:	f1b9 0f00 	cmp.w	r9, #0
 800859a:	db0a      	blt.n	80085b2 <__ieee754_pow+0x15a>
 800859c:	ec43 2b10 	vmov	d0, r2, r3
 80085a0:	b00d      	add	sp, #52	; 0x34
 80085a2:	ecbd 8b06 	vpop	{d8-d10}
 80085a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	f000 bc77 	b.w	8008e9c <__ieee754_sqrt>
 80085ae:	2100      	movs	r1, #0
 80085b0:	9100      	str	r1, [sp, #0]
 80085b2:	ec43 2b10 	vmov	d0, r2, r3
 80085b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085ba:	f000 fd23 	bl	8009004 <fabs>
 80085be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c2:	ec51 0b10 	vmov	r0, r1, d0
 80085c6:	f1b8 0f00 	cmp.w	r8, #0
 80085ca:	d12a      	bne.n	8008622 <__ieee754_pow+0x1ca>
 80085cc:	b12c      	cbz	r4, 80085da <__ieee754_pow+0x182>
 80085ce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008684 <__ieee754_pow+0x22c>
 80085d2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80085d6:	45e6      	cmp	lr, ip
 80085d8:	d123      	bne.n	8008622 <__ieee754_pow+0x1ca>
 80085da:	2f00      	cmp	r7, #0
 80085dc:	da05      	bge.n	80085ea <__ieee754_pow+0x192>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	2000      	movs	r0, #0
 80085e4:	4927      	ldr	r1, [pc, #156]	; (8008684 <__ieee754_pow+0x22c>)
 80085e6:	f7f8 f939 	bl	800085c <__aeabi_ddiv>
 80085ea:	f1b9 0f00 	cmp.w	r9, #0
 80085ee:	dab7      	bge.n	8008560 <__ieee754_pow+0x108>
 80085f0:	9b00      	ldr	r3, [sp, #0]
 80085f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80085f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085fa:	4323      	orrs	r3, r4
 80085fc:	d108      	bne.n	8008610 <__ieee754_pow+0x1b8>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4610      	mov	r0, r2
 8008604:	4619      	mov	r1, r3
 8008606:	f7f7 fe47 	bl	8000298 <__aeabi_dsub>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	e78d      	b.n	800852c <__ieee754_pow+0xd4>
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d1a4      	bne.n	8008560 <__ieee754_pow+0x108>
 8008616:	4602      	mov	r2, r0
 8008618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800861c:	4610      	mov	r0, r2
 800861e:	4619      	mov	r1, r3
 8008620:	e79e      	b.n	8008560 <__ieee754_pow+0x108>
 8008622:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008626:	f10c 35ff 	add.w	r5, ip, #4294967295
 800862a:	950a      	str	r5, [sp, #40]	; 0x28
 800862c:	9d00      	ldr	r5, [sp, #0]
 800862e:	46ac      	mov	ip, r5
 8008630:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008632:	ea5c 0505 	orrs.w	r5, ip, r5
 8008636:	d0e4      	beq.n	8008602 <__ieee754_pow+0x1aa>
 8008638:	4b15      	ldr	r3, [pc, #84]	; (8008690 <__ieee754_pow+0x238>)
 800863a:	429e      	cmp	r6, r3
 800863c:	f340 80fc 	ble.w	8008838 <__ieee754_pow+0x3e0>
 8008640:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008644:	429e      	cmp	r6, r3
 8008646:	4b10      	ldr	r3, [pc, #64]	; (8008688 <__ieee754_pow+0x230>)
 8008648:	dd07      	ble.n	800865a <__ieee754_pow+0x202>
 800864a:	429c      	cmp	r4, r3
 800864c:	dc0a      	bgt.n	8008664 <__ieee754_pow+0x20c>
 800864e:	2f00      	cmp	r7, #0
 8008650:	da84      	bge.n	800855c <__ieee754_pow+0x104>
 8008652:	a307      	add	r3, pc, #28	; (adr r3, 8008670 <__ieee754_pow+0x218>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	e795      	b.n	8008586 <__ieee754_pow+0x12e>
 800865a:	429c      	cmp	r4, r3
 800865c:	dbf7      	blt.n	800864e <__ieee754_pow+0x1f6>
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <__ieee754_pow+0x22c>)
 8008660:	429c      	cmp	r4, r3
 8008662:	dd17      	ble.n	8008694 <__ieee754_pow+0x23c>
 8008664:	2f00      	cmp	r7, #0
 8008666:	dcf4      	bgt.n	8008652 <__ieee754_pow+0x1fa>
 8008668:	e778      	b.n	800855c <__ieee754_pow+0x104>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	8800759c 	.word	0x8800759c
 8008674:	7e37e43c 	.word	0x7e37e43c
 8008678:	7ff00000 	.word	0x7ff00000
 800867c:	0800952f 	.word	0x0800952f
 8008680:	433fffff 	.word	0x433fffff
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	3fefffff 	.word	0x3fefffff
 800868c:	3fe00000 	.word	0x3fe00000
 8008690:	41e00000 	.word	0x41e00000
 8008694:	4b64      	ldr	r3, [pc, #400]	; (8008828 <__ieee754_pow+0x3d0>)
 8008696:	2200      	movs	r2, #0
 8008698:	f7f7 fdfe 	bl	8000298 <__aeabi_dsub>
 800869c:	a356      	add	r3, pc, #344	; (adr r3, 80087f8 <__ieee754_pow+0x3a0>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	4604      	mov	r4, r0
 80086a4:	460d      	mov	r5, r1
 80086a6:	f7f7 ffaf 	bl	8000608 <__aeabi_dmul>
 80086aa:	a355      	add	r3, pc, #340	; (adr r3, 8008800 <__ieee754_pow+0x3a8>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	4606      	mov	r6, r0
 80086b2:	460f      	mov	r7, r1
 80086b4:	4620      	mov	r0, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7f7 ffa6 	bl	8000608 <__aeabi_dmul>
 80086bc:	4b5b      	ldr	r3, [pc, #364]	; (800882c <__ieee754_pow+0x3d4>)
 80086be:	4682      	mov	sl, r0
 80086c0:	468b      	mov	fp, r1
 80086c2:	2200      	movs	r2, #0
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f7 ff9e 	bl	8000608 <__aeabi_dmul>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	a14d      	add	r1, pc, #308	; (adr r1, 8008808 <__ieee754_pow+0x3b0>)
 80086d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d6:	f7f7 fddf 	bl	8000298 <__aeabi_dsub>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	f7f7 ff93 	bl	8000608 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	2000      	movs	r0, #0
 80086e8:	4951      	ldr	r1, [pc, #324]	; (8008830 <__ieee754_pow+0x3d8>)
 80086ea:	f7f7 fdd5 	bl	8000298 <__aeabi_dsub>
 80086ee:	4622      	mov	r2, r4
 80086f0:	4680      	mov	r8, r0
 80086f2:	4689      	mov	r9, r1
 80086f4:	462b      	mov	r3, r5
 80086f6:	4620      	mov	r0, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	f7f7 ff85 	bl	8000608 <__aeabi_dmul>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	f7f7 ff7f 	bl	8000608 <__aeabi_dmul>
 800870a:	a341      	add	r3, pc, #260	; (adr r3, 8008810 <__ieee754_pow+0x3b8>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 ff7a 	bl	8000608 <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4650      	mov	r0, sl
 800871a:	4659      	mov	r1, fp
 800871c:	f7f7 fdbc 	bl	8000298 <__aeabi_dsub>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fdb6 	bl	800029c <__adddf3>
 8008730:	2400      	movs	r4, #0
 8008732:	4632      	mov	r2, r6
 8008734:	463b      	mov	r3, r7
 8008736:	4620      	mov	r0, r4
 8008738:	460d      	mov	r5, r1
 800873a:	f7f7 fdad 	bl	8000298 <__aeabi_dsub>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4640      	mov	r0, r8
 8008744:	4649      	mov	r1, r9
 8008746:	f7f7 fda7 	bl	8000298 <__aeabi_dsub>
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800874e:	3b01      	subs	r3, #1
 8008750:	4313      	orrs	r3, r2
 8008752:	4682      	mov	sl, r0
 8008754:	468b      	mov	fp, r1
 8008756:	f040 81f1 	bne.w	8008b3c <__ieee754_pow+0x6e4>
 800875a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008818 <__ieee754_pow+0x3c0>
 800875e:	eeb0 8a47 	vmov.f32	s16, s14
 8008762:	eef0 8a67 	vmov.f32	s17, s15
 8008766:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800876a:	2600      	movs	r6, #0
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008774:	f7f7 fd90 	bl	8000298 <__aeabi_dsub>
 8008778:	4622      	mov	r2, r4
 800877a:	462b      	mov	r3, r5
 800877c:	f7f7 ff44 	bl	8000608 <__aeabi_dmul>
 8008780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008784:	4680      	mov	r8, r0
 8008786:	4689      	mov	r9, r1
 8008788:	4650      	mov	r0, sl
 800878a:	4659      	mov	r1, fp
 800878c:	f7f7 ff3c 	bl	8000608 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4640      	mov	r0, r8
 8008796:	4649      	mov	r1, r9
 8008798:	f7f7 fd80 	bl	800029c <__adddf3>
 800879c:	4632      	mov	r2, r6
 800879e:	463b      	mov	r3, r7
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 ff2e 	bl	8000608 <__aeabi_dmul>
 80087ac:	460b      	mov	r3, r1
 80087ae:	4604      	mov	r4, r0
 80087b0:	460d      	mov	r5, r1
 80087b2:	4602      	mov	r2, r0
 80087b4:	4649      	mov	r1, r9
 80087b6:	4640      	mov	r0, r8
 80087b8:	f7f7 fd70 	bl	800029c <__adddf3>
 80087bc:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <__ieee754_pow+0x3dc>)
 80087be:	4299      	cmp	r1, r3
 80087c0:	ec45 4b19 	vmov	d9, r4, r5
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	468b      	mov	fp, r1
 80087ca:	f340 82fe 	ble.w	8008dca <__ieee754_pow+0x972>
 80087ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087d6:	4303      	orrs	r3, r0
 80087d8:	f000 81f0 	beq.w	8008bbc <__ieee754_pow+0x764>
 80087dc:	a310      	add	r3, pc, #64	; (adr r3, 8008820 <__ieee754_pow+0x3c8>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	ec51 0b18 	vmov	r0, r1, d8
 80087e6:	f7f7 ff0f 	bl	8000608 <__aeabi_dmul>
 80087ea:	a30d      	add	r3, pc, #52	; (adr r3, 8008820 <__ieee754_pow+0x3c8>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	e6cb      	b.n	800858a <__ieee754_pow+0x132>
 80087f2:	bf00      	nop
 80087f4:	f3af 8000 	nop.w
 80087f8:	60000000 	.word	0x60000000
 80087fc:	3ff71547 	.word	0x3ff71547
 8008800:	f85ddf44 	.word	0xf85ddf44
 8008804:	3e54ae0b 	.word	0x3e54ae0b
 8008808:	55555555 	.word	0x55555555
 800880c:	3fd55555 	.word	0x3fd55555
 8008810:	652b82fe 	.word	0x652b82fe
 8008814:	3ff71547 	.word	0x3ff71547
 8008818:	00000000 	.word	0x00000000
 800881c:	bff00000 	.word	0xbff00000
 8008820:	8800759c 	.word	0x8800759c
 8008824:	7e37e43c 	.word	0x7e37e43c
 8008828:	3ff00000 	.word	0x3ff00000
 800882c:	3fd00000 	.word	0x3fd00000
 8008830:	3fe00000 	.word	0x3fe00000
 8008834:	408fffff 	.word	0x408fffff
 8008838:	4bd7      	ldr	r3, [pc, #860]	; (8008b98 <__ieee754_pow+0x740>)
 800883a:	ea03 0309 	and.w	r3, r3, r9
 800883e:	2200      	movs	r2, #0
 8008840:	b92b      	cbnz	r3, 800884e <__ieee754_pow+0x3f6>
 8008842:	4bd6      	ldr	r3, [pc, #856]	; (8008b9c <__ieee754_pow+0x744>)
 8008844:	f7f7 fee0 	bl	8000608 <__aeabi_dmul>
 8008848:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800884c:	460c      	mov	r4, r1
 800884e:	1523      	asrs	r3, r4, #20
 8008850:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008854:	4413      	add	r3, r2
 8008856:	9309      	str	r3, [sp, #36]	; 0x24
 8008858:	4bd1      	ldr	r3, [pc, #836]	; (8008ba0 <__ieee754_pow+0x748>)
 800885a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800885e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008862:	429c      	cmp	r4, r3
 8008864:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008868:	dd08      	ble.n	800887c <__ieee754_pow+0x424>
 800886a:	4bce      	ldr	r3, [pc, #824]	; (8008ba4 <__ieee754_pow+0x74c>)
 800886c:	429c      	cmp	r4, r3
 800886e:	f340 8163 	ble.w	8008b38 <__ieee754_pow+0x6e0>
 8008872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008874:	3301      	adds	r3, #1
 8008876:	9309      	str	r3, [sp, #36]	; 0x24
 8008878:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800887c:	2400      	movs	r4, #0
 800887e:	00e3      	lsls	r3, r4, #3
 8008880:	930b      	str	r3, [sp, #44]	; 0x2c
 8008882:	4bc9      	ldr	r3, [pc, #804]	; (8008ba8 <__ieee754_pow+0x750>)
 8008884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008888:	ed93 7b00 	vldr	d7, [r3]
 800888c:	4629      	mov	r1, r5
 800888e:	ec53 2b17 	vmov	r2, r3, d7
 8008892:	eeb0 8a47 	vmov.f32	s16, s14
 8008896:	eef0 8a67 	vmov.f32	s17, s15
 800889a:	4682      	mov	sl, r0
 800889c:	f7f7 fcfc 	bl	8000298 <__aeabi_dsub>
 80088a0:	4652      	mov	r2, sl
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	462b      	mov	r3, r5
 80088a8:	ec51 0b18 	vmov	r0, r1, d8
 80088ac:	f7f7 fcf6 	bl	800029c <__adddf3>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	2000      	movs	r0, #0
 80088b6:	49bd      	ldr	r1, [pc, #756]	; (8008bac <__ieee754_pow+0x754>)
 80088b8:	f7f7 ffd0 	bl	800085c <__aeabi_ddiv>
 80088bc:	ec41 0b19 	vmov	d9, r0, r1
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4630      	mov	r0, r6
 80088c6:	4639      	mov	r1, r7
 80088c8:	f7f7 fe9e 	bl	8000608 <__aeabi_dmul>
 80088cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088d8:	2300      	movs	r3, #0
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80088e0:	46ab      	mov	fp, r5
 80088e2:	106d      	asrs	r5, r5, #1
 80088e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80088e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088ec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80088f0:	2200      	movs	r2, #0
 80088f2:	4640      	mov	r0, r8
 80088f4:	4649      	mov	r1, r9
 80088f6:	4614      	mov	r4, r2
 80088f8:	461d      	mov	r5, r3
 80088fa:	f7f7 fe85 	bl	8000608 <__aeabi_dmul>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4630      	mov	r0, r6
 8008904:	4639      	mov	r1, r7
 8008906:	f7f7 fcc7 	bl	8000298 <__aeabi_dsub>
 800890a:	ec53 2b18 	vmov	r2, r3, d8
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4650      	mov	r0, sl
 8008920:	4659      	mov	r1, fp
 8008922:	f7f7 fcb9 	bl	8000298 <__aeabi_dsub>
 8008926:	4642      	mov	r2, r8
 8008928:	464b      	mov	r3, r9
 800892a:	f7f7 fe6d 	bl	8000608 <__aeabi_dmul>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4630      	mov	r0, r6
 8008934:	4639      	mov	r1, r7
 8008936:	f7f7 fcaf 	bl	8000298 <__aeabi_dsub>
 800893a:	ec53 2b19 	vmov	r2, r3, d9
 800893e:	f7f7 fe63 	bl	8000608 <__aeabi_dmul>
 8008942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008946:	ec41 0b18 	vmov	d8, r0, r1
 800894a:	4610      	mov	r0, r2
 800894c:	4619      	mov	r1, r3
 800894e:	f7f7 fe5b 	bl	8000608 <__aeabi_dmul>
 8008952:	a37d      	add	r3, pc, #500	; (adr r3, 8008b48 <__ieee754_pow+0x6f0>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	f7f7 fe54 	bl	8000608 <__aeabi_dmul>
 8008960:	a37b      	add	r3, pc, #492	; (adr r3, 8008b50 <__ieee754_pow+0x6f8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fc99 	bl	800029c <__adddf3>
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	f7f7 fe4b 	bl	8000608 <__aeabi_dmul>
 8008972:	a379      	add	r3, pc, #484	; (adr r3, 8008b58 <__ieee754_pow+0x700>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fc90 	bl	800029c <__adddf3>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f7 fe42 	bl	8000608 <__aeabi_dmul>
 8008984:	a376      	add	r3, pc, #472	; (adr r3, 8008b60 <__ieee754_pow+0x708>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fc87 	bl	800029c <__adddf3>
 800898e:	4622      	mov	r2, r4
 8008990:	462b      	mov	r3, r5
 8008992:	f7f7 fe39 	bl	8000608 <__aeabi_dmul>
 8008996:	a374      	add	r3, pc, #464	; (adr r3, 8008b68 <__ieee754_pow+0x710>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fc7e 	bl	800029c <__adddf3>
 80089a0:	4622      	mov	r2, r4
 80089a2:	462b      	mov	r3, r5
 80089a4:	f7f7 fe30 	bl	8000608 <__aeabi_dmul>
 80089a8:	a371      	add	r3, pc, #452	; (adr r3, 8008b70 <__ieee754_pow+0x718>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 fc75 	bl	800029c <__adddf3>
 80089b2:	4622      	mov	r2, r4
 80089b4:	4606      	mov	r6, r0
 80089b6:	460f      	mov	r7, r1
 80089b8:	462b      	mov	r3, r5
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fe23 	bl	8000608 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4630      	mov	r0, r6
 80089c8:	4639      	mov	r1, r7
 80089ca:	f7f7 fe1d 	bl	8000608 <__aeabi_dmul>
 80089ce:	4642      	mov	r2, r8
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	464b      	mov	r3, r9
 80089d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089da:	f7f7 fc5f 	bl	800029c <__adddf3>
 80089de:	ec53 2b18 	vmov	r2, r3, d8
 80089e2:	f7f7 fe11 	bl	8000608 <__aeabi_dmul>
 80089e6:	4622      	mov	r2, r4
 80089e8:	462b      	mov	r3, r5
 80089ea:	f7f7 fc57 	bl	800029c <__adddf3>
 80089ee:	4642      	mov	r2, r8
 80089f0:	4682      	mov	sl, r0
 80089f2:	468b      	mov	fp, r1
 80089f4:	464b      	mov	r3, r9
 80089f6:	4640      	mov	r0, r8
 80089f8:	4649      	mov	r1, r9
 80089fa:	f7f7 fe05 	bl	8000608 <__aeabi_dmul>
 80089fe:	4b6c      	ldr	r3, [pc, #432]	; (8008bb0 <__ieee754_pow+0x758>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	f7f7 fc49 	bl	800029c <__adddf3>
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	f7f7 fc45 	bl	800029c <__adddf3>
 8008a12:	9c04      	ldr	r4, [sp, #16]
 8008a14:	460d      	mov	r5, r1
 8008a16:	4622      	mov	r2, r4
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	4b63      	ldr	r3, [pc, #396]	; (8008bb0 <__ieee754_pow+0x758>)
 8008a24:	4680      	mov	r8, r0
 8008a26:	4689      	mov	r9, r1
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 fc33 	bl	8000298 <__aeabi_dsub>
 8008a32:	4632      	mov	r2, r6
 8008a34:	463b      	mov	r3, r7
 8008a36:	f7f7 fc2f 	bl	8000298 <__aeabi_dsub>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4650      	mov	r0, sl
 8008a40:	4659      	mov	r1, fp
 8008a42:	f7f7 fc29 	bl	8000298 <__aeabi_dsub>
 8008a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a4a:	f7f7 fddd 	bl	8000608 <__aeabi_dmul>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4606      	mov	r6, r0
 8008a52:	460f      	mov	r7, r1
 8008a54:	462b      	mov	r3, r5
 8008a56:	ec51 0b18 	vmov	r0, r1, d8
 8008a5a:	f7f7 fdd5 	bl	8000608 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fc19 	bl	800029c <__adddf3>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f7 fc11 	bl	800029c <__adddf3>
 8008a7a:	9c04      	ldr	r4, [sp, #16]
 8008a7c:	a33e      	add	r3, pc, #248	; (adr r3, 8008b78 <__ieee754_pow+0x720>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	4620      	mov	r0, r4
 8008a84:	460d      	mov	r5, r1
 8008a86:	f7f7 fdbf 	bl	8000608 <__aeabi_dmul>
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	ec41 0b18 	vmov	d8, r0, r1
 8008a90:	464b      	mov	r3, r9
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7f7 fbff 	bl	8000298 <__aeabi_dsub>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f7 fbf9 	bl	8000298 <__aeabi_dsub>
 8008aa6:	a336      	add	r3, pc, #216	; (adr r3, 8008b80 <__ieee754_pow+0x728>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fdac 	bl	8000608 <__aeabi_dmul>
 8008ab0:	a335      	add	r3, pc, #212	; (adr r3, 8008b88 <__ieee754_pow+0x730>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fbe7 	bl	800029c <__adddf3>
 8008ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ad0:	4b38      	ldr	r3, [pc, #224]	; (8008bb4 <__ieee754_pow+0x75c>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fbe0 	bl	800029c <__adddf3>
 8008adc:	4682      	mov	sl, r0
 8008ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae0:	468b      	mov	fp, r1
 8008ae2:	f7f7 fd27 	bl	8000534 <__aeabi_i2d>
 8008ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ae8:	4b33      	ldr	r3, [pc, #204]	; (8008bb8 <__ieee754_pow+0x760>)
 8008aea:	4413      	add	r3, r2
 8008aec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008af0:	4606      	mov	r6, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	4652      	mov	r2, sl
 8008af6:	465b      	mov	r3, fp
 8008af8:	ec51 0b18 	vmov	r0, r1, d8
 8008afc:	f7f7 fbce 	bl	800029c <__adddf3>
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	f7f7 fbca 	bl	800029c <__adddf3>
 8008b08:	4632      	mov	r2, r6
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	f7f7 fbc6 	bl	800029c <__adddf3>
 8008b10:	9c04      	ldr	r4, [sp, #16]
 8008b12:	4632      	mov	r2, r6
 8008b14:	463b      	mov	r3, r7
 8008b16:	4620      	mov	r0, r4
 8008b18:	460d      	mov	r5, r1
 8008b1a:	f7f7 fbbd 	bl	8000298 <__aeabi_dsub>
 8008b1e:	4642      	mov	r2, r8
 8008b20:	464b      	mov	r3, r9
 8008b22:	f7f7 fbb9 	bl	8000298 <__aeabi_dsub>
 8008b26:	ec53 2b18 	vmov	r2, r3, d8
 8008b2a:	f7f7 fbb5 	bl	8000298 <__aeabi_dsub>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4650      	mov	r0, sl
 8008b34:	4659      	mov	r1, fp
 8008b36:	e606      	b.n	8008746 <__ieee754_pow+0x2ee>
 8008b38:	2401      	movs	r4, #1
 8008b3a:	e6a0      	b.n	800887e <__ieee754_pow+0x426>
 8008b3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008b90 <__ieee754_pow+0x738>
 8008b40:	e60d      	b.n	800875e <__ieee754_pow+0x306>
 8008b42:	bf00      	nop
 8008b44:	f3af 8000 	nop.w
 8008b48:	4a454eef 	.word	0x4a454eef
 8008b4c:	3fca7e28 	.word	0x3fca7e28
 8008b50:	93c9db65 	.word	0x93c9db65
 8008b54:	3fcd864a 	.word	0x3fcd864a
 8008b58:	a91d4101 	.word	0xa91d4101
 8008b5c:	3fd17460 	.word	0x3fd17460
 8008b60:	518f264d 	.word	0x518f264d
 8008b64:	3fd55555 	.word	0x3fd55555
 8008b68:	db6fabff 	.word	0xdb6fabff
 8008b6c:	3fdb6db6 	.word	0x3fdb6db6
 8008b70:	33333303 	.word	0x33333303
 8008b74:	3fe33333 	.word	0x3fe33333
 8008b78:	e0000000 	.word	0xe0000000
 8008b7c:	3feec709 	.word	0x3feec709
 8008b80:	dc3a03fd 	.word	0xdc3a03fd
 8008b84:	3feec709 	.word	0x3feec709
 8008b88:	145b01f5 	.word	0x145b01f5
 8008b8c:	be3e2fe0 	.word	0xbe3e2fe0
 8008b90:	00000000 	.word	0x00000000
 8008b94:	3ff00000 	.word	0x3ff00000
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	43400000 	.word	0x43400000
 8008ba0:	0003988e 	.word	0x0003988e
 8008ba4:	000bb679 	.word	0x000bb679
 8008ba8:	080096b0 	.word	0x080096b0
 8008bac:	3ff00000 	.word	0x3ff00000
 8008bb0:	40080000 	.word	0x40080000
 8008bb4:	080096d0 	.word	0x080096d0
 8008bb8:	080096c0 	.word	0x080096c0
 8008bbc:	a3b5      	add	r3, pc, #724	; (adr r3, 8008e94 <__ieee754_pow+0xa3c>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	f7f7 fb69 	bl	800029c <__adddf3>
 8008bca:	4622      	mov	r2, r4
 8008bcc:	ec41 0b1a 	vmov	d10, r0, r1
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f7 fb5f 	bl	8000298 <__aeabi_dsub>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	ec51 0b1a 	vmov	r0, r1, d10
 8008be2:	f7f7 ffa1 	bl	8000b28 <__aeabi_dcmpgt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f47f adf8 	bne.w	80087dc <__ieee754_pow+0x384>
 8008bec:	4aa4      	ldr	r2, [pc, #656]	; (8008e80 <__ieee754_pow+0xa28>)
 8008bee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f340 810b 	ble.w	8008e0e <__ieee754_pow+0x9b6>
 8008bf8:	151b      	asrs	r3, r3, #20
 8008bfa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c02:	fa4a f303 	asr.w	r3, sl, r3
 8008c06:	445b      	add	r3, fp
 8008c08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008c0c:	4e9d      	ldr	r6, [pc, #628]	; (8008e84 <__ieee754_pow+0xa2c>)
 8008c0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008c12:	4116      	asrs	r6, r2
 8008c14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c18:	2000      	movs	r0, #0
 8008c1a:	ea23 0106 	bic.w	r1, r3, r6
 8008c1e:	f1c2 0214 	rsb	r2, r2, #20
 8008c22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c26:	fa4a fa02 	asr.w	sl, sl, r2
 8008c2a:	f1bb 0f00 	cmp.w	fp, #0
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	bfb8      	it	lt
 8008c38:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	ec41 0b19 	vmov	d9, r0, r1
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	ec51 0b19 	vmov	r0, r1, d9
 8008c4c:	f7f7 fb26 	bl	800029c <__adddf3>
 8008c50:	2400      	movs	r4, #0
 8008c52:	a379      	add	r3, pc, #484	; (adr r3, 8008e38 <__ieee754_pow+0x9e0>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	f7f7 fcd4 	bl	8000608 <__aeabi_dmul>
 8008c60:	ec53 2b19 	vmov	r2, r3, d9
 8008c64:	4606      	mov	r6, r0
 8008c66:	460f      	mov	r7, r1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7f7 fb14 	bl	8000298 <__aeabi_dsub>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 fb0e 	bl	8000298 <__aeabi_dsub>
 8008c7c:	a370      	add	r3, pc, #448	; (adr r3, 8008e40 <__ieee754_pow+0x9e8>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fcc1 	bl	8000608 <__aeabi_dmul>
 8008c86:	a370      	add	r3, pc, #448	; (adr r3, 8008e48 <__ieee754_pow+0x9f0>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fcb8 	bl	8000608 <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 fafc 	bl	800029c <__adddf3>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 faf4 	bl	800029c <__adddf3>
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4689      	mov	r9, r1
 8008cbc:	f7f7 faec 	bl	8000298 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fae6 	bl	8000298 <__aeabi_dsub>
 8008ccc:	4642      	mov	r2, r8
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	f7f7 fc96 	bl	8000608 <__aeabi_dmul>
 8008cdc:	a35c      	add	r3, pc, #368	; (adr r3, 8008e50 <__ieee754_pow+0x9f8>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	f7f7 fc8f 	bl	8000608 <__aeabi_dmul>
 8008cea:	a35b      	add	r3, pc, #364	; (adr r3, 8008e58 <__ieee754_pow+0xa00>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fad2 	bl	8000298 <__aeabi_dsub>
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	f7f7 fc86 	bl	8000608 <__aeabi_dmul>
 8008cfc:	a358      	add	r3, pc, #352	; (adr r3, 8008e60 <__ieee754_pow+0xa08>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 facb 	bl	800029c <__adddf3>
 8008d06:	4622      	mov	r2, r4
 8008d08:	462b      	mov	r3, r5
 8008d0a:	f7f7 fc7d 	bl	8000608 <__aeabi_dmul>
 8008d0e:	a356      	add	r3, pc, #344	; (adr r3, 8008e68 <__ieee754_pow+0xa10>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fac0 	bl	8000298 <__aeabi_dsub>
 8008d18:	4622      	mov	r2, r4
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	f7f7 fc74 	bl	8000608 <__aeabi_dmul>
 8008d20:	a353      	add	r3, pc, #332	; (adr r3, 8008e70 <__ieee754_pow+0xa18>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fab9 	bl	800029c <__adddf3>
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	f7f7 fc6b 	bl	8000608 <__aeabi_dmul>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 faad 	bl	8000298 <__aeabi_dsub>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	460d      	mov	r5, r1
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 fc5d 	bl	8000608 <__aeabi_dmul>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	ec41 0b19 	vmov	d9, r0, r1
 8008d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d58:	4620      	mov	r0, r4
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	f7f7 fa9c 	bl	8000298 <__aeabi_dsub>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	ec51 0b19 	vmov	r0, r1, d9
 8008d68:	f7f7 fd78 	bl	800085c <__aeabi_ddiv>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	463b      	mov	r3, r7
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 fc46 	bl	8000608 <__aeabi_dmul>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fa8c 	bl	800029c <__adddf3>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fa84 	bl	8000298 <__aeabi_dsub>
 8008d90:	4642      	mov	r2, r8
 8008d92:	464b      	mov	r3, r9
 8008d94:	f7f7 fa80 	bl	8000298 <__aeabi_dsub>
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	493a      	ldr	r1, [pc, #232]	; (8008e88 <__ieee754_pow+0xa30>)
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f7f7 fa7a 	bl	8000298 <__aeabi_dsub>
 8008da4:	e9cd 0100 	strd	r0, r1, [sp]
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db2:	da2f      	bge.n	8008e14 <__ieee754_pow+0x9bc>
 8008db4:	4650      	mov	r0, sl
 8008db6:	ed9d 0b00 	vldr	d0, [sp]
 8008dba:	f000 f9cd 	bl	8009158 <scalbn>
 8008dbe:	ec51 0b10 	vmov	r0, r1, d0
 8008dc2:	ec53 2b18 	vmov	r2, r3, d8
 8008dc6:	f7ff bbe0 	b.w	800858a <__ieee754_pow+0x132>
 8008dca:	4b30      	ldr	r3, [pc, #192]	; (8008e8c <__ieee754_pow+0xa34>)
 8008dcc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008dd0:	429e      	cmp	r6, r3
 8008dd2:	f77f af0b 	ble.w	8008bec <__ieee754_pow+0x794>
 8008dd6:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <__ieee754_pow+0xa38>)
 8008dd8:	440b      	add	r3, r1
 8008dda:	4303      	orrs	r3, r0
 8008ddc:	d00b      	beq.n	8008df6 <__ieee754_pow+0x99e>
 8008dde:	a326      	add	r3, pc, #152	; (adr r3, 8008e78 <__ieee754_pow+0xa20>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	ec51 0b18 	vmov	r0, r1, d8
 8008de8:	f7f7 fc0e 	bl	8000608 <__aeabi_dmul>
 8008dec:	a322      	add	r3, pc, #136	; (adr r3, 8008e78 <__ieee754_pow+0xa20>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f7ff bbca 	b.w	800858a <__ieee754_pow+0x132>
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	f7f7 fa4d 	bl	8000298 <__aeabi_dsub>
 8008dfe:	4642      	mov	r2, r8
 8008e00:	464b      	mov	r3, r9
 8008e02:	f7f7 fe87 	bl	8000b14 <__aeabi_dcmpge>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f43f aef0 	beq.w	8008bec <__ieee754_pow+0x794>
 8008e0c:	e7e7      	b.n	8008dde <__ieee754_pow+0x986>
 8008e0e:	f04f 0a00 	mov.w	sl, #0
 8008e12:	e717      	b.n	8008c44 <__ieee754_pow+0x7ec>
 8008e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	e7d2      	b.n	8008dc2 <__ieee754_pow+0x96a>
 8008e1c:	491a      	ldr	r1, [pc, #104]	; (8008e88 <__ieee754_pow+0xa30>)
 8008e1e:	2000      	movs	r0, #0
 8008e20:	f7ff bb9e 	b.w	8008560 <__ieee754_pow+0x108>
 8008e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e28:	f7ff bb9a 	b.w	8008560 <__ieee754_pow+0x108>
 8008e2c:	9000      	str	r0, [sp, #0]
 8008e2e:	f7ff bb76 	b.w	800851e <__ieee754_pow+0xc6>
 8008e32:	2100      	movs	r1, #0
 8008e34:	f7ff bb60 	b.w	80084f8 <__ieee754_pow+0xa0>
 8008e38:	00000000 	.word	0x00000000
 8008e3c:	3fe62e43 	.word	0x3fe62e43
 8008e40:	fefa39ef 	.word	0xfefa39ef
 8008e44:	3fe62e42 	.word	0x3fe62e42
 8008e48:	0ca86c39 	.word	0x0ca86c39
 8008e4c:	be205c61 	.word	0xbe205c61
 8008e50:	72bea4d0 	.word	0x72bea4d0
 8008e54:	3e663769 	.word	0x3e663769
 8008e58:	c5d26bf1 	.word	0xc5d26bf1
 8008e5c:	3ebbbd41 	.word	0x3ebbbd41
 8008e60:	af25de2c 	.word	0xaf25de2c
 8008e64:	3f11566a 	.word	0x3f11566a
 8008e68:	16bebd93 	.word	0x16bebd93
 8008e6c:	3f66c16c 	.word	0x3f66c16c
 8008e70:	5555553e 	.word	0x5555553e
 8008e74:	3fc55555 	.word	0x3fc55555
 8008e78:	c2f8f359 	.word	0xc2f8f359
 8008e7c:	01a56e1f 	.word	0x01a56e1f
 8008e80:	3fe00000 	.word	0x3fe00000
 8008e84:	000fffff 	.word	0x000fffff
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	4090cbff 	.word	0x4090cbff
 8008e90:	3f6f3400 	.word	0x3f6f3400
 8008e94:	652b82fe 	.word	0x652b82fe
 8008e98:	3c971547 	.word	0x3c971547

08008e9c <__ieee754_sqrt>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	ec55 4b10 	vmov	r4, r5, d0
 8008ea4:	4e56      	ldr	r6, [pc, #344]	; (8009000 <__ieee754_sqrt+0x164>)
 8008ea6:	43ae      	bics	r6, r5
 8008ea8:	ee10 0a10 	vmov	r0, s0
 8008eac:	ee10 3a10 	vmov	r3, s0
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	d110      	bne.n	8008ed8 <__ieee754_sqrt+0x3c>
 8008eb6:	ee10 2a10 	vmov	r2, s0
 8008eba:	462b      	mov	r3, r5
 8008ebc:	f7f7 fba4 	bl	8000608 <__aeabi_dmul>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 f9e8 	bl	800029c <__adddf3>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	ec45 4b10 	vmov	d0, r4, r5
 8008ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	dc10      	bgt.n	8008efe <__ieee754_sqrt+0x62>
 8008edc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ee0:	4330      	orrs	r0, r6
 8008ee2:	d0f5      	beq.n	8008ed0 <__ieee754_sqrt+0x34>
 8008ee4:	b15d      	cbz	r5, 8008efe <__ieee754_sqrt+0x62>
 8008ee6:	ee10 2a10 	vmov	r2, s0
 8008eea:	462b      	mov	r3, r5
 8008eec:	ee10 0a10 	vmov	r0, s0
 8008ef0:	f7f7 f9d2 	bl	8000298 <__aeabi_dsub>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	f7f7 fcb0 	bl	800085c <__aeabi_ddiv>
 8008efc:	e7e6      	b.n	8008ecc <__ieee754_sqrt+0x30>
 8008efe:	1509      	asrs	r1, r1, #20
 8008f00:	d076      	beq.n	8008ff0 <__ieee754_sqrt+0x154>
 8008f02:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008f06:	07ce      	lsls	r6, r1, #31
 8008f08:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008f0c:	bf5e      	ittt	pl
 8008f0e:	0fda      	lsrpl	r2, r3, #31
 8008f10:	005b      	lslpl	r3, r3, #1
 8008f12:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008f16:	0fda      	lsrs	r2, r3, #31
 8008f18:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008f1c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008f20:	2000      	movs	r0, #0
 8008f22:	106d      	asrs	r5, r5, #1
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	f04f 0e16 	mov.w	lr, #22
 8008f2a:	4684      	mov	ip, r0
 8008f2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f30:	eb0c 0401 	add.w	r4, ip, r1
 8008f34:	4294      	cmp	r4, r2
 8008f36:	bfde      	ittt	le
 8008f38:	1b12      	suble	r2, r2, r4
 8008f3a:	eb04 0c01 	addle.w	ip, r4, r1
 8008f3e:	1840      	addle	r0, r0, r1
 8008f40:	0052      	lsls	r2, r2, #1
 8008f42:	f1be 0e01 	subs.w	lr, lr, #1
 8008f46:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008f4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f52:	d1ed      	bne.n	8008f30 <__ieee754_sqrt+0x94>
 8008f54:	4671      	mov	r1, lr
 8008f56:	2720      	movs	r7, #32
 8008f58:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008f5c:	4562      	cmp	r2, ip
 8008f5e:	eb04 060e 	add.w	r6, r4, lr
 8008f62:	dc02      	bgt.n	8008f6a <__ieee754_sqrt+0xce>
 8008f64:	d113      	bne.n	8008f8e <__ieee754_sqrt+0xf2>
 8008f66:	429e      	cmp	r6, r3
 8008f68:	d811      	bhi.n	8008f8e <__ieee754_sqrt+0xf2>
 8008f6a:	2e00      	cmp	r6, #0
 8008f6c:	eb06 0e04 	add.w	lr, r6, r4
 8008f70:	da43      	bge.n	8008ffa <__ieee754_sqrt+0x15e>
 8008f72:	f1be 0f00 	cmp.w	lr, #0
 8008f76:	db40      	blt.n	8008ffa <__ieee754_sqrt+0x15e>
 8008f78:	f10c 0801 	add.w	r8, ip, #1
 8008f7c:	eba2 020c 	sub.w	r2, r2, ip
 8008f80:	429e      	cmp	r6, r3
 8008f82:	bf88      	it	hi
 8008f84:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008f88:	1b9b      	subs	r3, r3, r6
 8008f8a:	4421      	add	r1, r4
 8008f8c:	46c4      	mov	ip, r8
 8008f8e:	0052      	lsls	r2, r2, #1
 8008f90:	3f01      	subs	r7, #1
 8008f92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008f96:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f9e:	d1dd      	bne.n	8008f5c <__ieee754_sqrt+0xc0>
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	d006      	beq.n	8008fb2 <__ieee754_sqrt+0x116>
 8008fa4:	1c4c      	adds	r4, r1, #1
 8008fa6:	bf13      	iteet	ne
 8008fa8:	3101      	addne	r1, #1
 8008faa:	3001      	addeq	r0, #1
 8008fac:	4639      	moveq	r1, r7
 8008fae:	f021 0101 	bicne.w	r1, r1, #1
 8008fb2:	1043      	asrs	r3, r0, #1
 8008fb4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008fb8:	0849      	lsrs	r1, r1, #1
 8008fba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008fbe:	07c2      	lsls	r2, r0, #31
 8008fc0:	bf48      	it	mi
 8008fc2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008fc6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008fca:	460c      	mov	r4, r1
 8008fcc:	463d      	mov	r5, r7
 8008fce:	e77f      	b.n	8008ed0 <__ieee754_sqrt+0x34>
 8008fd0:	0ada      	lsrs	r2, r3, #11
 8008fd2:	3815      	subs	r0, #21
 8008fd4:	055b      	lsls	r3, r3, #21
 8008fd6:	2a00      	cmp	r2, #0
 8008fd8:	d0fa      	beq.n	8008fd0 <__ieee754_sqrt+0x134>
 8008fda:	02d7      	lsls	r7, r2, #11
 8008fdc:	d50a      	bpl.n	8008ff4 <__ieee754_sqrt+0x158>
 8008fde:	f1c1 0420 	rsb	r4, r1, #32
 8008fe2:	fa23 f404 	lsr.w	r4, r3, r4
 8008fe6:	1e4d      	subs	r5, r1, #1
 8008fe8:	408b      	lsls	r3, r1
 8008fea:	4322      	orrs	r2, r4
 8008fec:	1b41      	subs	r1, r0, r5
 8008fee:	e788      	b.n	8008f02 <__ieee754_sqrt+0x66>
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	e7f0      	b.n	8008fd6 <__ieee754_sqrt+0x13a>
 8008ff4:	0052      	lsls	r2, r2, #1
 8008ff6:	3101      	adds	r1, #1
 8008ff8:	e7ef      	b.n	8008fda <__ieee754_sqrt+0x13e>
 8008ffa:	46e0      	mov	r8, ip
 8008ffc:	e7be      	b.n	8008f7c <__ieee754_sqrt+0xe0>
 8008ffe:	bf00      	nop
 8009000:	7ff00000 	.word	0x7ff00000

08009004 <fabs>:
 8009004:	ec51 0b10 	vmov	r0, r1, d0
 8009008:	ee10 2a10 	vmov	r2, s0
 800900c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009010:	ec43 2b10 	vmov	d0, r2, r3
 8009014:	4770      	bx	lr

08009016 <finite>:
 8009016:	b082      	sub	sp, #8
 8009018:	ed8d 0b00 	vstr	d0, [sp]
 800901c:	9801      	ldr	r0, [sp, #4]
 800901e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009022:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009026:	0fc0      	lsrs	r0, r0, #31
 8009028:	b002      	add	sp, #8
 800902a:	4770      	bx	lr
 800902c:	0000      	movs	r0, r0
	...

08009030 <nan>:
 8009030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009038 <nan+0x8>
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	00000000 	.word	0x00000000
 800903c:	7ff80000 	.word	0x7ff80000

08009040 <rint>:
 8009040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009042:	ec51 0b10 	vmov	r0, r1, d0
 8009046:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800904a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800904e:	2e13      	cmp	r6, #19
 8009050:	ee10 4a10 	vmov	r4, s0
 8009054:	460b      	mov	r3, r1
 8009056:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800905a:	dc58      	bgt.n	800910e <rint+0xce>
 800905c:	2e00      	cmp	r6, #0
 800905e:	da2b      	bge.n	80090b8 <rint+0x78>
 8009060:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009064:	4302      	orrs	r2, r0
 8009066:	d023      	beq.n	80090b0 <rint+0x70>
 8009068:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800906c:	4302      	orrs	r2, r0
 800906e:	4254      	negs	r4, r2
 8009070:	4314      	orrs	r4, r2
 8009072:	0c4b      	lsrs	r3, r1, #17
 8009074:	0b24      	lsrs	r4, r4, #12
 8009076:	045b      	lsls	r3, r3, #17
 8009078:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800907c:	ea44 0103 	orr.w	r1, r4, r3
 8009080:	4b32      	ldr	r3, [pc, #200]	; (800914c <rint+0x10c>)
 8009082:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009086:	e9d3 6700 	ldrd	r6, r7, [r3]
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4630      	mov	r0, r6
 8009090:	4639      	mov	r1, r7
 8009092:	f7f7 f903 	bl	800029c <__adddf3>
 8009096:	e9cd 0100 	strd	r0, r1, [sp]
 800909a:	463b      	mov	r3, r7
 800909c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090a0:	4632      	mov	r2, r6
 80090a2:	f7f7 f8f9 	bl	8000298 <__aeabi_dsub>
 80090a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80090ae:	4639      	mov	r1, r7
 80090b0:	ec41 0b10 	vmov	d0, r0, r1
 80090b4:	b003      	add	sp, #12
 80090b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b8:	4a25      	ldr	r2, [pc, #148]	; (8009150 <rint+0x110>)
 80090ba:	4132      	asrs	r2, r6
 80090bc:	ea01 0702 	and.w	r7, r1, r2
 80090c0:	4307      	orrs	r7, r0
 80090c2:	d0f5      	beq.n	80090b0 <rint+0x70>
 80090c4:	0851      	lsrs	r1, r2, #1
 80090c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80090ca:	4314      	orrs	r4, r2
 80090cc:	d00c      	beq.n	80090e8 <rint+0xa8>
 80090ce:	ea23 0201 	bic.w	r2, r3, r1
 80090d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090d6:	2e13      	cmp	r6, #19
 80090d8:	fa43 f606 	asr.w	r6, r3, r6
 80090dc:	bf0c      	ite	eq
 80090de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80090e2:	2400      	movne	r4, #0
 80090e4:	ea42 0306 	orr.w	r3, r2, r6
 80090e8:	4918      	ldr	r1, [pc, #96]	; (800914c <rint+0x10c>)
 80090ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80090ee:	4622      	mov	r2, r4
 80090f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 f8d0 	bl	800029c <__adddf3>
 80090fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009104:	4622      	mov	r2, r4
 8009106:	462b      	mov	r3, r5
 8009108:	f7f7 f8c6 	bl	8000298 <__aeabi_dsub>
 800910c:	e7d0      	b.n	80090b0 <rint+0x70>
 800910e:	2e33      	cmp	r6, #51	; 0x33
 8009110:	dd07      	ble.n	8009122 <rint+0xe2>
 8009112:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009116:	d1cb      	bne.n	80090b0 <rint+0x70>
 8009118:	ee10 2a10 	vmov	r2, s0
 800911c:	f7f7 f8be 	bl	800029c <__adddf3>
 8009120:	e7c6      	b.n	80090b0 <rint+0x70>
 8009122:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009126:	f04f 36ff 	mov.w	r6, #4294967295
 800912a:	40d6      	lsrs	r6, r2
 800912c:	4230      	tst	r0, r6
 800912e:	d0bf      	beq.n	80090b0 <rint+0x70>
 8009130:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009134:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009138:	bf1f      	itttt	ne
 800913a:	ea24 0101 	bicne.w	r1, r4, r1
 800913e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009142:	fa44 f202 	asrne.w	r2, r4, r2
 8009146:	ea41 0402 	orrne.w	r4, r1, r2
 800914a:	e7cd      	b.n	80090e8 <rint+0xa8>
 800914c:	080096e0 	.word	0x080096e0
 8009150:	000fffff 	.word	0x000fffff
 8009154:	00000000 	.word	0x00000000

08009158 <scalbn>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	ec55 4b10 	vmov	r4, r5, d0
 800915e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009162:	4606      	mov	r6, r0
 8009164:	462b      	mov	r3, r5
 8009166:	b99a      	cbnz	r2, 8009190 <scalbn+0x38>
 8009168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800916c:	4323      	orrs	r3, r4
 800916e:	d036      	beq.n	80091de <scalbn+0x86>
 8009170:	4b39      	ldr	r3, [pc, #228]	; (8009258 <scalbn+0x100>)
 8009172:	4629      	mov	r1, r5
 8009174:	ee10 0a10 	vmov	r0, s0
 8009178:	2200      	movs	r2, #0
 800917a:	f7f7 fa45 	bl	8000608 <__aeabi_dmul>
 800917e:	4b37      	ldr	r3, [pc, #220]	; (800925c <scalbn+0x104>)
 8009180:	429e      	cmp	r6, r3
 8009182:	4604      	mov	r4, r0
 8009184:	460d      	mov	r5, r1
 8009186:	da10      	bge.n	80091aa <scalbn+0x52>
 8009188:	a32b      	add	r3, pc, #172	; (adr r3, 8009238 <scalbn+0xe0>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	e03a      	b.n	8009206 <scalbn+0xae>
 8009190:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009194:	428a      	cmp	r2, r1
 8009196:	d10c      	bne.n	80091b2 <scalbn+0x5a>
 8009198:	ee10 2a10 	vmov	r2, s0
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f7 f87c 	bl	800029c <__adddf3>
 80091a4:	4604      	mov	r4, r0
 80091a6:	460d      	mov	r5, r1
 80091a8:	e019      	b.n	80091de <scalbn+0x86>
 80091aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091ae:	460b      	mov	r3, r1
 80091b0:	3a36      	subs	r2, #54	; 0x36
 80091b2:	4432      	add	r2, r6
 80091b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80091b8:	428a      	cmp	r2, r1
 80091ba:	dd08      	ble.n	80091ce <scalbn+0x76>
 80091bc:	2d00      	cmp	r5, #0
 80091be:	a120      	add	r1, pc, #128	; (adr r1, 8009240 <scalbn+0xe8>)
 80091c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c4:	da1c      	bge.n	8009200 <scalbn+0xa8>
 80091c6:	a120      	add	r1, pc, #128	; (adr r1, 8009248 <scalbn+0xf0>)
 80091c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091cc:	e018      	b.n	8009200 <scalbn+0xa8>
 80091ce:	2a00      	cmp	r2, #0
 80091d0:	dd08      	ble.n	80091e4 <scalbn+0x8c>
 80091d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80091de:	ec45 4b10 	vmov	d0, r4, r5
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80091e8:	da19      	bge.n	800921e <scalbn+0xc6>
 80091ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80091ee:	429e      	cmp	r6, r3
 80091f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80091f4:	dd0a      	ble.n	800920c <scalbn+0xb4>
 80091f6:	a112      	add	r1, pc, #72	; (adr r1, 8009240 <scalbn+0xe8>)
 80091f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e2      	bne.n	80091c6 <scalbn+0x6e>
 8009200:	a30f      	add	r3, pc, #60	; (adr r3, 8009240 <scalbn+0xe8>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 f9ff 	bl	8000608 <__aeabi_dmul>
 800920a:	e7cb      	b.n	80091a4 <scalbn+0x4c>
 800920c:	a10a      	add	r1, pc, #40	; (adr r1, 8009238 <scalbn+0xe0>)
 800920e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0b8      	beq.n	8009188 <scalbn+0x30>
 8009216:	a10e      	add	r1, pc, #56	; (adr r1, 8009250 <scalbn+0xf8>)
 8009218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800921c:	e7b4      	b.n	8009188 <scalbn+0x30>
 800921e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009222:	3236      	adds	r2, #54	; 0x36
 8009224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009228:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800922c:	4620      	mov	r0, r4
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <scalbn+0x108>)
 8009230:	2200      	movs	r2, #0
 8009232:	e7e8      	b.n	8009206 <scalbn+0xae>
 8009234:	f3af 8000 	nop.w
 8009238:	c2f8f359 	.word	0xc2f8f359
 800923c:	01a56e1f 	.word	0x01a56e1f
 8009240:	8800759c 	.word	0x8800759c
 8009244:	7e37e43c 	.word	0x7e37e43c
 8009248:	8800759c 	.word	0x8800759c
 800924c:	fe37e43c 	.word	0xfe37e43c
 8009250:	c2f8f359 	.word	0xc2f8f359
 8009254:	81a56e1f 	.word	0x81a56e1f
 8009258:	43500000 	.word	0x43500000
 800925c:	ffff3cb0 	.word	0xffff3cb0
 8009260:	3c900000 	.word	0x3c900000

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
